/*
-- -*- SQL -*-  -- To make emacs recognize the correct program type.
///////////////////////////////////////////////////////////////////////////////
//=============================================================================
// Script:
//   --------------------------------------------------------------------------
//   econtent database
//   --------------------------------------------------------------------------
//=============================================================================
//
//=============================================================================
// Purpose:
//   --------------------------------------------------------------------------
//   DDL for managing econtent data.
//   --------------------------------------------------------------------------
//=============================================================================
//
//=============================================================================
// By: Hung-chih Yang
//   --------------------------------------------------------------------------
//   --------------------------------------------------------------------------
//=============================================================================
//
//=============================================================================
// Initiated date: DATELL--____INITIALIZATION_DATE____--DATERL
//   --------------------------------------------------------------------------
//   --------------------------------------------------------------------------
//=============================================================================
//
//=============================================================================
// Finalized date: DATELL--____INITIALIZATION_DATE____--DATERL
//   --------------------------------------------------------------------------
//   --------------------------------------------------------------------------
//=============================================================================
//
//=============================================================================
// Version Control information:
//   --------------------------------------------------------------------------
//   $Author$
//   --------------------------------------------------------------------------
//   $Date$
//   --------------------------------------------------------------------------
//   $Id$
//   --------------------------------------------------------------------------
//   $Header$
//   --------------------------------------------------------------------------
//   $Log$
//   --------------------------------------------------------------------------
//   $Source$
//   --------------------------------------------------------------------------
//   $Revision$
//   --------------------------------------------------------------------------
//   $State$
//   --------------------------------------------------------------------------
//   $Locker$
//   --------------------------------------------------------------------------
//   $Name$
//   --------------------------------------------------------------------------
//   $RCSfile$
//   --------------------------------------------------------------------------
//=============================================================================
//
//=============================================================================
// To do List:
//   --------------------------------------------------------------------------
//   --------------------------------------------------------------------------
//=============================================================================
//
//=============================================================================
// Change List:
//   --------------------------------------------------------------------------
//   --------------------------------------------------------------------------
//=============================================================================
//
//=============================================================================
// Notes:
//   --------------------------------------------------------------------------
//   --------------------------------------------------------------------------
//=============================================================================
//
//=============================================================================
// Functionalities:
//   --------------------------------------------------------------------------
//   --------------------------------------------------------------------------
//=============================================================================
//
*/

/*
===============================================================================
===============================================================================
===============================================================================
===============================================================================
*/

/*
===============================================================================
== USE DATABASE
===============================================================================
*/

/*
USE ec_main;
*/

/*
===============================================================================
===============================================================================
===============================================================================
===============================================================================
*/

set character_set_client = 'utf8';
set character_set_connection = 'utf8';
set character_set_database = 'utf8';
set character_set_filesystem = 'binary';
set character_set_results = 'utf8';
set character_set_server = 'utf8';
--  set character_set_system = 'utf8';
--  set character_sets_dir = 'C:\Program Files\MySQL\MySQL Server5.1\share\charsets\';
set collation_connection = 'utf8_unicode_ci';
set collation_database = 'utf8_unicode_ci';
set collation_server = 'utf8_unicode_ci';

/*
===============================================================================
===============================================================================
===============================================================================
===============================================================================
*/

/*
SHOW VARIABLES LIKE 'character_set_%'; 
SHOW VARIABLES LIKE 'collation_%'; 
*/

/*
===============================================================================
===============================================================================
===============================================================================
===============================================================================
*/

/*
===============================================================================
== Functions: 
===============================================================================
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--              012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP FUNCTION IF EXISTS sqlGetVarchar255StrongHash;
DELIMITER //
CREATE FUNCTION sqlGetVarchar255StrongHash(
  _InputString VARCHAR(8192
                       -- 65535
                       )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
)
RETURNS VARCHAR(255)
DETERMINISTIC
BEGIN
  RETURN
    SUBSTRING(SHA2(SHA2(_InputString,512),
                   512
                   ),
              1,255
              );
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--              012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP FUNCTION IF EXISTS sqlGetVarchar255StrongHash2;
DELIMITER //
CREATE FUNCTION sqlGetVarchar255StrongHash2(
  _InputString0 VARCHAR(4096
                        -- 32767
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString1 VARCHAR(4096
                        -- 32767
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
)
RETURNS VARCHAR(255)
DETERMINISTIC
BEGIN
  RETURN
    SUBSTRING(SHA2(CONCAT(SHA2(_InputString0,512),
                          SHA2(_InputString1,512)
                          ),
                   512
                   ),
              1,255
              );
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--              012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP FUNCTION IF EXISTS sqlGetVarchar255StrongHash3;
DELIMITER //
CREATE FUNCTION sqlGetVarchar255StrongHash3(
  _InputString0 VARCHAR(4096
                        -- 21845
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString1 VARCHAR(4096
                        -- 21845
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString2 VARCHAR(4096
                        -- 21845
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
)
RETURNS VARCHAR(255)
DETERMINISTIC
BEGIN
  RETURN
    SUBSTRING(SHA2(CONCAT(SHA2(_InputString0,512),
                          SHA2(_InputString1,512),
                          SHA2(_InputString2,512)
                          ),
                   512
                   ),
              1,255
              );
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--              012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP FUNCTION IF EXISTS sqlGetVarchar255StrongHash4;
DELIMITER //
CREATE FUNCTION sqlGetVarchar255StrongHash4(
  _InputString0 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString1 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString2 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString3 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
)
RETURNS VARCHAR(255)
DETERMINISTIC
BEGIN
  RETURN
    SUBSTRING(SHA2(CONCAT(SHA2(_InputString0,512),
                          SHA2(_InputString1,512),
                          SHA2(_InputString2,512),
                          SHA2(_InputString3,512)
                          ),
                   512
                   ),
              1,255
              );
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--              012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP FUNCTION IF EXISTS sqlGetVarchar255StrongHash5;
DELIMITER //
CREATE FUNCTION sqlGetVarchar255StrongHash5(
  _InputString0 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString1 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString2 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString3 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString4 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
)
RETURNS VARCHAR(255)
DETERMINISTIC
BEGIN
  RETURN
    SUBSTRING(SHA2(CONCAT(SHA2(_InputString0,512),
                          SHA2(_InputString1,512),
                          SHA2(_InputString2,512),
                          SHA2(_InputString3,512),
                          SHA2(_InputString4,512)
                          ),
                   512
                   ),
              1,255
              );
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--              012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP FUNCTION IF EXISTS sqlGetVarchar255StrongHash6;
DELIMITER //
CREATE FUNCTION sqlGetVarchar255StrongHash6(
  _InputString0 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString1 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString2 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString3 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString4 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString5 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
)
RETURNS VARCHAR(255)
DETERMINISTIC
BEGIN
  RETURN
    SUBSTRING(SHA2(CONCAT(SHA2(_InputString0,512),
                          SHA2(_InputString1,512),
                          SHA2(_InputString2,512),
                          SHA2(_InputString3,512),
                          SHA2(_InputString4,512),
                          SHA2(_InputString5,512)
                          ),
                   512
                   ),
              1,255
              );
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--              012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP FUNCTION IF EXISTS sqlGetVarchar255StrongHash7;
DELIMITER //
CREATE FUNCTION sqlGetVarchar255StrongHash7(
  _InputString0 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString1 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString2 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString3 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString4 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString5 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString6 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
)
RETURNS VARCHAR(255)
DETERMINISTIC
BEGIN
  RETURN
    SUBSTRING(SHA2(CONCAT(SHA2(_InputString0,512),
                          SHA2(_InputString1,512),
                          SHA2(_InputString2,512),
                          SHA2(_InputString3,512),
                          SHA2(_InputString4,512),
                          SHA2(_InputString5,512),
                          SHA2(_InputString6,512)
                          ),
                   512
                   ),
              1,255
              );
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--              012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP FUNCTION IF EXISTS sqlGetVarchar255StrongHash8;
DELIMITER //
CREATE FUNCTION sqlGetVarchar255StrongHash8(
  _InputString0 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString1 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString2 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString3 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString4 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString5 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString6 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString7 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
)
RETURNS VARCHAR(255)
DETERMINISTIC
BEGIN
  RETURN
    SUBSTRING(SHA2(CONCAT(SHA2(_InputString0,512),
                          SHA2(_InputString1,512),
                          SHA2(_InputString2,512),
                          SHA2(_InputString3,512),
                          SHA2(_InputString4,512),
                          SHA2(_InputString5,512),
                          SHA2(_InputString6,512),
                          SHA2(_InputString7,512)
                          ),
                   512
                   ),
              1,255
              );
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
===============================================================================
== Functions: 
===============================================================================
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--              012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP FUNCTION IF EXISTS sqlGetVarchar255Hash;
DELIMITER //
CREATE FUNCTION sqlGetVarchar255Hash(
  _InputString VARCHAR(8192
                       -- 65535
                       )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
)
RETURNS VARCHAR(255)
DETERMINISTIC
BEGIN
  RETURN
    SUBSTRING(SHA2(_InputString,
                   512
                   ),
              1,255
              );
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--              012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP FUNCTION IF EXISTS sqlGetVarchar255Hash2;
DELIMITER //
CREATE FUNCTION sqlGetVarchar255Hash2(
  _InputString0 VARCHAR(4096
                        -- 32767
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString1 VARCHAR(4096
                        -- 32767
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
)
RETURNS VARCHAR(255)
DETERMINISTIC
BEGIN
  RETURN
    SUBSTRING(SHA2(CONCAT(_InputString0,
                          _InputString1
                          ),
                   512
                   ),
              1,255
              );
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--              012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP FUNCTION IF EXISTS sqlGetVarchar255Hash3;
DELIMITER //
CREATE FUNCTION sqlGetVarchar255Hash3(
  _InputString0 VARCHAR(4096
                        -- 21845
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString1 VARCHAR(4096
                        -- 21845
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString2 VARCHAR(4096
                        -- 21845
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
)
RETURNS VARCHAR(255)
DETERMINISTIC
BEGIN
  RETURN
    SUBSTRING(SHA2(CONCAT(_InputString0,
                          _InputString1,
                          _InputString2
                          ),
                   512
                   ),
              1,255
              );
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--              012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP FUNCTION IF EXISTS sqlGetVarchar255Hash4;
DELIMITER //
CREATE FUNCTION sqlGetVarchar255Hash4(
  _InputString0 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString1 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString2 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString3 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
)
RETURNS VARCHAR(255)
DETERMINISTIC
BEGIN
  RETURN
    SUBSTRING(SHA2(CONCAT(_InputString0,
                          _InputString1,
                          _InputString2,
                          _InputString3
                          ),
                   512
                   ),
              1,255
              );
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--              012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP FUNCTION IF EXISTS sqlGetVarchar255Hash5;
DELIMITER //
CREATE FUNCTION sqlGetVarchar255Hash5(
  _InputString0 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString1 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString2 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString3 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString4 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
)
RETURNS VARCHAR(255)
DETERMINISTIC
BEGIN
  RETURN
    SUBSTRING(SHA2(CONCAT(_InputString0,
                          _InputString1,
                          _InputString2,
                          _InputString3,
                          _InputString4
                          ),
                   512
                   ),
              1,255
              );
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--              012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP FUNCTION IF EXISTS sqlGetVarchar255Hash6;
DELIMITER //
CREATE FUNCTION sqlGetVarchar255Hash6(
  _InputString0 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString1 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString2 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString3 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString4 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString5 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
)
RETURNS VARCHAR(255)
DETERMINISTIC
BEGIN
  RETURN
    SUBSTRING(SHA2(CONCAT(_InputString0,
                          _InputString1,
                          _InputString2,
                          _InputString3,
                          _InputString4,
                          _InputString5
                          ),
                   512
                   ),
              1,255
              );
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--              012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP FUNCTION IF EXISTS sqlGetVarchar255Hash7;
DELIMITER //
CREATE FUNCTION sqlGetVarchar255Hash7(
  _InputString0 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString1 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString2 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString3 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString4 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString5 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString6 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
)
RETURNS VARCHAR(255)
DETERMINISTIC
BEGIN
  RETURN
    SUBSTRING(SHA2(CONCAT(_InputString0,
                          _InputString1,
                          _InputString2,
                          _InputString3,
                          _InputString4,
                          _InputString5,
                          _InputString6
                          ),
                   512
                   ),
              1,255
              );
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--              012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP FUNCTION IF EXISTS sqlGetVarchar255Hash8;
DELIMITER //
CREATE FUNCTION sqlGetVarchar255Hash8(
  _InputString0 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString1 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString2 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString3 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString4 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString5 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString6 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString7 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
)
RETURNS VARCHAR(255)
DETERMINISTIC
BEGIN
  RETURN
    SUBSTRING(SHA2(CONCAT(_InputString0,
                          _InputString1,
                          _InputString2,
                          _InputString3,
                          _InputString4,
                          _InputString5,
                          _InputString6,
                          _InputString7
                          ),
                   512
                   ),
              1,255
              );
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
===============================================================================
== Functions: 
===============================================================================
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--              012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP FUNCTION IF EXISTS sqlGetId;
DELIMITER //
CREATE FUNCTION sqlGetId(
  _InputString VARCHAR(8192
                       -- 65535
                       )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
)
RETURNS BIGINT
DETERMINISTIC
BEGIN
  RETURN
    CAST(CONV(SUBSTRING(MD5(_InputString
                            ),
                        1,15
                        ),
              16,10
              )
         AS UNSIGNED INTEGER
         );
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--              012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP FUNCTION IF EXISTS sqlGetId2;
DELIMITER //
CREATE FUNCTION sqlGetId2(
  _InputString0 VARCHAR(4096
                        -- 32767
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString1 VARCHAR(4096
                        -- 32767
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
)
RETURNS BIGINT
DETERMINISTIC
BEGIN
  RETURN
    CAST(CONV(SUBSTRING(MD5(CONCAT(_InputString0,
                                   _InputString1
                                   )
                            ),
                        1,15
                        ),
              16,10
              )
         AS UNSIGNED INTEGER
         );
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--              012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP FUNCTION IF EXISTS sqlGetId3;
DELIMITER //
CREATE FUNCTION sqlGetId3(
  _InputString0 VARCHAR(4096
                        -- 21845
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString1 VARCHAR(4096
                        -- 21845
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString2 VARCHAR(4096
                        -- 21845
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
)
RETURNS BIGINT
DETERMINISTIC
BEGIN
  RETURN
    CAST(CONV(SUBSTRING(MD5(CONCAT(_InputString0,
                                   _InputString1,
                                   _InputString2
                                   )
                            ),
                        1,15
                        ),
              16,10
              )
         AS UNSIGNED INTEGER
         );
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--              012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP FUNCTION IF EXISTS sqlGetId4;
DELIMITER //
CREATE FUNCTION sqlGetId4(
  _InputString0 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString1 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString2 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString3 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
)
RETURNS BIGINT
DETERMINISTIC
BEGIN
  RETURN
    CAST(CONV(SUBSTRING(MD5(CONCAT(_InputString0,
                                   _InputString1,
                                   _InputString2,
                                   _InputString3
                                   )
                            ),
                        1,15
                        ),
              16,10
              )
         AS UNSIGNED INTEGER
         );
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--              012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP FUNCTION IF EXISTS sqlGetId5;
DELIMITER //
CREATE FUNCTION sqlGetId5(
  _InputString0 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString1 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString2 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString3 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString4 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
)
RETURNS BIGINT
DETERMINISTIC
BEGIN
  RETURN
    CAST(CONV(SUBSTRING(MD5(CONCAT(_InputString0,
                                   _InputString1,
                                   _InputString2,
                                   _InputString3,
                                   _InputString4
                                   )
                            ),
                        1,15
                        ),
              16,10
              )
         AS UNSIGNED INTEGER
         );
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--              012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP FUNCTION IF EXISTS sqlGetId6;
DELIMITER //
CREATE FUNCTION sqlGetId6(
  _InputString0 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString1 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString2 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString3 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString4 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString5 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
)
RETURNS BIGINT
DETERMINISTIC
BEGIN
  RETURN
    CAST(CONV(SUBSTRING(MD5(CONCAT(_InputString0,
                                   _InputString1,
                                   _InputString2,
                                   _InputString3,
                                   _InputString4,
                                   _InputString5
                                   )
                            ),
                        1,15
                        ),
              16,10
              )
         AS UNSIGNED INTEGER
         );
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--              012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP FUNCTION IF EXISTS sqlGetId7;
DELIMITER //
CREATE FUNCTION sqlGetId7(
  _InputString0 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString1 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString2 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString3 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString4 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString5 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString6 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
)
RETURNS BIGINT
DETERMINISTIC
BEGIN
  RETURN
    CAST(CONV(SUBSTRING(MD5(CONCAT(_InputString0,
                                   _InputString1,
                                   _InputString2,
                                   _InputString3,
                                   _InputString4,
                                   _InputString5,
                                   _InputString6
                                   )
                            ),
                        1,15
                        ),
              16,10
              )
         AS UNSIGNED INTEGER
         );
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--              012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP FUNCTION IF EXISTS sqlGetId8;
DELIMITER //
CREATE FUNCTION sqlGetId8(
  _InputString0 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString1 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString2 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString3 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString4 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString5 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString6 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
  ,
  _InputString7 VARCHAR(4096
                        -- 16383
                        )
    CHARACTER SET UTF8
    -- ---- COLLATE UTF8_UNICODE_CI
)
RETURNS BIGINT
DETERMINISTIC
BEGIN
  RETURN
    CAST(CONV(SUBSTRING(MD5(CONCAT(_InputString0,
                                   _InputString1,
                                   _InputString2,
                                   _InputString3,
                                   _InputString4,
                                   _InputString5,
                                   _InputString6,
                                   _InputString7
                                   )
                            ),
                        1,15
                        ),
              16,10
              )
         AS UNSIGNED INTEGER
         );
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
===============================================================================
===============================================================================
===============================================================================
===============================================================================
*/

/*
===============================================================================
== Subschema: Log
===============================================================================
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbi_ec_L_LogType;
DELIMITER //
CREATE TRIGGER   tbi_ec_L_LogType
BEFORE INSERT ON ec_L_LogType
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _LogTypeID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.LT_EntryCreatedTime = CURRENT_TIMESTAMP();
  SET NEW.LT_EntryUpdatedTime = '0000-00-00 00:00:00';
  -- --------------------------------------------------------------------------
  IF ((NEW.LT_LogTypeID IS NULL
       )
      OR
      (NEW.LT_LogTypeID != 0
       )
      )
  THEN
    SET _LogTypeID =
    sqlGetId(NEW.LT_LogTypeName);
    -- CAST(CONV(SUBSTRING(MD5(NEW.LT_LogTypeName),1,15),16,10)
    --      AS UNSIGNED INTEGER);
    IF (_LogTypeID IS NULL)
    THEN
      SET _LogTypeID = 0;
    END IF;
    SET NEW.LT_LogTypeID = _LogTypeID;
  END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.LT_LogTypeID IS NULL
  --      )
  --     -- OR
  --     -- (NEW.LT_LogTypeID = 0
  --     --  )
  --     )
  -- THEN
  --   SELECT
  --     MAX(ec_L_LogType.LT_LogTypeID)+1
  --   INTO
  --     _LogTypeID
  --   FROM
  --     ec_L_LogType;
  --   IF (_LogTypeID IS NULL)
  --   THEN
  --     SET _LogTypeID = 0;
  --   END IF;
  --   SET NEW.LT_LogTypeID = _LogTypeID;
  -- END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbu_ec_L_LogType;
DELIMITER //
CREATE TRIGGER   tbu_ec_L_LogType
BEFORE UPDATE ON ec_L_LogType
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.LT_EntryCreatedTime = OLD.LT_EntryCreatedTime,
      NEW.LT_EntryUpdatedTime = EntryUpdatedTime,
      NEW.LT_LogTypeID = OLD.LT_LogTypeID,
      NEW.LT_LogTypeName = OLD.LT_LogTypeName,
      NEW.LT_Description = OLD.LT_Description;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbd_ec_L_LogType;
DELIMITER //
CREATE TRIGGER   tbd_ec_L_LogType
BEFORE DELETE ON ec_L_LogType
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _LogTypeID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  LEAVE ECMAIN_LeaveLabel;
  -- --------------------------------------------------------------------------
  SELECT
    `Deletion is not legal` -- ---- intentionally to cause DELETE to fail!
  INTO
    _LogTypeID
  FROM
    ec_L_LogType;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_L_LogType
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  AUTO_INCREMENT = 100
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_L_LogType
MODIFY COLUMN
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  LT_LogTypeID                          BIGINT DEFAULT 0              NOT NULL
                                        AUTO_INCREMENT
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbi_ec_L_LogSeriousness;
DELIMITER //
CREATE TRIGGER   tbi_ec_L_LogSeriousness
BEFORE INSERT ON ec_L_LogSeriousness
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _LogSeriousnessID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.LS_EntryCreatedTime = CURRENT_TIMESTAMP();
  SET NEW.LS_EntryUpdatedTime = '0000-00-00 00:00:00';
  -- --------------------------------------------------------------------------
  IF ((NEW.LS_LogSeriousnessID IS NULL
       )
      OR
      (NEW.LS_LogSeriousnessID != 0
       )
      )
  THEN
    SET _LogSeriousnessID =
    sqlGetId(NEW.LS_LogSeriousnessCode);
    -- CAST(CONV(SUBSTRING(MD5(NEW.LS_LogSeriousnessCode),1,15),16,10)
    --      AS UNSIGNED INTEGER);
    IF (_LogSeriousnessID IS NULL)
    THEN
      SET _LogSeriousnessID = 0;
    END IF;
    SET NEW.LS_LogSeriousnessID = _LogSeriousnessID;
  END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.LS_LogSeriousnessID IS NULL
  --      )
  --     -- OR
  --     -- (NEW.LS_LogSeriousnessID = 0
  --     --  )
  --     )
  -- THEN
  --   SELECT
  --     MAX(ec_L_LogSeriousness.LS_LogSeriousnessID)+1
  --   INTO
  --     _LogSeriousnessID
  --   FROM
  --     ec_L_LogSeriousness;
  --   IF (_LogSeriousnessID IS NULL)
  --   THEN
  --     SET _LogSeriousnessID = 0;
  --   END IF;
  --   SET NEW.LS_LogSeriousnessID = _LogSeriousnessID;
  -- END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbu_ec_L_LogSeriousness;
DELIMITER //
CREATE TRIGGER   tbu_ec_L_LogSeriousness
BEFORE UPDATE ON ec_L_LogSeriousness
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.LS_EntryCreatedTime = OLD.LS_EntryCreatedTime,
      NEW.LS_EntryUpdatedTime = OLD.LS_EntryUpdatedTime,
      NEW.LS_LogSeriousnessID = OLD.LS_LogSeriousnessID,
      NEW.LS_LogSeriousnessName = OLD.LS_LogSeriousnessName,
      NEW.LS_LogSeriousnessCode = OLD.LS_LogSeriousnessCode,
      NEW.LS_Description = OLD.LS_Description;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbd_ec_L_LogSeriousness;
DELIMITER //
CREATE TRIGGER   tbd_ec_L_LogSeriousness
BEFORE DELETE ON ec_L_LogSeriousness
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _LogSeriousnessID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  LEAVE ECMAIN_LeaveLabel;
  -- --------------------------------------------------------------------------
  SELECT
    `Deletion is not legal` -- ---- intentionally to cause DELETE to fail!
  INTO
    _LogSeriousnessID
  FROM
    ec_L_LogSeriousness;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_L_LogSeriousness
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  AUTO_INCREMENT = 100
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_L_LogSeriousness
MODIFY COLUMN
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  LS_LogSeriousnessID                   BIGINT DEFAULT 0              NOT NULL
                                        AUTO_INCREMENT
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbi_ec_L_Log;
DELIMITER //
CREATE TRIGGER   tbi_ec_L_Log
BEFORE INSERT ON ec_L_Log
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _LogID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.L_EntryCreatedTime = CURRENT_TIMESTAMP();
  SET NEW.L_EntryUpdatedTime = '0000-00-00 00:00:00';
  -- --------------------------------------------------------------------------
  SELECT
    MAX(ec_L_Log.L_LogID)+1
  INTO
    _LogID
  FROM
    ec_L_Log;
  IF (_LogID IS NULL)
  THEN
    SET _LogID = 0;
  END IF;
  SET NEW.L_LogID = _LogID;
  -- --------------------------------------------------------------------------
  -- ---- IF ((NEW.L_LogID IS NULL
  -- ----      )
  -- ----     OR
  -- ----     (NEW.L_LogID != 0
  -- ----      )
  -- ----     )
  -- ---- THEN
  -- ----   SET _Log =
  -- ----   sqlGetId(NEW.L_LogID);
  -- ----   -- CAST(CONV(SUBSTRING(MD5(NEW.L_LogID),1,15),16,10)
  -- ----   --      AS UNSIGNED INTEGER);
  -- ----   IF (_Log IS NULL)
  -- ----   THEN
  -- ----     SET _Log = 0;
  -- ----   END IF;
  -- ----   SET NEW.L_LogID = _Log;
  -- ---- END IF;
  -- --------------------------------------------------------------------------
  -- ---- IF ((NEW.L_LogID IS NULL
  -- ----      )
  -- ----     -- OR
  -- ----     -- (NEW.L_LogID != 0
  -- ----     --  )
  -- ----     )
  -- ---- THEN
  -- ----   SELECT
  -- ----     MAX(ec_L_Log.L_LogID)+1
  -- ----   INTO
  -- ----     _LogID
  -- ----   FROM
  -- ----     ec_L_Log;
  -- ----   IF (_LogID IS NULL)
  -- ----   THEN
  -- ----     SET _LogID = 0;
  -- ----   END IF;
  -- ----   SET NEW.L_LogID = _LogID;
  -- ---- END IF;
  -- --------------------------------------------------------------------------
  -- ---- IF ((NEW.L_LogID IS NULL
  -- ----      )
  -- ----     -- OR
  -- ----     -- (NEW.L_LogID = 0
  -- ----     --  )
  -- ----     )
  -- ---- THEN
  -- ----   SELECT
  -- ----     MAX(ec_L_Log.L_LogID)+1
  -- ----   INTO
  -- ----     _LogID
  -- ----   FROM
  -- ----     ec_L_Log;
  -- ----   IF (_LogID IS NULL)
  -- ----   THEN
  -- ----     SET _LogID = 0;
  -- ----   END IF;
  -- ----   SET NEW.L_LogID = _LogID;
  -- ---- END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbu_ec_L_Log;
DELIMITER //
CREATE TRIGGER   tbu_ec_L_Log
BEFORE UPDATE ON ec_L_Log
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.L_EntryCreatedTime = OLD.L_EntryCreatedTime,
      NEW.L_EntryUpdatedTime = OLD.L_EntryUpdatedTime,
      NEW.L_LogID = OLD.L_LogID,
      NEW.L_LogTypeID = OLD.L_LogTypeID,
      NEW.L_LogSeriousnessID = OLD.L_LogSeriousnessID,
      NEW.L_LogUser = OLD.L_LogUser,
      NEW.L_LogDatabase = OLD.L_LogDatabase,
      NEW.L_LogConnectionID = OLD.L_LogConnectionID,
      NEW.L_LogCatalog = OLD.L_LogCatalog,
      NEW.L_LogMessage = OLD.L_LogMessage,
      NEW.L_LogSqlStatement = OLD.L_LogSqlStatement,
      NEW.L_LogSqlCode = OLD.L_LogSqlCode,
      NEW.L_LogSqlErrorMessage = OLD.L_LogSqlErrorMessage,
      NEW.L_LogContext = OLD.L_LogContext,
      NEW.L_Description = OLD.L_Description;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbd_ec_L_Log;
DELIMITER //
CREATE TRIGGER   tbd_ec_L_Log
BEFORE DELETE ON ec_L_Log
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _LogID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SELECT
    `Deletion is not legal` -- ---- intentionally to cause DELETE to fail!
  INTO
    _LogID
  FROM
    ec_L_Log;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_L_Log
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  AUTO_INCREMENT = 100
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_L_Log
MODIFY COLUMN
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  L_LogID                               BIGINT DEFAULT 0              NOT NULL
                                        AUTO_INCREMENT
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
===============================================================================
== Subschema: Organization
===============================================================================
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbi_ec_O_OrganizationType;
DELIMITER //
CREATE TRIGGER   tbi_ec_O_OrganizationType
BEFORE INSERT ON ec_O_OrganizationType
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _OrganizationTypeID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.OT_EntryCreatedTime = CURRENT_TIMESTAMP();
  SET NEW.OT_EntryUpdatedTime = '0000-00-00 00:00:00';
  -- --------------------------------------------------------------------------
  IF ((NEW.OT_OrganizationTypeID IS NULL
       )
      OR
      (NEW.OT_OrganizationTypeID != 0
       )
      )
  THEN
    SET _OrganizationTypeID =
    sqlGetId(NEW.OT_OrganizationTypeName);
    -- CAST(CONV(SUBSTRING(MD5(NEW.OT_OrganizationTypeName),1,15),16,10)
    --      AS UNSIGNED INTEGER);
    IF (_OrganizationTypeID IS NULL)
    THEN
      SET _OrganizationTypeID = 0;
    END IF;
    SET NEW.OT_OrganizationTypeID = _OrganizationTypeID;
  END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.OT_OrganizationTypeID IS NULL
  --      )
  --     -- OR
  --     -- (NEW.OT_OrganizationTypeID = 0
  --     --  )
  --     )
  -- THEN
  --   SELECT
  --     MAX(ec_O_OrganizationType.OT_OrganizationTypeID)+1
  --   INTO
  --     _OrganizationTypeID
  --   FROM
  --     ec_O_OrganizationType;
  --   IF (_OrganizationTypeID IS NULL)
  --   THEN
  --     SET _OrganizationTypeID = 0;
  --   END IF;
  --   SET NEW.OT_OrganizationTypeID = _OrganizationTypeID;
  -- END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    3,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'OrganizationType',
    CONCAT('Insert',
           'NEW.OT_OrganizationTypeID=',
           NEW.OT_OrganizationTypeID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbu_ec_O_OrganizationType;
DELIMITER //
CREATE TRIGGER   tbu_ec_O_OrganizationType
BEFORE UPDATE ON ec_O_OrganizationType
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  SET NEW.OT_EntryCreatedTime = OLD.OT_EntryCreatedTime;
  SET NEW.OT_EntryUpdatedTime = CURRENT_TIMESTAMP();
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    5,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'OrganizationType',
    CONCAT('Update',
           'NEW.OT_OrganizationTypeID=',
           NEW.OT_OrganizationTypeID,
           'OLD.OT_OrganizationTypeID=',
           OLD.OT_OrganizationTypeID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbd_ec_O_OrganizationType;
DELIMITER //
CREATE TRIGGER   tbd_ec_O_OrganizationType
BEFORE DELETE ON ec_O_OrganizationType
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    7,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'OrganizationType',
    CONCAT('Delete',
           'OLD.OT_OrganizationTypeID=',
           OLD.OT_OrganizationTypeID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tai_ec_O_OrganizationType;
DELIMITER //
CREATE TRIGGER   tai_ec_O_OrganizationType
AFTER INSERT ON  ec_O_OrganizationType
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    4,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'OrganizationType',
    CONCAT('Insert',
           'NEW.OT_OrganizationTypeID=',
           NEW.OT_OrganizationTypeID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tau_ec_O_OrganizationType;
DELIMITER //
CREATE TRIGGER   tau_ec_O_OrganizationType
AFTER UPDATE ON  ec_O_OrganizationType
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    6,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'OrganizationType',
    CONCAT('Update',
           'NEW.OT_OrganizationTypeID=',
           NEW.OT_OrganizationTypeID,
           'OLD.OT_OrganizationTypeID=',
           OLD.OT_OrganizationTypeID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tad_ec_O_OrganizationType;
DELIMITER //
CREATE TRIGGER   tad_ec_O_OrganizationType
AFTER DELETE ON  ec_O_OrganizationType
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    8,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'OrganizationType',
    CONCAT('Delete',
           'OLD.OT_OrganizationTypeID=',
           OLD.OT_OrganizationTypeID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_O_OrganizationType
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  AUTO_INCREMENT = 100
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_O_OrganizationType
MODIFY COLUMN
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  OT_OrganizationTypeID                 BIGINT DEFAULT 0              NOT NULL
                                        AUTO_INCREMENT
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbi_ec_O_OrganizationStatus;
DELIMITER //
CREATE TRIGGER   tbi_ec_O_OrganizationStatus
BEFORE INSERT ON ec_O_OrganizationStatus
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _OrganizationStatusID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.Os_EntryCreatedTime = CURRENT_TIMESTAMP();
  SET NEW.Os_EntryUpdatedTime = '0000-00-00 00:00:00';
  -- --------------------------------------------------------------------------
  IF ((NEW.Os_OrganizationStatusID IS NULL
       )
      OR
      (NEW.Os_OrganizationStatusID != 0
       )
      )
  THEN
    SET _OrganizationStatusID =
    sqlGetId(NEW.Os_OrganizationStatusName);
    -- CAST(CONV(SUBSTRING(MD5(NEW.Os_OrganizationStatusName),1,15),16,10)
    --      AS UNSIGNED INTEGER);
    IF (_OrganizationStatusID IS NULL)
    THEN
      SET _OrganizationStatusID = 0;
    END IF;
    SET NEW.Os_OrganizationStatusID = _OrganizationStatusID;
  END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.Os_OrganizationStatusID IS NULL
  --      )
  --     -- OR
  --     -- (NEW.Os_OrganizationStatusID = 0
  --     --  )
  --     )
  -- THEN
  --   SELECT
  --     MAX(ec_O_OrganizationStatus.Os_OrganizationStatusID)+1
  --   INTO
  --     _OrganizationStatusID
  --   FROM
  --     ec_O_OrganizationStatus;
  --   IF (_OrganizationStatusID IS NULL)
  --   THEN
  --     SET _OrganizationStatusID = 0;
  --   END IF;
  --   SET NEW.Os_OrganizationStatusID = _OrganizationStatusID;
  -- END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    3,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'OrganizationStatus',
    CONCAT('Insert',
           'NEW.Os_OrganizationStatusID=',
           NEW.Os_OrganizationStatusID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbu_ec_O_OrganizationStatus;
DELIMITER //
CREATE TRIGGER   tbu_ec_O_OrganizationStatus
BEFORE UPDATE ON ec_O_OrganizationStatus
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  SET NEW.Os_EntryCreatedTime = OLD.Os_EntryCreatedTime;
  SET NEW.Os_EntryUpdatedTime = CURRENT_TIMESTAMP();
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    5,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'OrganizationStatus',
    CONCAT('Update',
           'NEW.Os_OrganizationStatusID=',
           NEW.Os_OrganizationStatusID,
           'OLD.Os_OrganizationStatusID=',
           OLD.Os_OrganizationStatusID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbd_ec_O_OrganizationStatus;
DELIMITER //
CREATE TRIGGER   tbd_ec_O_OrganizationStatus
BEFORE DELETE ON ec_O_OrganizationStatus
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    7,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'OrganizationStatus',
    CONCAT('Delete',
           'OLD.Os_OrganizationStatusID=',
           OLD.Os_OrganizationStatusID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tai_ec_O_OrganizationStatus;
DELIMITER //
CREATE TRIGGER   tai_ec_O_OrganizationStatus
AFTER INSERT ON  ec_O_OrganizationStatus
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    4,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'OrganizationStatus',
    CONCAT('Insert',
           'NEW.Os_OrganizationStatusID=',
           NEW.Os_OrganizationStatusID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tau_ec_O_OrganizationStatus;
DELIMITER //
CREATE TRIGGER   tau_ec_O_OrganizationStatus
AFTER UPDATE ON  ec_O_OrganizationStatus
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    6,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'OrganizationStatus',
    CONCAT('Update',
           'NEW.Os_OrganizationStatusID=',
           NEW.Os_OrganizationStatusID,
           'OLD.Os_OrganizationStatusID=',
           OLD.Os_OrganizationStatusID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tad_ec_O_OrganizationStatus;
DELIMITER //
CREATE TRIGGER   tad_ec_O_OrganizationStatus
AFTER DELETE ON  ec_O_OrganizationStatus
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    8,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'OrganizationStatus',
    CONCAT('Delete',
           'OLD.Os_OrganizationStatusID=',
           OLD.Os_OrganizationStatusID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_O_OrganizationStatus
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  AUTO_INCREMENT = 100
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_O_OrganizationStatus
MODIFY COLUMN
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  Os_OrganizationStatusID               BIGINT DEFAULT 0              NOT NULL
                                        AUTO_INCREMENT
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbi_ec_O_Organization;
DELIMITER //
CREATE TRIGGER   tbi_ec_O_Organization
BEFORE INSERT ON ec_O_Organization
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _OrganizationID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.O_EntryCreatedTime = CURRENT_TIMESTAMP();
  SET NEW.O_EntryUpdatedTime = '0000-00-00 00:00:00';
  -- --------------------------------------------------------------------------
  IF ((NEW.O_OrganizationID IS NULL
       )
      OR
      (NEW.O_OrganizationID != 0
       )
      )
  THEN
    SET _OrganizationID =
    sqlGetId(NEW.O_OrganizationName);
    -- CAST(CONV(SUBSTRING(MD5(NEW.O_OrganizationName),1,15),16,10)
    --      AS UNSIGNED INTEGER);
    IF (_OrganizationID IS NULL)
    THEN
      SET _OrganizationID = 0;
    END IF;
    SET NEW.O_OrganizationID = _OrganizationID;
  END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.O_OrganizationID IS NULL
  --      )
  --     -- OR
  --     -- (NEW.O_OrganizationID = 0
  --     --  )
  --     )
  -- THEN
  --   SELECT
  --     MAX(ec_O_Organization.O_OrganizationID)+1
  --   INTO
  --     _OrganizationID
  --   FROM
  --     ec_O_Organization;
  --   IF (_OrganizationID IS NULL)
  --   THEN
  --     SET _OrganizationID = 0;
  --   END IF;
  --   SET NEW.O_OrganizationID = _OrganizationID;
  -- END IF;
  -- --------------------------------------------------------------------------
  IF ((NEW.O_OrganizationTypeID IS NULL
       )
      OR
      (NEW.O_OrganizationTypeID < 1
       )
      )
  THEN
    SET NEW.O_OrganizationTypeID = 1;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((NEW.O_OrganizationStatusID IS NULL
       )
      OR
      (NEW.O_OrganizationStatusID < 1
       )
      )
  THEN
    SET NEW.O_OrganizationStatusID = 1;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    3,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'Organization',
    CONCAT('Insert',
           'NEW.O_OrganizationID=',
           NEW.O_OrganizationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbu_ec_O_Organization;
DELIMITER //
CREATE TRIGGER   tbu_ec_O_Organization
BEFORE UPDATE ON ec_O_Organization
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  SET NEW.O_EntryCreatedTime = OLD.O_EntryCreatedTime;
  SET NEW.O_EntryUpdatedTime = CURRENT_TIMESTAMP();
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    5,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'Organization',
    CONCAT('Update',
           'NEW.O_OrganizationID=',
           NEW.O_OrganizationID,
           'OLD.O_OrganizationID=',
           OLD.O_OrganizationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbd_ec_O_Organization;
DELIMITER //
CREATE TRIGGER   tbd_ec_O_Organization
BEFORE DELETE ON ec_O_Organization
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    7,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'Organization',
    CONCAT('Delete',
           'OLD.O_OrganizationID=',
           OLD.O_OrganizationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tai_ec_O_Organization;
DELIMITER //
CREATE TRIGGER   tai_ec_O_Organization
AFTER INSERT ON  ec_O_Organization
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    4,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'Organization',
    CONCAT('Insert',
           'NEW.O_OrganizationID=',
           NEW.O_OrganizationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tau_ec_O_Organization;
DELIMITER //
CREATE TRIGGER   tau_ec_O_Organization
AFTER UPDATE ON  ec_O_Organization
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    6,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'Organization',
    CONCAT('Update',
           'NEW.O_OrganizationID=',
           NEW.O_OrganizationID,
           'OLD.O_OrganizationID=',
           OLD.O_OrganizationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tad_ec_O_Organization;
DELIMITER //
CREATE TRIGGER   tad_ec_O_Organization
AFTER DELETE ON  ec_O_Organization
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    8,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'Organization',
    CONCAT('Delete',
           'OLD.O_OrganizationID=',
           OLD.O_OrganizationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_O_Organization
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  AUTO_INCREMENT = 100
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_O_Organization
MODIFY COLUMN
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  O_OrganizationID                      BIGINT DEFAULT 0              NOT NULL
                                        AUTO_INCREMENT
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbi_ec_O_OrganizationFullText;
DELIMITER //
CREATE TRIGGER   tbi_ec_O_OrganizationFullText
BEFORE INSERT ON ec_O_OrganizationFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _OrganizationID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.Oft_EntryCreatedTime = CURRENT_TIMESTAMP();
  SET NEW.Oft_EntryUpdatedTime = '0000-00-00 00:00:00';
  -- --------------------------------------------------------------------------
  IF ((NEW.Oft_OrganizationID IS NULL
       )
      OR
      (NEW.Oft_OrganizationID != 0
       )
      )
  THEN
    SET _OrganizationID =
    sqlGetId(NEW.Oft_OrganizationName);
    -- CAST(CONV(SUBSTRING(MD5(NEW.Oft_OrganizationName),1,15),16,10)
    --      AS UNSIGNED INTEGER);
    IF (_OrganizationID IS NULL)
    THEN
      SET _OrganizationID = 0;
    END IF;
    SET NEW.Oft_OrganizationID = _OrganizationID;
  END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.Oft_OrganizationID IS NULL
  --      )
  --     -- OR
  --     -- (NEW.Oft_OrganizationID = 0
  --     --  )
  --     )
  -- THEN
  --   SELECT
  --     MAX(ec_O_OrganizationFullText.Oft_OrganizationID)+1
  --   INTO
  --     _OrganizationID
  --   FROM
  --     ec_O_OrganizationFullText;
  --   IF (_OrganizationID IS NULL)
  --   THEN
  --     SET _OrganizationID = 0;
  --   END IF;
  --   SET NEW.Oft_OrganizationID = _OrganizationID;
  -- END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    3,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'Organization',
    CONCAT('Insert',
           'NEW.Oft_OrganizationID=',
           NEW.Oft_OrganizationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbu_ec_O_OrganizationFullText;
DELIMITER //
CREATE TRIGGER   tbu_ec_O_OrganizationFullText
BEFORE UPDATE ON ec_O_OrganizationFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  SET NEW.Oft_EntryCreatedTime = OLD.Oft_EntryCreatedTime;
  SET NEW.Oft_EntryUpdatedTime = CURRENT_TIMESTAMP();
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    5,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'Organization',
    CONCAT('Update',
           'NEW.Oft_OrganizationID=',
           NEW.Oft_OrganizationID,
           'OLD.Oft_OrganizationID=',
           OLD.Oft_OrganizationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbd_ec_O_OrganizationFullText;
DELIMITER //
CREATE TRIGGER   tbd_ec_O_OrganizationFullText
BEFORE DELETE ON ec_O_OrganizationFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    7,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'Organization',
    CONCAT('Delete',
           'OLD.Oft_OrganizationID=',
           OLD.Oft_OrganizationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tai_ec_O_OrganizationFullText;
DELIMITER //
CREATE TRIGGER   tai_ec_O_OrganizationFullText
AFTER INSERT ON  ec_O_OrganizationFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    4,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'Organization',
    CONCAT('Insert',
           'NEW.Oft_OrganizationID=',
           NEW.Oft_OrganizationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tau_ec_O_OrganizationFullText;
DELIMITER //
CREATE TRIGGER   tau_ec_O_OrganizationFullText
AFTER UPDATE ON  ec_O_OrganizationFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    6,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'Organization',
    CONCAT('Update',
           'NEW.Oft_OrganizationID=',
           NEW.Oft_OrganizationID,
           'OLD.Oft_OrganizationID=',
           OLD.Oft_OrganizationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tad_ec_O_OrganizationFullText;
DELIMITER //
CREATE TRIGGER   tad_ec_O_OrganizationFullText
AFTER DELETE ON  ec_O_OrganizationFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    8,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'Organization',
    CONCAT('Delete',
           'OLD.Oft_OrganizationID=',
           OLD.Oft_OrganizationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_O_OrganizationFullText
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  AUTO_INCREMENT = 100
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_O_OrganizationFullText
MODIFY COLUMN
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  Oft_OrganizationID                    BIGINT DEFAULT 0              NOT NULL
                                        AUTO_INCREMENT
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP PROCEDURE IF EXISTS sp_ec_O_Organization;
DELIMITER //
CREATE PROCEDURE sp_ec_O_Organization(
  _OrganizationName     VARCHAR(255),
  _OrganizationTypeID   BIGINT,
  _OrganizationPhone    VARCHAR(255),
  _OrganizationAddress  VARCHAR(255),
  _OrganizationStatusID BIGINT,
  _Description          VARCHAR(1024)
)
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  INSERT INTO ec_O_Organization(
    O_OrganizationName,
    O_OrganizationTypeID,
    O_OrganizationPhone,
    O_OrganizationAddress,
    O_OrganizationStatusID,
    O_Description
  ) VALUES (
    _OrganizationName,
    _OrganizationTypeID,
    _OrganizationPhone,
    _OrganizationAddress,
    _OrganizationStatusID,
    _Description
  );
  -- --------------------------------------------------------------------------
  INSERT INTO ec_O_OrganizationFullText(
    Oft_OrganizationName,
    Oft_OrganizationPhone,
    Oft_OrganizationAddress,
    Oft_Description
  ) VALUES (
    _OrganizationName,
    _OrganizationPhone,
    _OrganizationAddress,
    _Description
  );
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
===============================================================================
== Subschema: Subject
===============================================================================
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbi_ec_S_Subject;
DELIMITER //
CREATE TRIGGER   tbi_ec_S_Subject
BEFORE INSERT ON ec_S_Subject
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _SubjectID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.S_EntryCreatedTime = CURRENT_TIMESTAMP();
  SET NEW.S_EntryUpdatedTime = '0000-00-00 00:00:00';
  -- --------------------------------------------------------------------------
  IF ((NEW.S_SubjectID IS NULL
       )
      OR
      (NEW.S_SubjectID != 0
       )
      )
  THEN
    SET _SubjectID =
    sqlGetId(NEW.S_SubjectName);
    -- CAST(CONV(SUBSTRING(MD5(NEW.S_SubjectName),1,15),16,10)
    --      AS UNSIGNED INTEGER);
    IF (_SubjectID IS NULL)
    THEN
      SET _SubjectID = 0;
    END IF;
    SET NEW.S_SubjectID = _SubjectID;
  END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.S_SubjectID IS NULL
  --      )
  --     -- OR
  --     -- (NEW.S_SubjectID = 0
  --     --  )
  --     )
  -- THEN
  --   SELECT
  --     MAX(ec_S_Subject.S_SubjectID)+1
  --   INTO
  --     _SubjectID
  --   FROM
  --     ec_S_Subject;
  --   IF (_SubjectID IS NULL)
  --   THEN
  --     SET _SubjectID = 0;
  --   END IF;
  --   SET NEW.S_SubjectID = _SubjectID;
  -- END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.S_SubjectTypeID IS NULL
  --      )
  --     OR
  --     (NEW.S_SubjectTypeID < 1
  --      )
  --     )
  -- THEN
  --   SET NEW.S_SubjectTypeID = 1;
  -- END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.S_SubjectStatusID IS NULL
  --      )
  --     OR
  --     (NEW.S_SubjectStatusID < 1
  --      )
  --     )
  -- THEN
  --   SET NEW.S_SubjectStatusID = 1;
  -- END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    3,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'Subject',
    CONCAT('Insert',
           'NEW.S_SubjectID=',
           NEW.S_SubjectID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbu_ec_S_Subject;
DELIMITER //
CREATE TRIGGER   tbu_ec_S_Subject
BEFORE UPDATE ON ec_S_Subject
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.S_EntryCreatedTime = OLD.S_EntryCreatedTime;
  SET NEW.S_EntryUpdatedTime = CURRENT_TIMESTAMP();
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    5,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'Subject',
    CONCAT('Update',
           'NEW.S_SubjectID=',
           NEW.S_SubjectID,
           'OLD.S_SubjectID=',
           OLD.S_SubjectID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbd_ec_S_Subject;
DELIMITER //
CREATE TRIGGER   tbd_ec_S_Subject
BEFORE DELETE ON ec_S_Subject
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    7,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'Subject',
    CONCAT('Delete',
           'OLD.S_SubjectID=',
           OLD.S_SubjectID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tai_ec_S_Subject;
DELIMITER //
CREATE TRIGGER   tai_ec_S_Subject
AFTER INSERT ON  ec_S_Subject
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    4,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'Subject',
    CONCAT('Insert',
           'NEW.S_SubjectID=',
           NEW.S_SubjectID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tau_ec_S_Subject;
DELIMITER //
CREATE TRIGGER   tau_ec_S_Subject
AFTER UPDATE ON  ec_S_Subject
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    6,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'Subject',
    CONCAT('Update',
           'NEW.S_SubjectID=',
           NEW.S_SubjectID,
           'OLD.S_SubjectID=',
           OLD.S_SubjectID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tad_ec_S_Subject;
DELIMITER //
CREATE TRIGGER   tad_ec_S_Subject
AFTER DELETE ON  ec_S_Subject
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    8,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'Subject',
    CONCAT('Delete',
           'OLD.S_SubjectID=',
           OLD.S_SubjectID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_S_Subject
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  AUTO_INCREMENT = 100
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_S_Subject
MODIFY COLUMN
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  S_SubjectID                           BIGINT DEFAULT 0              NOT NULL
                                        AUTO_INCREMENT
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbi_ec_S_SubjectFullText;
DELIMITER //
CREATE TRIGGER   tbi_ec_S_SubjectFullText
BEFORE INSERT ON ec_S_SubjectFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _SubjectID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.Sft_EntryCreatedTime = CURRENT_TIMESTAMP();
  SET NEW.Sft_EntryUpdatedTime = '0000-00-00 00:00:00';
  -- --------------------------------------------------------------------------
  IF ((NEW.Sft_SubjectID IS NULL
       )
      OR
      (NEW.Sft_SubjectID != 0
       )
      )
  THEN
    SET _SubjectID =
    sqlGetId(NEW.Sft_SubjectName);
    -- CAST(CONV(SUBSTRING(MD5(NEW.Sft_SubjectName),1,15),16,10)
    --      AS UNSIGNED INTEGER);
    IF (_SubjectID IS NULL)
    THEN
      SET _SubjectID = 0;
    END IF;
    SET NEW.Sft_SubjectID = _SubjectID;
  END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.Sft_SubjectID IS NULL
  --      )
  --     -- OR
  --     -- (NEW.Sft_SubjectID = 0
  --     --  )
  --     )
  -- THEN
  --   SELECT
  --     MAX(ec_S_SubjectFullText.Sft_SubjectID)+1
  --   INTO
  --     _SubjectID
  --   FROM
  --     ec_S_SubjectFullText;
  --   IF (_SubjectID IS NULL)
  --   THEN
  --     SET _SubjectID = 0;
  --   END IF;
  --   SET NEW.Sft_SubjectID = _SubjectID;
  -- END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    3,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'Subject',
    CONCAT('Insert',
           'NEW.Sft_SubjectID=',
           NEW.Sft_SubjectID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbu_ec_S_SubjectFullText;
DELIMITER //
CREATE TRIGGER   tbu_ec_S_SubjectFullText
BEFORE UPDATE ON ec_S_SubjectFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.Sft_EntryCreatedTime = OLD.Sft_EntryCreatedTime;
  SET NEW.Sft_EntryUpdatedTime = CURRENT_TIMESTAMP();
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    5,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'Subject',
    CONCAT('Update',
           'NEW.Sft_SubjectID=',
           NEW.Sft_SubjectID,
           'OLD.Sft_SubjectID=',
           OLD.Sft_SubjectID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbd_ec_S_SubjectFullText;
DELIMITER //
CREATE TRIGGER   tbd_ec_S_SubjectFullText
BEFORE DELETE ON ec_S_SubjectFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    7,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'Subject',
    CONCAT('Delete',
           'OLD.Sft_SubjectID=',
           OLD.Sft_SubjectID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tai_ec_S_SubjectFullText;
DELIMITER //
CREATE TRIGGER   tai_ec_S_SubjectFullText
AFTER INSERT ON  ec_S_SubjectFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    4,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'Subject',
    CONCAT('Insert',
           'NEW.Sft_SubjectID=',
           NEW.Sft_SubjectID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tau_ec_S_SubjectFullText;
DELIMITER //
CREATE TRIGGER   tau_ec_S_SubjectFullText
AFTER UPDATE ON  ec_S_SubjectFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    6,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'Subject',
    CONCAT('Update',
           'NEW.Sft_SubjectID=',
           NEW.Sft_SubjectID,
           'OLD.Sft_SubjectID=',
           OLD.Sft_SubjectID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tad_ec_S_SubjectFullText;
DELIMITER //
CREATE TRIGGER   tad_ec_S_SubjectFullText
AFTER DELETE ON  ec_S_SubjectFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    8,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'Subject',
    CONCAT('Delete',
           'OLD.Sft_SubjectID=',
           OLD.Sft_SubjectID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_S_SubjectFullText
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  AUTO_INCREMENT = 100
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_S_SubjectFullText
MODIFY COLUMN
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  Sft_SubjectID                         BIGINT DEFAULT 0              NOT NULL
                                        AUTO_INCREMENT
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP PROCEDURE IF EXISTS sp_ec_S_Subject;
DELIMITER //
CREATE PROCEDURE sp_ec_S_Subject(
  _SubjectName             VARCHAR(255),
  _SubjectRealName         VARCHAR(255),
  _SubjectGender           CHAR(1),
  _SubjectFromInformation  VARCHAR(255),
  _SubjectBirthInformation VARCHAR(255),
  -- _SubjectTypeID        BIGINT,
  -- _SubjectPhone         VARCHAR(255),
  -- _SubjectAddress       VARCHAR(255),
  -- _SubjectStatusID      BIGINT,
  _SubjectBiography        TEXT,
  _Description             VARCHAR(1024)
)
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  INSERT INTO ec_S_Subject(
    S_SubjectName,
    S_SubjectRealName,
    S_SubjectGender,
    S_SubjectFromInformation,
    S_SubjectBirthInformation,
    -- S_SubjectTypeID,
    -- S_SubjectPhone,
    -- S_SubjectAddress,
    -- S_SubjectStatusID,
    S_SubjectBiography,
    S_Description
  ) VALUES (
    _SubjectName,
    _SubjectRealName,
    _SubjectGender,
    _SubjectFromInformation,
    _SubjectBirthInformation,
    -- _SubjectTypeID,
    -- _SubjectPhone,
    -- _SubjectAddress,
    -- _SubjectStatusID,
    _SubjectBiography,
    _Description
  );
  -- --------------------------------------------------------------------------
  INSERT INTO ec_S_SubjectFullText(
    Sft_SubjectName,
    Sft_SubjectRealName,
    Sft_SubjectFromInformation,
    Sft_SubjectBirthInformation,
    -- Sft_SubjectPhone,
    -- Sft_SubjectAddress,
    Sft_SubjectBiography,
    Sft_Description
  ) VALUES (
    _SubjectName,
    _SubjectRealName,
    _SubjectFromInformation,
    _SubjectBirthInformation,
    -- _SubjectPhone,
    -- _SubjectAddress,
    _SubjectBiography,
    _Description
  );
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
===============================================================================
== Subschema: Target
===============================================================================
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbi_ec_T_Target;
DELIMITER //
CREATE TRIGGER   tbi_ec_T_Target
BEFORE INSERT ON ec_T_Target
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _TargetID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.T_EntryCreatedTime = CURRENT_TIMESTAMP();
  SET NEW.T_EntryUpdatedTime = '0000-00-00 00:00:00';
  -- --------------------------------------------------------------------------
  IF ((NEW.T_TargetID IS NULL
       )
      OR
      (NEW.T_TargetID != 0
       )
      )
  THEN
    SET _TargetID =
    sqlGetId(NEW.T_TargetEmailAddress);
    -- CAST(CONV(SUBSTRING(MD5(NEW.T_TargetEmailAddress),1,15),16,10)
    --      AS UNSIGNED INTEGER);
    IF (_TargetID IS NULL)
    THEN
      SET _TargetID = 0;
    END IF;
    SET NEW.T_TargetID = _TargetID;
  END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.T_TargetID IS NULL
  --      )
  --     -- OR
  --     -- (NEW.T_TargetID = 0
  --     --  )
  --     )
  -- THEN
  --   SELECT
  --     MAX(ec_T_Target.T_TargetID)+1
  --   INTO
  --     _TargetID
  --   FROM
  --     ec_T_Target;
  --   IF (_TargetID IS NULL)
  --   THEN
  --     SET _TargetID = 0;
  --   END IF;
  --   SET NEW.T_TargetID = _TargetID;
  -- END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.T_TargetTypeID IS NULL
  --      )
  --     OR
  --     (NEW.T_TargetTypeID < 1
  --      )
  --     )
  -- THEN
  --   SET NEW.T_TargetTypeID = 1;
  -- END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.T_TargetStatusID IS NULL
  --      )
  --     OR
  --     (NEW.T_TargetStatusID < 1
  --      )
  --     )
  -- THEN
  --   SET NEW.T_TargetStatusID = 1;
  -- END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    3,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'Target',
    CONCAT('Insert',
           'NEW.T_TargetID=',
           NEW.T_TargetID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbu_ec_T_Target;
DELIMITER //
CREATE TRIGGER   tbu_ec_T_Target
BEFORE UPDATE ON ec_T_Target
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.T_EntryCreatedTime = OLD.T_EntryCreatedTime;
  SET NEW.T_EntryUpdatedTime = CURRENT_TIMESTAMP();
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    5,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'Target',
    CONCAT('Update',
           'NEW.T_TargetID=',
           NEW.T_TargetID,
           'OLD.T_TargetID=',
           OLD.T_TargetID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbd_ec_T_Target;
DELIMITER //
CREATE TRIGGER   tbd_ec_T_Target
BEFORE DELETE ON ec_T_Target
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    7,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'Target',
    CONCAT('Delete',
           'OLD.T_TargetID=',
           OLD.T_TargetID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tai_ec_T_Target;
DELIMITER //
CREATE TRIGGER   tai_ec_T_Target
AFTER INSERT ON  ec_T_Target
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    4,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'Target',
    CONCAT('Insert',
           'NEW.T_TargetID=',
           NEW.T_TargetID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tau_ec_T_Target;
DELIMITER //
CREATE TRIGGER   tau_ec_T_Target
AFTER UPDATE ON  ec_T_Target
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    6,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'Target',
    CONCAT('Update',
           'NEW.T_TargetID=',
           NEW.T_TargetID,
           'OLD.T_TargetID=',
           OLD.T_TargetID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tad_ec_T_Target;
DELIMITER //
CREATE TRIGGER   tad_ec_T_Target
AFTER DELETE ON  ec_T_Target
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    8,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'Target',
    CONCAT('Delete',
           'OLD.T_TargetID=',
           OLD.T_TargetID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_T_Target
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  AUTO_INCREMENT = 100
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_T_Target
MODIFY COLUMN
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  T_TargetID                            BIGINT DEFAULT 0              NOT NULL
                                        AUTO_INCREMENT
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbi_ec_T_TargetFullText;
DELIMITER //
CREATE TRIGGER   tbi_ec_T_TargetFullText
BEFORE INSERT ON ec_T_TargetFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _TargetID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.Tft_EntryCreatedTime = CURRENT_TIMESTAMP();
  SET NEW.Tft_EntryUpdatedTime = '0000-00-00 00:00:00';
  -- --------------------------------------------------------------------------
  IF ((NEW.Tft_TargetID IS NULL
       )
      OR
      (NEW.Tft_TargetID != 0
       )
      )
  THEN
    SET _TargetID =
    sqlGetId(NEW.Tft_TargetEmailAddress);
    -- CAST(CONV(SUBSTRING(MD5(NEW.Tft_TargetEmailAddress),1,15),16,10)
    --      AS UNSIGNED INTEGER);
    IF (_TargetID IS NULL)
    THEN
      SET _TargetID = 0;
    END IF;
    SET NEW.Tft_TargetID = _TargetID;
  END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.Tft_TargetID IS NULL
  --      )
  --     -- OR
  --     -- (NEW.Tft_TargetID = 0
  --     --  )
  --     )
  -- THEN
  --   SELECT
  --     MAX(ec_T_TargetFullText.Tft_TargetID)+1
  --   INTO
  --     _TargetID
  --   FROM
  --     ec_T_TargetFullText;
  --   IF (_TargetID IS NULL)
  --   THEN
  --     SET _TargetID = 0;
  --   END IF;
  --   SET NEW.Tft_TargetID = _TargetID;
  -- END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    3,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'Target',
    CONCAT('Insert',
           'NEW.Tft_TargetID=',
           NEW.Tft_TargetID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbu_ec_T_TargetFullText;
DELIMITER //
CREATE TRIGGER   tbu_ec_T_TargetFullText
BEFORE UPDATE ON ec_T_TargetFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.Tft_EntryCreatedTime = OLD.Tft_EntryCreatedTime;
  SET NEW.Tft_EntryUpdatedTime = CURRENT_TIMESTAMP();
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    5,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'Target',
    CONCAT('Update',
           'NEW.Tft_TargetID=',
           NEW.Tft_TargetID,
           'OLD.Tft_TargetID=',
           OLD.Tft_TargetID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbd_ec_T_TargetFullText;
DELIMITER //
CREATE TRIGGER   tbd_ec_T_TargetFullText
BEFORE DELETE ON ec_T_TargetFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    7,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'Target',
    CONCAT('Delete',
           'OLD.Tft_TargetID=',
           OLD.Tft_TargetID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tai_ec_T_TargetFullText;
DELIMITER //
CREATE TRIGGER   tai_ec_T_TargetFullText
AFTER INSERT ON  ec_T_TargetFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    4,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'Target',
    CONCAT('Insert',
           'NEW.Tft_TargetID=',
           NEW.Tft_TargetID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tau_ec_T_TargetFullText;
DELIMITER //
CREATE TRIGGER   tau_ec_T_TargetFullText
AFTER UPDATE ON  ec_T_TargetFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    6,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'Target',
    CONCAT('Update',
           'NEW.Tft_TargetID=',
           NEW.Tft_TargetID,
           'OLD.Tft_TargetID=',
           OLD.Tft_TargetID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tad_ec_T_TargetFullText;
DELIMITER //
CREATE TRIGGER   tad_ec_T_TargetFullText
AFTER DELETE ON  ec_T_TargetFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    8,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'Target',
    CONCAT('Delete',
           'OLD.Tft_TargetID=',
           OLD.Tft_TargetID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_T_TargetFullText
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  AUTO_INCREMENT = 100
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_T_TargetFullText
MODIFY COLUMN
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  Tft_TargetID                          BIGINT DEFAULT 0              NOT NULL
                                        AUTO_INCREMENT
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP PROCEDURE IF EXISTS sp_ec_T_Target;
DELIMITER //
CREATE PROCEDURE sp_ec_T_Target(
  _TargetEmailAddress        VARCHAR(255),
  _TargetName                VARCHAR(255),
  _TargetPasswordHash        VARCHAR(255),
  -- _TargetGender           CHAR(1),
  -- _TargetFromInformation  VARCHAR(255),
  -- _TargetBirthInformation VARCHAR(255),
  -- _TargetTypeID           BIGINT,
  -- _TargetPhone            VARCHAR(255),
  -- _TargetAddress          VARCHAR(255),
  -- _TargetStatusID         BIGINT,
  _Description               VARCHAR(1024)
)
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _TargetPasswordHashTemp VARCHAR(255);
  -- --------------------------------------------------------------------------
  IF (_TargetPasswordHash IS NOT NULL)
  THEN
    SET _TargetPasswordHashTemp = _TargetPasswordHash;
  ELSE
    SET _TargetPasswordHashTemp = sqlGetVarchar255StrongHash2(
      _TargetName,
      _TargetEmailAddress);
  END IF;
  -- --------------------------------------------------------------------------
  INSERT INTO ec_T_Target(
    T_TargetEmailAddress,
    T_TargetName,
    T_TargetPasswordHash,
    -- T_TargetGender,
    -- T_TargetFromInformation,
    -- T_TargetBirthInformation,
    -- T_TargetTypeID,
    -- T_TargetPhone,
    -- T_TargetAddress,
    -- T_TargetStatusID,
    T_Description
  ) VALUES (
    _TargetEmailAddress,
    _TargetName,
    _TargetPasswordHashTemp,
    -- _TargetGender,
    -- _TargetFromInformation,
    -- _TargetBirthInformation,
    -- _TargetTypeID,
    -- _TargetPhone,
    -- _TargetAddress,
    -- _TargetStatusID,
    _Description
  );
  -- --------------------------------------------------------------------------
  INSERT INTO ec_T_TargetFullText(
    Tft_TargetEmailAddress,
    Tft_TargetName,
    -- Tft_TargetFromInformation,
    -- Tft_TargetBirthInformation,
    -- Tft_TargetPhone,
    -- Tft_TargetAddress,
    Tft_Description
  ) VALUES (
    _TargetEmailAddress,
    _TargetName,
    -- _TargetFromInformation,
    -- _TargetBirthInformation,
    -- _TargetPhone,
    -- _TargetAddress,
    _Description
  );
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
===============================================================================
== Subschema: Product
===============================================================================
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbi_ec_P_ProductType;
DELIMITER //
CREATE TRIGGER   tbi_ec_P_ProductType
BEFORE INSERT ON ec_P_ProductType
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _ProductTypeID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.PT_EntryCreatedTime = CURRENT_TIMESTAMP();
  SET NEW.PT_EntryUpdatedTime = '0000-00-00 00:00:00';
  -- --------------------------------------------------------------------------
  IF ((NEW.PT_ProductTypeID IS NULL
       )
      OR
      (NEW.PT_ProductTypeID != 0
       )
      )
  THEN
    SET _ProductTypeID =
    sqlGetId(NEW.PT_ProductTypeName);
    -- CAST(CONV(SUBSTRING(MD5(NEW.PT_ProductTypeName),1,15),16,10)
    --      AS UNSIGNED INTEGER);
    IF (_ProductTypeID IS NULL)
    THEN
      SET _ProductTypeID = 0;
    END IF;
    SET NEW.PT_ProductTypeID = _ProductTypeID;
  END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.PT_ProductTypeID IS NULL
  --      )
  --     -- OR
  --     -- (NEW.PT_ProductTypeID = 0
  --     --  )
  --     )
  -- THEN
  --   SELECT
  --     MAX(ec_P_ProductType.PT_ProductTypeID)+1
  --   INTO
  --     _ProductTypeID
  --   FROM
  --     ec_P_ProductType;
  --   IF (_ProductTypeID IS NULL)
  --   THEN
  --     SET _ProductTypeID = 0;
  --   END IF;
  --   SET NEW.PT_ProductTypeID = _ProductTypeID;
  -- END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    3,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ProductType',
    CONCAT('Insert',
           'NEW.PT_ProductTypeID=',
           NEW.PT_ProductTypeID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbu_ec_P_ProductType;
DELIMITER //
CREATE TRIGGER   tbu_ec_P_ProductType
BEFORE UPDATE ON ec_P_ProductType
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.PT_EntryCreatedTime = OLD.PT_EntryCreatedTime;
  SET NEW.PT_EntryUpdatedTime = CURRENT_TIMESTAMP();
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    5,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ProductType',
    CONCAT('Update',
           'NEW.PT_ProductTypeID=',
           NEW.PT_ProductTypeID,
           'OLD.PT_ProductTypeID=',
           OLD.PT_ProductTypeID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbd_ec_P_ProductType;
DELIMITER //
CREATE TRIGGER   tbd_ec_P_ProductType
BEFORE DELETE ON ec_P_ProductType
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    7,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ProductType',
    CONCAT('Delete',
           'OLD.PT_ProductTypeID=',
           OLD.PT_ProductTypeID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tai_ec_P_ProductType;
DELIMITER //
CREATE TRIGGER   tai_ec_P_ProductType
AFTER INSERT ON  ec_P_ProductType
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    4,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ProductType',
    CONCAT('Insert',
           'NEW.PT_ProductTypeID=',
           NEW.PT_ProductTypeID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tau_ec_P_ProductType;
DELIMITER //
CREATE TRIGGER   tau_ec_P_ProductType
AFTER UPDATE ON  ec_P_ProductType
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    6,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ProductType',
    CONCAT('Update',
           'NEW.PT_ProductTypeID=',
           NEW.PT_ProductTypeID,
           'OLD.PT_ProductTypeID=',
           OLD.PT_ProductTypeID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tad_ec_P_ProductType;
DELIMITER //
CREATE TRIGGER   tad_ec_P_ProductType
AFTER DELETE ON  ec_P_ProductType
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    8,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ProductType',
    CONCAT('Delete',
           'OLD.PT_ProductTypeID=',
           OLD.PT_ProductTypeID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_P_ProductType
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  AUTO_INCREMENT = 100
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_P_ProductType
MODIFY COLUMN
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  PT_ProductTypeID                      BIGINT DEFAULT 0              NOT NULL
                                        AUTO_INCREMENT
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbi_ec_P_ProductStatus;
DELIMITER //
CREATE TRIGGER   tbi_ec_P_ProductStatus
BEFORE INSERT ON ec_P_ProductStatus
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _ProductStatusID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.Ps_EntryCreatedTime = CURRENT_TIMESTAMP();
  SET NEW.Ps_EntryUpdatedTime = '0000-00-00 00:00:00';
  -- --------------------------------------------------------------------------
  IF ((NEW.Ps_ProductStatusID IS NULL
       )
      OR
      (NEW.Ps_ProductStatusID != 0
       )
      )
  THEN
    SET _ProductStatusID =
    sqlGetId(NEW.Ps_ProductStatusName);
    -- CAST(CONV(SUBSTRING(MD5(NEW.Ps_ProductStatusName),1,15),16,10)
    --      AS UNSIGNED INTEGER);
    IF (_ProductStatusID IS NULL)
    THEN
      SET _ProductStatusID = 0;
    END IF;
    SET NEW.Ps_ProductStatusID = _ProductStatusID;
  END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.Ps_ProductStatusID IS NULL
  --      )
  --     -- OR
  --     -- (NEW.Ps_ProductStatusID = 0
  --     --  )
  --     )
  -- THEN
  --   SELECT
  --     MAX(ec_P_ProductStatus.Ps_ProductStatusID)+1
  --   INTO
  --     _ProductStatusID
  --   FROM
  --     ec_P_ProductStatus;
  --   IF (_ProductStatusID IS NULL)
  --   THEN
  --     SET _ProductStatusID = 0;
  --   END IF;
  --   SET NEW.Ps_ProductStatusID = _ProductStatusID;
  -- END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    3,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ProductStatus',
    CONCAT('Insert',
           'NEW.Ps_ProductStatusID=',
           NEW.Ps_ProductStatusID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbu_ec_P_ProductStatus;
DELIMITER //
CREATE TRIGGER   tbu_ec_P_ProductStatus
BEFORE UPDATE ON ec_P_ProductStatus
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.Ps_EntryCreatedTime = OLD.Ps_EntryCreatedTime;
  SET NEW.Ps_EntryUpdatedTime = CURRENT_TIMESTAMP();
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    5,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ProductStatus',
    CONCAT('Update',
           'NEW.Ps_ProductStatusID=',
           NEW.Ps_ProductStatusID,
           'OLD.Ps_ProductStatusID=',
           OLD.Ps_ProductStatusID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbd_ec_P_ProductStatus;
DELIMITER //
CREATE TRIGGER   tbd_ec_P_ProductStatus
BEFORE DELETE ON ec_P_ProductStatus
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    7,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ProductStatus',
    CONCAT('Delete',
           'OLD.Ps_ProductStatusID=',
           OLD.Ps_ProductStatusID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tai_ec_P_ProductStatus;
DELIMITER //
CREATE TRIGGER   tai_ec_P_ProductStatus
AFTER INSERT ON  ec_P_ProductStatus
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    4,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ProductStatus',
    CONCAT('Insert',
           'NEW.Ps_ProductStatusID=',
           NEW.Ps_ProductStatusID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tau_ec_P_ProductStatus;
DELIMITER //
CREATE TRIGGER   tau_ec_P_ProductStatus
AFTER UPDATE ON  ec_P_ProductStatus
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    6,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ProductStatus',
    CONCAT('Update',
           'NEW.Ps_ProductStatusID=',
           NEW.Ps_ProductStatusID,
           'OLD.Ps_ProductStatusID=',
           OLD.Ps_ProductStatusID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tad_ec_P_ProductStatus;
DELIMITER //
CREATE TRIGGER   tad_ec_P_ProductStatus
AFTER DELETE ON  ec_P_ProductStatus
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    8,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ProductStatus',
    CONCAT('Delete',
           'OLD.Ps_ProductStatusID=',
           OLD.Ps_ProductStatusID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_P_ProductStatus
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  AUTO_INCREMENT = 100
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_P_ProductStatus
MODIFY COLUMN
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  Ps_ProductStatusID                    BIGINT DEFAULT 0              NOT NULL
                                        AUTO_INCREMENT
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbi_ec_P_Product;
DELIMITER //
CREATE TRIGGER   tbi_ec_P_Product
BEFORE INSERT ON ec_P_Product
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _ProductID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.P_EntryCreatedTime = CURRENT_TIMESTAMP();
  SET NEW.P_EntryUpdatedTime = '0000-00-00 00:00:00';
  -- --------------------------------------------------------------------------
  IF ((NEW.P_ProductID IS NULL
       )
      OR
      (NEW.P_ProductID != 0
       )
      )
  THEN
    SET _ProductID =
    sqlGetId4(NEW.P_OrganizationID,
              NEW.P_ProductTitle,
              NEW.P_ProductEdition,
              NEW.P_ProductStandardCode
              );
    -- CAST(CONV(SUBSTRING(MD5(CONCAT(NEW.P_OrganizationID,
    --                                NEW.P_ProductTitle,
    --                                NEW.P_ProductEdition,
    --                                NEW.P_ProductStandardCode
    --                                )
    --                         ),
    --                     1,15
    --                     ),
    --           16,10
    --           )
    --      AS UNSIGNED INTEGER
    --      );
    IF (_ProductID IS NULL)
    THEN
      SET _ProductID = 0;
    END IF;
    SET NEW.P_ProductID = _ProductID;
  END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.P_ProductID IS NULL
  --      )
  --     -- OR
  --     -- (NEW.P_ProductID = 0
  --     --  )
  --     )
  -- THEN
  --   SELECT
  --     MAX(ec_P_Product.P_ProductID)+1
  --   INTO
  --     _ProductID
  --   FROM
  --     ec_P_Product;
  --   IF (_ProductID IS NULL)
  --   THEN
  --     SET _ProductID = 0;
  --   END IF;
  --   SET NEW.P_ProductID = _ProductID;
  -- END IF;
  -- --------------------------------------------------------------------------
  IF ((NEW.P_ProductTypeID IS NULL
       )
      OR
      (NEW.P_ProductTypeID < 1
       )
      )
  THEN
    SET NEW.P_ProductTypeID = 1;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((NEW.P_ProductStatusID IS NULL
       )
      OR
      (NEW.P_ProductStatusID < 1
       )
      )
  THEN
    SET NEW.P_ProductStatusID = 1;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    3,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'Product',
    CONCAT('Insert',
           'NEW.P_ProductID=',
           NEW.P_ProductID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbu_ec_P_Product;
DELIMITER //
CREATE TRIGGER   tbu_ec_P_Product
BEFORE UPDATE ON ec_P_Product
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.P_EntryCreatedTime = OLD.P_EntryCreatedTime;
  SET NEW.P_EntryUpdatedTime = CURRENT_TIMESTAMP();
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    5,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'Product',
    CONCAT('Update',
           'NEW.P_ProductID=',
           NEW.P_ProductID,
           'OLD.P_ProductID=',
           OLD.P_ProductID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbd_ec_P_Product;
DELIMITER //
CREATE TRIGGER   tbd_ec_P_Product
BEFORE DELETE ON ec_P_Product
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    7,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'Product',
    CONCAT('Delete',
           'OLD.P_ProductID=',
           OLD.P_ProductID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tai_ec_P_Product;
DELIMITER //
CREATE TRIGGER   tai_ec_P_Product
AFTER INSERT ON  ec_P_Product
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    4,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'Product',
    CONCAT('Insert',
           'NEW.P_ProductID=',
           NEW.P_ProductID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tau_ec_P_Product;
DELIMITER //
CREATE TRIGGER   tau_ec_P_Product
AFTER UPDATE ON  ec_P_Product
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    6,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'Product',
    CONCAT('Update',
           'NEW.P_ProductID=',
           NEW.P_ProductID,
           'OLD.P_ProductID=',
           OLD.P_ProductID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tad_ec_P_Product;
DELIMITER //
CREATE TRIGGER   tad_ec_P_Product
AFTER DELETE ON  ec_P_Product
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    8,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'Product',
    CONCAT('Delete',
           'OLD.P_ProductID=',
           OLD.P_ProductID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_P_Product
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  AUTO_INCREMENT = 100
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_P_Product
MODIFY COLUMN
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  P_ProductID                           BIGINT DEFAULT 0              NOT NULL
                                        AUTO_INCREMENT
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbi_ec_P_ProductFullText;
DELIMITER //
CREATE TRIGGER   tbi_ec_P_ProductFullText
BEFORE INSERT ON ec_P_ProductFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _ProductID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.Pft_EntryCreatedTime = CURRENT_TIMESTAMP();
  SET NEW.Pft_EntryUpdatedTime = '0000-00-00 00:00:00';
  -- --------------------------------------------------------------------------
  IF ((NEW.Pft_ProductID IS NULL
       )
      OR
      (NEW.Pft_ProductID != 0
       )
      )
  THEN
    SET _ProductID =
    sqlGetId4(NEW.Pft_OrganizationID,
              NEW.Pft_ProductTitle,
              NEW.Pft_ProductEdition,
              NEW.Pft_ProductStandardCode
              );
    -- CAST(CONV(SUBSTRING(MD5(CONCAT(NEW.Pft_OrganizationID,
    --                                NEW.Pft_ProductTitle,
    --                                NEW.Pft_ProductEdition,
    --                                NEW.Pft_ProductStandardCode
    --                                )
    --                         ),
    --                     1,15
    --                     ),
    --           16,10
    --           )
    --      AS UNSIGNED INTEGER
    --      );
    IF (_ProductID IS NULL)
    THEN
      SET _ProductID = 0;
    END IF;
    SET NEW.Pft_ProductID = _ProductID;
  END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.Pft_ProductID IS NULL
  --      )
  --     -- OR
  --     -- (NEW.Pft_ProductID = 0
  --     --  )
  --     )
  -- THEN
  --   SELECT
  --     MAX(ec_P_ProductFullText.Pft_ProductID)+1
  --   INTO
  --     _ProductID
  --   FROM
  --     ec_P_ProductFullText;
  --   IF (_ProductID IS NULL)
  --   THEN
  --     SET _ProductID = 0;
  --   END IF;
  --   SET NEW.Pft_ProductID = _ProductID;
  -- END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    3,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'Product',
    CONCAT('Insert',
           'NEW.Pft_ProductID=',
           NEW.Pft_ProductID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbu_ec_P_ProductFullText;
DELIMITER //
CREATE TRIGGER   tbu_ec_P_ProductFullText
BEFORE UPDATE ON ec_P_ProductFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.Pft_EntryCreatedTime = OLD.Pft_EntryCreatedTime;
  SET NEW.Pft_EntryUpdatedTime = CURRENT_TIMESTAMP();
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    5,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'Product',
    CONCAT('Update',
           'NEW.Pft_ProductID=',
           NEW.Pft_ProductID,
           'OLD.Pft_ProductID=',
           OLD.Pft_ProductID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbd_ec_P_ProductFullText;
DELIMITER //
CREATE TRIGGER   tbd_ec_P_ProductFullText
BEFORE DELETE ON ec_P_ProductFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    7,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'Product',
    CONCAT('Delete',
           'OLD.Pft_ProductID=',
           OLD.Pft_ProductID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tai_ec_P_ProductFullText;
DELIMITER //
CREATE TRIGGER   tai_ec_P_ProductFullText
AFTER INSERT ON  ec_P_ProductFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    4,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'Product',
    CONCAT('Insert',
           'NEW.Pft_ProductID=',
           NEW.Pft_ProductID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tau_ec_P_ProductFullText;
DELIMITER //
CREATE TRIGGER   tau_ec_P_ProductFullText
AFTER UPDATE ON  ec_P_ProductFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    6,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'Product',
    CONCAT('Update',
           'NEW.Pft_ProductID=',
           NEW.Pft_ProductID,
           'OLD.Pft_ProductID=',
           OLD.Pft_ProductID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tad_ec_P_ProductFullText;
DELIMITER //
CREATE TRIGGER   tad_ec_P_ProductFullText
AFTER DELETE ON  ec_P_ProductFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    8,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'Product',
    CONCAT('Delete',
           'OLD.Pft_ProductID=',
           OLD.Pft_ProductID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_P_ProductFullText
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  AUTO_INCREMENT = 100
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_P_ProductFullText
MODIFY COLUMN
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  Pft_ProductID                         BIGINT DEFAULT 0              NOT NULL
                                        AUTO_INCREMENT
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP PROCEDURE IF EXISTS sp_ec_P_Product;
DELIMITER //
CREATE PROCEDURE sp_ec_P_Product(
  _ProductTitle        VARCHAR(255),
  _ProductTypeID       BIGINT,
  __OrganizationID     BIGINT,
  _OrganizationName    VARCHAR(255),
  _ProductEdition      SMALLINT,
  _ProductStandardCode VARCHAR(255),
  _ProductPublishDate  VARCHAR(255),
  _ProductBasePricing  NUMERIC(16,2),
  _ProductStatusID     BIGINT,
  _ProductReference    VARCHAR(1024),
  _Description         VARCHAR(1024)
)
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _OrganizationID BIGINT;
  -- --------------------------------------------------------------------------
  IF (__OrganizationID IS NOT NULL)
  THEN
    SET _OrganizationID = __OrganizationID;
  ELSE
    SET _OrganizationID =
    sqlGetId(_OrganizationName);
    -- CAST(CONV(SUBSTRING(MD5(_OrganizationName),1,15),16,10)
    --      AS UNSIGNED INTEGER);
  END IF;
  -- --------------------------------------------------------------------------
  INSERT INTO ec_P_Product(
    P_ProductTitle,
    P_ProductTypeID,
    P_OrganizationID,
    P_ProductEdition,
    P_ProductStandardCode,
    P_ProductPublishDate,
    P_ProductBasePricing,
    P_ProductStatusID,
    P_ProductReference,
    P_Description
  ) VALUES (
    _ProductTitle,
    _ProductTypeID,
    _OrganizationID,
    _ProductEdition,
    _ProductStandardCode,
    _ProductPublishDate,
    _ProductBasePricing,
    _ProductStatusID,
    _ProductReference,
    _Description
  );
  -- --------------------------------------------------------------------------
  INSERT INTO ec_P_ProductFullText(
    Pft_ProductTitle,
    Pft_OrganizationID,
    Pft_ProductEdition,
    Pft_ProductStandardCode,
    Pft_ProductPublishDate,
    Pft_ProductReference,
    Pft_Description
  ) VALUES (
    _ProductTitle,
    _OrganizationID,
    _ProductEdition,
    _ProductStandardCode,
    _ProductPublishDate,
    _ProductReference,
    _Description
  );
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
===============================================================================
== Subschema: SubjectProduct
===============================================================================
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbi_ec_SP_SubjectProduct;
DELIMITER //
CREATE TRIGGER   tbi_ec_SP_SubjectProduct
BEFORE INSERT ON ec_SP_SubjectProduct
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.SP_EntryCreatedTime = CURRENT_TIMESTAMP();
  SET NEW.SP_EntryUpdatedTime = '0000-00-00 00:00:00';
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    3,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'Product',
    CONCAT('Insert',
           'NEW.SP_SubjectID=',
           NEW.SP_SubjectID,
           'NEW.SP_ProductID=',
           NEW.SP_ProductID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbu_ec_SP_SubjectProduct;
DELIMITER //
CREATE TRIGGER   tbu_ec_SP_SubjectProduct
BEFORE UPDATE ON ec_SP_SubjectProduct
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.SP_EntryCreatedTime = OLD.SP_EntryCreatedTime;
  SET NEW.SP_EntryUpdatedTime = CURRENT_TIMESTAMP();
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    5,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'Product',
    CONCAT('Update',
           'NEW.SP_SubjectID=',
           NEW.SP_SubjectID,
           'OLD.SP_SubjectID=',
           OLD.SP_SubjectID,
           'NEW.SP_ProductID=',
           NEW.SP_ProductID,
           'OLD.SP_ProductID=',
           OLD.SP_ProductID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbd_ec_SP_SubjectProduct;
DELIMITER //
CREATE TRIGGER   tbd_ec_SP_SubjectProduct
BEFORE DELETE ON ec_SP_SubjectProduct
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    7,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'Product',
    CONCAT('Delete',
           'OLD.SP_SubjectID=',
           OLD.SP_SubjectID,
           'OLD.SP_ProductID=',
           OLD.SP_ProductID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tai_ec_SP_SubjectProduct;
DELIMITER //
CREATE TRIGGER   tai_ec_SP_SubjectProduct
AFTER INSERT ON  ec_SP_SubjectProduct
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    4,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'Product',
    CONCAT('Insert',
           'NEW.SP_SubjectID=',
           NEW.SP_SubjectID,
           'NEW.SP_ProductID=',
           NEW.SP_ProductID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tau_ec_SP_SubjectProduct;
DELIMITER //
CREATE TRIGGER   tau_ec_SP_SubjectProduct
AFTER UPDATE ON  ec_SP_SubjectProduct
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    6,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'Product',
    CONCAT('Update',
           'NEW.SP_SubjectID=',
           NEW.SP_SubjectID,
           'OLD.SP_SubjectID=',
           OLD.SP_SubjectID,
           'NEW.SP_ProductID=',
           NEW.SP_ProductID,
           'OLD.SP_ProductID=',
           OLD.SP_ProductID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tad_ec_SP_SubjectProduct;
DELIMITER //
CREATE TRIGGER   tad_ec_SP_SubjectProduct
AFTER DELETE ON  ec_SP_SubjectProduct
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    8,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'Product',
    CONCAT('Delete',
           'OLD.SP_SubjectID=',
           OLD.SP_SubjectID,
           'OLD.SP_ProductID=',
           OLD.SP_ProductID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_SP_SubjectProduct
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  AUTO_INCREMENT = 100
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_SP_SubjectProduct
MODIFY COLUMN
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  SP_SubjectProductID                   BIGINT DEFAULT 0              NOT NULL
                                        AUTO_INCREMENT
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP PROCEDURE IF EXISTS sp_ec_SP_SubjectProduct;
DELIMITER //
CREATE PROCEDURE sp_ec_SP_SubjectProduct(
  -- --------------------------------------------------------------------------
  __SubjectID                 BIGINT,
  _SubjectName                VARCHAR(255),
  -- _SubjectRealName         VARCHAR(255),
  -- _SubjectGender           CHAR(1),
  -- _SubjectFromInformation  VARCHAR(255),
  -- _SubjectBirthInformation VARCHAR(255),
  -- -- _SubjectTypeID        BIGINT,
  -- -- _SubjectPhone         VARCHAR(255),
  -- -- _SubjectAddress       VARCHAR(255),
  -- -- _SubjectStatusID      BIGINT,
  -- _Description             VARCHAR(1024)
  -- --------------------------------------------------------------------------
  __ProductID             BIGINT,
  __OrganizationID        BIGINT,
  _ProductTitle           VARCHAR(255),
  -- _ProductTypeID       BIGINT,
  _OrganizationName       VARCHAR(255),
  _ProductEdition         SMALLINT,
  _ProductStandardCode    VARCHAR(255),
  -- _ProductPublishDate  VARCHAR(255),
  -- _ProductBasePricing  NUMERIC(16,2),
  -- _ProductStatusID     BIGINT,
  -- _ProductReference    VARCHAR(1024),
  -- _Description         VARCHAR(1024)
  -- --------------------------------------------------------------------------
  _Order              BIGINT,
  _Description        VARCHAR(1024)
  -- --------------------------------------------------------------------------
)
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _OrganizationID BIGINT;
  -- --------------------------------------------------------------------------
  DECLARE _SubjectID BIGINT;
  -- --------------------------------------------------------------------------
  DECLARE _ProductID BIGINT;
  -- --------------------------------------------------------------------------
  IF (__OrganizationID IS NOT NULL)
  THEN
    SET _OrganizationID = __OrganizationID;
  ELSE
    SET _OrganizationID =
    sqlGetId(_OrganizationName);
    -- CAST(CONV(SUBSTRING(MD5(_OrganizationName),1,15),16,10)
    --      AS UNSIGNED INTEGER);
  END IF;
  -- --------------------------------------------------------------------------
  IF (__SubjectID IS NOT NULL)
  THEN
    SET _SubjectID = __SubjectID;
  ELSE
    SET _SubjectID =
    sqlGetId(_SubjectName);
    -- CAST(CONV(SUBSTRING(MD5(_SubjectName),1,15),16,10)
    --      AS UNSIGNED INTEGER);
  END IF;
  -- --------------------------------------------------------------------------
  IF (__ProductID IS NOT NULL)
  THEN
    SET _ProductID = __ProductID;
  ELSE
    SET _ProductID =
    sqlGetId4(_OrganizationID,
              _ProductTitle,
              _ProductEdition,
              _ProductStandardCode
              );
    -- CAST(CONV(SUBSTRING(MD5(CONCAT(_OrganizationID,
    --                                _ProductTitle,
    --                                _ProductEdition,
    --                                _ProductStandardCode
    --                                )
    --                         ),
    --                     1,15
    --                     ),
    --           16,10
    --           )
    --      AS UNSIGNED INTEGER
    --      );
  END IF;
  -- --------------------------------------------------------------------------
  INSERT INTO ec_SP_SubjectProduct(
    SP_SubjectID,
    SP_ProductID,
    SP_Order,
    SP_Description
  ) VALUES (
    _SubjectID,
    _ProductID,
    _Order,
    _Description
  );
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
===============================================================================
== Subschema: Target-Product
===============================================================================
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbi_ec_TP_TargetProductType;
DELIMITER //
CREATE TRIGGER   tbi_ec_TP_TargetProductType
BEFORE INSERT ON ec_TP_TargetProductType
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _TargetProductTypeID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.TPT_EntryCreatedTime = CURRENT_TIMESTAMP();
  SET NEW.TPT_EntryUpdatedTime = '0000-00-00 00:00:00';
  -- --------------------------------------------------------------------------
  IF ((NEW.TPT_TargetProductTypeID IS NULL
       )
      OR
      (NEW.TPT_TargetProductTypeID != 0
       )
      )
  THEN
    SET _TargetProductTypeID =
    sqlGetId(NEW.TPT_TargetProductTypeName);
    -- CAST(CONV(SUBSTRING(MD5(NEW.TPT_TargetProductTypeName),1,15),16,10)
    --      AS UNSIGNED INTEGER);
    IF (_TargetProductTypeID IS NULL)
    THEN
      SET _TargetProductTypeID = 0;
    END IF;
    SET NEW.TPT_TargetProductTypeID = _TargetProductTypeID;
  END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.TPT_TargetProductTypeID IS NULL
  --      )
  --     -- OR
  --     -- (NEW.TPT_TargetProductTypeID = 0
  --     --  )
  --     )
  -- THEN
  --   SELECT
  --     MAX(ec_TP_TargetProductType.TPT_TargetProductTypeID)+1
  --   INTO
  --     _TargetProductTypeID
  --   FROM
  --     ec_TP_TargetProductType;
  --   IF (_TargetProductTypeID IS NULL)
  --   THEN
  --     SET _TargetProductTypeID = 0;
  --   END IF;
  --   SET NEW.TPT_TargetProductTypeID = _TargetProductTypeID;
  -- END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    3,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'TargetProductType',
    CONCAT('Insert',
           'NEW.TPT_TargetProductTypeID=',
           NEW.TPT_TargetProductTypeID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbu_ec_TP_TargetProductType;
DELIMITER //
CREATE TRIGGER   tbu_ec_TP_TargetProductType
BEFORE UPDATE ON ec_TP_TargetProductType
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.TPT_EntryCreatedTime = OLD.TPT_EntryCreatedTime;
  SET NEW.TPT_EntryUpdatedTime = CURRENT_TIMESTAMP();
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    5,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'TargetProductType',
    CONCAT('Update',
           'NEW.TPT_TargetProductTypeID=',
           NEW.TPT_TargetProductTypeID,
           'OLD.TPT_TargetProductTypeID=',
           OLD.TPT_TargetProductTypeID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbd_ec_TP_TargetProductType;
DELIMITER //
CREATE TRIGGER   tbd_ec_TP_TargetProductType
BEFORE DELETE ON ec_TP_TargetProductType
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    7,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'TargetProductType',
    CONCAT('Delete',
           'OLD.TPT_TargetProductTypeID=',
           OLD.TPT_TargetProductTypeID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tai_ec_TP_TargetProductType;
DELIMITER //
CREATE TRIGGER   tai_ec_TP_TargetProductType
AFTER INSERT ON  ec_TP_TargetProductType
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    4,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'TargetProductType',
    CONCAT('Insert',
           'NEW.TPT_TargetProductTypeID=',
           NEW.TPT_TargetProductTypeID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tau_ec_TP_TargetProductType;
DELIMITER //
CREATE TRIGGER   tau_ec_TP_TargetProductType
AFTER UPDATE ON  ec_TP_TargetProductType
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    6,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'TargetProductType',
    CONCAT('Update',
           'NEW.TPT_TargetProductTypeID=',
           NEW.TPT_TargetProductTypeID,
           'OLD.TPT_TargetProductTypeID=',
           OLD.TPT_TargetProductTypeID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tad_ec_TP_TargetProductType;
DELIMITER //
CREATE TRIGGER   tad_ec_TP_TargetProductType
AFTER DELETE ON  ec_TP_TargetProductType
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    8,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'TargetProductType',
    CONCAT('Delete',
           'OLD.TPT_TargetProductTypeID=',
           OLD.TPT_TargetProductTypeID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_TP_TargetProductType
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  AUTO_INCREMENT = 100
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_TP_TargetProductType
MODIFY COLUMN
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  TPT_TargetProductTypeID               BIGINT DEFAULT 0              NOT NULL
                                        AUTO_INCREMENT
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbi_ec_TP_TargetProductStatus;
DELIMITER //
CREATE TRIGGER   tbi_ec_TP_TargetProductStatus
BEFORE INSERT ON ec_TP_TargetProductStatus
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _TargetProductStatusID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.TPs_EntryCreatedTime = CURRENT_TIMESTAMP();
  SET NEW.TPs_EntryUpdatedTime = '0000-00-00 00:00:00';
  -- --------------------------------------------------------------------------
  IF ((NEW.TPs_TargetProductStatusID IS NULL
       )
      OR
      (NEW.TPs_TargetProductStatusID != 0
       )
      )
  THEN
    SET _TargetProductStatusID =
    sqlGetId(NEW.TPs_TargetProductStatusName);
    -- CAST(CONV(SUBSTRING(MD5(NEW.TPs_TargetProductStatusName),1,15),16,10)
    --      AS UNSIGNED INTEGER);
    IF (_TargetProductStatusID IS NULL)
    THEN
      SET _TargetProductStatusID = 0;
    END IF;
    SET NEW.TPs_TargetProductStatusID = _TargetProductStatusID;
  END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.TPs_TargetProductStatusID IS NULL
  --      )
  --     -- OR
  --     -- (NEW.TPs_TargetProductStatusID = 0
  --     --  )
  --     )
  -- THEN
  --   SELECT
  --     MAX(ec_TP_TargetProductStatus.TPs_TargetProductStatusID)+1
  --   INTO
  --     _TargetProductStatusID
  --   FROM
  --     ec_TP_TargetProductStatus;
  --   IF (_TargetProductStatusID IS NULL)
  --   THEN
  --     SET _TargetProductStatusID = 0;
  --   END IF;
  --   SET NEW.TPs_TargetProductStatusID = _TargetProductStatusID;
  -- END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    3,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'TargetProductStatus',
    CONCAT('Insert',
           'NEW.TPs_TargetProductStatusID=',
           NEW.TPs_TargetProductStatusID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbu_ec_TP_TargetProductStatus;
DELIMITER //
CREATE TRIGGER   tbu_ec_TP_TargetProductStatus
BEFORE UPDATE ON ec_TP_TargetProductStatus
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.TPs_EntryCreatedTime = OLD.TPs_EntryCreatedTime;
  SET NEW.TPs_EntryUpdatedTime = CURRENT_TIMESTAMP();
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    5,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'TargetProductStatus',
    CONCAT('Update',
           'NEW.TPs_TargetProductStatusID=',
           NEW.TPs_TargetProductStatusID,
           'OLD.TPs_TargetProductStatusID=',
           OLD.TPs_TargetProductStatusID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbd_ec_TP_TargetProductStatus;
DELIMITER //
CREATE TRIGGER   tbd_ec_TP_TargetProductStatus
BEFORE DELETE ON ec_TP_TargetProductStatus
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    7,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'TargetProductStatus',
    CONCAT('Delete',
           'OLD.TPs_TargetProductStatusID=',
           OLD.TPs_TargetProductStatusID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tai_ec_TP_TargetProductStatus;
DELIMITER //
CREATE TRIGGER   tai_ec_TP_TargetProductStatus
AFTER INSERT ON  ec_TP_TargetProductStatus
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    4,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'TargetProductStatus',
    CONCAT('Insert',
           'NEW.TPs_TargetProductStatusID=',
           NEW.TPs_TargetProductStatusID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tau_ec_TP_TargetProductStatus;
DELIMITER //
CREATE TRIGGER   tau_ec_TP_TargetProductStatus
AFTER UPDATE ON  ec_TP_TargetProductStatus
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    6,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'TargetProductStatus',
    CONCAT('Update',
           'NEW.TPs_TargetProductStatusID=',
           NEW.TPs_TargetProductStatusID,
           'OLD.TPs_TargetProductStatusID=',
           OLD.TPs_TargetProductStatusID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tad_ec_TP_TargetProductStatus;
DELIMITER //
CREATE TRIGGER   tad_ec_TP_TargetProductStatus
AFTER DELETE ON  ec_TP_TargetProductStatus
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    8,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'TargetProductStatus',
    CONCAT('Delete',
           'OLD.TPs_TargetProductStatusID=',
           OLD.TPs_TargetProductStatusID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_TP_TargetProductStatus
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  AUTO_INCREMENT = 100
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_TP_TargetProductStatus
MODIFY COLUMN
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  TPs_TargetProductStatusID             BIGINT DEFAULT 0              NOT NULL
                                        AUTO_INCREMENT
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbi_ec_TP_TargetProduct;
DELIMITER //
CREATE TRIGGER   tbi_ec_TP_TargetProduct
BEFORE INSERT ON ec_TP_TargetProduct
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _TargetProductID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.TP_EntryCreatedTime = CURRENT_TIMESTAMP();
  SET NEW.TP_EntryUpdatedTime = '0000-00-00 00:00:00';
  -- --------------------------------------------------------------------------
  IF ((NEW.TP_TargetProductTypeID IS NULL
       )
      OR
      (NEW.TP_TargetProductTypeID < 1
       )
      )
  THEN
    SET NEW.TP_TargetProductTypeID = 1;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((NEW.TP_TargetProductStatusID IS NULL
       )
      OR
      (NEW.TP_TargetProductStatusID < 1
       )
      )
  THEN
    SET NEW.TP_TargetProductStatusID = 1;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    3,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'TargetProduct',
    CONCAT('Insert',
           'NEW.TP_TargetID=',
           NEW.TP_TargetID,
           'NEW.TP_ProductID=',
           NEW.TP_ProductID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbu_ec_TP_TargetProduct;
DELIMITER //
CREATE TRIGGER   tbu_ec_TP_TargetProduct
BEFORE UPDATE ON ec_TP_TargetProduct
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.TP_EntryCreatedTime = OLD.TP_EntryCreatedTime;
  SET NEW.TP_EntryUpdatedTime = CURRENT_TIMESTAMP();
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    5,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'TargetProduct',
    CONCAT('Update',
           'NEW.TP_TargetID=',
           NEW.TP_TargetID,
           'NEW.TP_ProductID=',
           NEW.TP_ProductID,
           'OLD.TP_TargetID=',
           OLD.TP_TargetID,
           'OLD.TP_ProductID=',
           OLD.TP_ProductID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbd_ec_TP_TargetProduct;
DELIMITER //
CREATE TRIGGER   tbd_ec_TP_TargetProduct
BEFORE DELETE ON ec_TP_TargetProduct
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    7,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'TargetProduct',
    CONCAT('Delete',
           'OLD.TP_TargetID=',
           OLD.TP_TargetID,
           'OLD.TP_ProductID=',
           OLD.TP_ProductID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tai_ec_TP_TargetProduct;
DELIMITER //
CREATE TRIGGER   tai_ec_TP_TargetProduct
AFTER INSERT ON  ec_TP_TargetProduct
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    4,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'TargetProduct',
    CONCAT('Insert',
           'NEW.TP_TargetID=',
           NEW.TP_TargetID,
           'NEW.TP_ProductID=',
           NEW.TP_ProductID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tau_ec_TP_TargetProduct;
DELIMITER //
CREATE TRIGGER   tau_ec_TP_TargetProduct
AFTER UPDATE ON  ec_TP_TargetProduct
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    6,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'TargetProduct',
    CONCAT('Update',
           'NEW.TP_TargetID=',
           NEW.TP_TargetID,
           'NEW.TP_ProductID=',
           NEW.TP_ProductID,
           'OLD.TP_TargetID=',
           OLD.TP_TargetID,
           'OLD.TP_ProductID=',
           OLD.TP_ProductID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tad_ec_TP_TargetProduct;
DELIMITER //
CREATE TRIGGER   tad_ec_TP_TargetProduct
AFTER DELETE ON  ec_TP_TargetProduct
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    8,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'TargetProduct',
    CONCAT('Delete',
           'OLD.TP_TargetID=',
           OLD.TP_TargetID,
           'OLD.TP_ProductID=',
           OLD.TP_ProductID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP PROCEDURE IF EXISTS sp_ec_TP_TargetProduct;
DELIMITER //
CREATE PROCEDURE sp_ec_TP_TargetProduct(
  -- --------------------------------------------------------------------------
  -- --------------------------------------------------------------------------
  __TargetID                 BIGINT,
  _TargetEmailAddress        VARCHAR(255),
  -- _TargetName             VARCHAR(255),
  -- _TargetPasswordHash     VARCHAR(255),
  -- _TargetGender           CHAR(1),
  -- _TargetFromInformation  VARCHAR(255),
  -- _TargetBirthInformation VARCHAR(255),
  -- _TargetTypeID           BIGINT,
  -- _TargetPhone            VARCHAR(255),
  -- _TargetAddress          VARCHAR(255),
  -- _TargetStatusID         BIGINT,
  -- _Description            VARCHAR(1024)
  -- --------------------------------------------------------------------------
  __ProductID            BIGINT,
  __OrganizationID       BIGINT,
  _ProductTitle          VARCHAR(255),
  -- _ProductTypeID      BIGINT,
  _OrganizationName      VARCHAR(255),
  _ProductEdition        SMALLINT,
  _ProductStandardCode   VARCHAR(255),
  -- _ProductPublishDate VARCHAR(255),
  -- _ProductBasePricing NUMERIC(16,2),
  -- _ProductStatusID    BIGINT,
  -- _ProductReference   VARCHAR(1024),
  -- _Description        VARCHAR(1024)
  -- _Order              BIGINT,
  -- _Description        VARCHAR(1024)
  -- --------------------------------------------------------------------------
  -- --------------------------------------------------------------------------
  _TargetProductTypeID               BIGINT,
  -- --------------------------------------------------------------------------
  _TargetProductStatusID             BIGINT,
  -- --------------------------------------------------------------------------
  -- --------------------------------------------------------------------------
  _Description                       VARCHAR(1024)
  -- --------------------------------------------------------------------------
  -- --------------------------------------------------------------------------
)
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _TargetID BIGINT;
  -- --------------------------------------------------------------------------
  DECLARE _OrganizationID BIGINT;
  -- --------------------------------------------------------------------------
  DECLARE _ProductID BIGINT;
  -- --------------------------------------------------------------------------
  IF (__TargetID IS NOT NULL)
  THEN
    SET _TargetID = __TargetID;
  ELSE
    SET _TargetID =
    sqlGetId(_TargetEmailAddress);
    -- CAST(CONV(SUBSTRING(MD5(_TargetEmailAddress),1,15),16,10)
    --      AS UNSIGNED INTEGER);
  END IF;
  -- --------------------------------------------------------------------------
  IF (__OrganizationID IS NOT NULL)
  THEN
    SET _OrganizationID = __OrganizationID;
  ELSE
    SET _OrganizationID =
    sqlGetId(_OrganizationName);
    -- CAST(CONV(SUBSTRING(MD5(_OrganizationName),1,15),16,10)
    --      AS UNSIGNED INTEGER);
  END IF;
  -- --------------------------------------------------------------------------
  IF (__ProductID IS NOT NULL)
  THEN
    SET _ProductID = __ProductID;
  ELSE
    SET _ProductID =
    sqlGetId4(_OrganizationID,
              _ProductTitle,
              _ProductEdition,
              _ProductStandardCode
              );
    -- CAST(CONV(SUBSTRING(MD5(CONCAT(_OrganizationID,
    --                                _ProductTitle,
    --                                _ProductEdition,
    --                                _ProductStandardCode
    --                                )
    --                         ),
    --                     1,15
    --                     ),
    --           16,10
    --           )
    --      AS UNSIGNED INTEGER
    --      );
  END IF;
  -- --------------------------------------------------------------------------
  INSERT INTO ec_TP_TargetProduct (
    TP_TargetID,
    TP_ProductID,
    TP_TargetProductTypeID,
    TP_TargetProductStatusID,
    TP_Description
  ) VALUES (
    _TargetID,
    _ProductID,
    _TargetProductTypeID,
    _TargetProductStatusID,
    _Description
  );
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
===============================================================================
== Subschema: Content
===============================================================================
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbi_ec_C_ContentType;
DELIMITER //
CREATE TRIGGER   tbi_ec_C_ContentType
BEFORE INSERT ON ec_C_ContentType
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _ContentTypeID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.CT_EntryCreatedTime = CURRENT_TIMESTAMP();
  SET NEW.CT_EntryUpdatedTime = '0000-00-00 00:00:00';
  -- --------------------------------------------------------------------------
  IF ((NEW.CT_ContentTypeID IS NULL
       )
      OR
      (NEW.CT_ContentTypeID != 0
       )
      )
  THEN
    SET _ContentTypeID =
    sqlGetId(NEW.CT_ContentTypeName);
    -- CAST(CONV(SUBSTRING(MD5(NEW.CT_ContentTypeName),1,15),16,10)
    --      AS UNSIGNED INTEGER);
    IF (_ContentTypeID IS NULL)
    THEN
      SET _ContentTypeID = 0;
    END IF;
    SET NEW.CT_ContentTypeID = _ContentTypeID;
  END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.CT_ContentTypeID IS NULL
  --      )
  --     -- OR
  --     -- (NEW.CT_ContentTypeID = 0
  --     --  )
  --     )
  -- THEN
  --   SELECT
  --     MAX(ec_C_ContentType.CT_ContentTypeID)+1
  --   INTO
  --     _ContentTypeID
  --   FROM
  --     ec_C_ContentType;
  --   IF (_ContentTypeID IS NULL)
  --   THEN
  --     SET _ContentTypeID = 0;
  --   END IF;
  --   SET NEW.CT_ContentTypeID = _ContentTypeID;
  -- END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    3,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentType',
    CONCAT('Insert',
           'NEW.CT_ContentTypeID=',
           NEW.CT_ContentTypeID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbu_ec_C_ContentType;
DELIMITER //
CREATE TRIGGER   tbu_ec_C_ContentType
BEFORE UPDATE ON ec_C_ContentType
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.CT_EntryCreatedTime = OLD.CT_EntryCreatedTime;
  SET NEW.CT_EntryUpdatedTime = CURRENT_TIMESTAMP();
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    5,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentType',
    CONCAT('Update',
           'NEW.CT_ContentTypeID=',
           NEW.CT_ContentTypeID,
           'OLD.CT_ContentTypeID=',
           OLD.CT_ContentTypeID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbd_ec_C_ContentType;
DELIMITER //
CREATE TRIGGER   tbd_ec_C_ContentType
BEFORE DELETE ON ec_C_ContentType
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    7,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentType',
    CONCAT('Delete',
           'OLD.CT_ContentTypeID=',
           OLD.CT_ContentTypeID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tai_ec_C_ContentType;
DELIMITER //
CREATE TRIGGER   tai_ec_C_ContentType
AFTER INSERT ON  ec_C_ContentType
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    4,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentType',
    CONCAT('Insert',
           'NEW.CT_ContentTypeID=',
           NEW.CT_ContentTypeID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tau_ec_C_ContentType;
DELIMITER //
CREATE TRIGGER   tau_ec_C_ContentType
AFTER UPDATE ON  ec_C_ContentType
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    6,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentType',
    CONCAT('Update',
           'NEW.CT_ContentTypeID=',
           NEW.CT_ContentTypeID,
           'OLD.CT_ContentTypeID=',
           OLD.CT_ContentTypeID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tad_ec_C_ContentType;
DELIMITER //
CREATE TRIGGER   tad_ec_C_ContentType
AFTER DELETE ON  ec_C_ContentType
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    8,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentType',
    CONCAT('Delete',
           'OLD.CT_ContentTypeID=',
           OLD.CT_ContentTypeID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_C_ContentType
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  AUTO_INCREMENT = 100
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_C_ContentType
MODIFY COLUMN
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  CT_ContentTypeID                      BIGINT DEFAULT 0              NOT NULL
                                        AUTO_INCREMENT
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbi_ec_C_ContentStatus;
DELIMITER //
CREATE TRIGGER   tbi_ec_C_ContentStatus
BEFORE INSERT ON ec_C_ContentStatus
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _ContentStatusID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.Cs_EntryCreatedTime = CURRENT_TIMESTAMP();
  SET NEW.Cs_EntryUpdatedTime = '0000-00-00 00:00:00';
  -- --------------------------------------------------------------------------
  IF ((NEW.Cs_ContentStatusID IS NULL
       )
      OR
      (NEW.Cs_ContentStatusID != 0
       )
      )
  THEN
    SET _ContentStatusID =
    sqlGetId(NEW.Cs_ContentStatusName);
    -- CAST(CONV(SUBSTRING(MD5(NEW.Cs_ContentStatusName),1,15),16,10)
    --      AS UNSIGNED INTEGER);
    IF (_ContentStatusID IS NULL)
    THEN
      SET _ContentStatusID = 0;
    END IF;
    SET NEW.Cs_ContentStatusID = _ContentStatusID;
  END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.Cs_ContentStatusID IS NULL
  --      )
  --     -- OR
  --     -- (NEW.Cs_ContentStatusID = 0
  --     --  )
  --     )
  -- THEN
  --   SELECT
  --     MAX(ec_C_ContentStatus.Cs_ContentStatusID)+1
  --   INTO
  --     _ContentStatusID
  --   FROM
  --     ec_C_ContentStatus;
  --   IF (_ContentStatusID IS NULL)
  --   THEN
  --     SET _ContentStatusID = 0;
  --   END IF;
  --   SET NEW.Cs_ContentStatusID = _ContentStatusID;
  -- END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    3,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentStatus',
    CONCAT('Insert',
           'NEW.Cs_ContentStatusID=',
           NEW.Cs_ContentStatusID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbu_ec_C_ContentStatus;
DELIMITER //
CREATE TRIGGER   tbu_ec_C_ContentStatus
BEFORE UPDATE ON ec_C_ContentStatus
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.Cs_EntryCreatedTime = OLD.Cs_EntryCreatedTime;
  SET NEW.Cs_EntryUpdatedTime = CURRENT_TIMESTAMP();
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    5,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentStatus',
    CONCAT('Update',
           'NEW.Cs_ContentStatusID=',
           NEW.Cs_ContentStatusID,
           'OLD.Cs_ContentStatusID=',
           OLD.Cs_ContentStatusID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbd_ec_C_ContentStatus;
DELIMITER //
CREATE TRIGGER   tbd_ec_C_ContentStatus
BEFORE DELETE ON ec_C_ContentStatus
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    7,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentStatus',
    CONCAT('Delete',
           'OLD.Cs_ContentStatusID=',
           OLD.Cs_ContentStatusID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tai_ec_C_ContentStatus;
DELIMITER //
CREATE TRIGGER   tai_ec_C_ContentStatus
AFTER INSERT ON  ec_C_ContentStatus
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    4,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentStatus',
    CONCAT('Insert',
           'NEW.Cs_ContentStatusID=',
           NEW.Cs_ContentStatusID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tau_ec_C_ContentStatus;
DELIMITER //
CREATE TRIGGER   tau_ec_C_ContentStatus
AFTER UPDATE ON  ec_C_ContentStatus
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    6,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentStatus',
    CONCAT('Update',
           'NEW.Cs_ContentStatusID=',
           NEW.Cs_ContentStatusID,
           'OLD.Cs_ContentStatusID=',
           OLD.Cs_ContentStatusID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tad_ec_C_ContentStatus;
DELIMITER //
CREATE TRIGGER   tad_ec_C_ContentStatus
AFTER DELETE ON  ec_C_ContentStatus
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    8,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentStatus',
    CONCAT('Delete',
           'OLD.Cs_ContentStatusID=',
           OLD.Cs_ContentStatusID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_C_ContentStatus
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  AUTO_INCREMENT = 100
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_C_ContentStatus
MODIFY COLUMN
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  Cs_ContentStatusID                    BIGINT DEFAULT 0              NOT NULL
                                        AUTO_INCREMENT
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbi_ec_C_ContentText;
DELIMITER //
CREATE TRIGGER   tbi_ec_C_ContentText
BEFORE INSERT ON ec_C_ContentText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _ContentID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.C_EntryCreatedTime = CURRENT_TIMESTAMP();
  SET NEW.C_EntryUpdatedTime = '0000-00-00 00:00:00';
  -- --------------------------------------------------------------------------
  IF ((NEW.C_ContentID IS NULL
       )
      OR
      (NEW.C_ContentID != 0
       )
      )
  THEN
    SET _ContentID =
    sqlGetId3(NEW.C_ContentTitle,
              NEW.C_ProductID,
              NEW.C_ContentEdition -- ,
              -- NEW.C_ContentStandardCode
              );
    -- CAST(CONV(SUBSTRING(MD5(CONCAT(NEW.C_ContentTitle,
    --                                NEW.C_ProductID,
    --                                NEW.C_ContentEdition -- ,
    --                                -- NEW.C_ContentStandardCode
    --                                )
    --                         ),
    --                     1,15
    --                     ),
    --           16,10
    --           )
    --      AS UNSIGNED INTEGER
    --      );
    IF (_ContentID IS NULL)
    THEN
      SET _ContentID = 0;
    END IF;
    SET NEW.C_ContentID = _ContentID;
  END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.C_ContentID IS NULL
  --      )
  --     -- OR
  --     -- (NEW.C_ContentID = 0
  --     --  )
  --     )
  -- THEN
  --   SELECT
  --     MAX(ec_C_Content.C_ContentID)+1
  --   INTO
  --     _ContentID
  --   FROM
  --     ec_C_ContentText;
  --   IF (_ContentID IS NULL)
  --   THEN
  --     SET _ContentID = 0;
  --   END IF;
  --   SET NEW.C_ContentID = _ContentID;
  -- END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.C_ContentTypeID IS NULL
  --      )
  --     OR
  --     (NEW.C_ContentTypeID < 1
  --      )
  --     )
  -- THEN
  --   SET NEW.C_ContentTypeID = 1;
  -- END IF;
  -- --------------------------------------------------------------------------
  IF ((NEW.C_ContentStatusID IS NULL
       )
      OR
      (NEW.C_ContentStatusID < 1
       )
      )
  THEN
    SET NEW.C_ContentStatusID = 1;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    3,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentText',
    CONCAT('Insert',
           'NEW.C_ContentID=',
           NEW.C_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbu_ec_C_ContentText;
DELIMITER //
CREATE TRIGGER   tbu_ec_C_ContentText
BEFORE UPDATE ON ec_C_ContentText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.C_EntryCreatedTime = OLD.C_EntryCreatedTime;
  SET NEW.C_EntryUpdatedTime = CURRENT_TIMESTAMP();
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    5,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentText',
    CONCAT('Update',
           'NEW.C_ContentID=',
           NEW.C_ContentID,
           'OLD.C_ContentID=',
           OLD.C_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbd_ec_C_ContentText;
DELIMITER //
CREATE TRIGGER   tbd_ec_C_ContentText
BEFORE DELETE ON ec_C_ContentText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    7,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentText',
    CONCAT('Delete',
           'OLD.C_ContentID=',
           OLD.C_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tai_ec_C_ContentText;
DELIMITER //
CREATE TRIGGER   tai_ec_C_ContentText
AFTER INSERT ON  ec_C_ContentText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    4,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentText',
    CONCAT('Insert',
           'NEW.C_ContentID=',
           NEW.C_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tau_ec_C_ContentText;
DELIMITER //
CREATE TRIGGER   tau_ec_C_ContentText
AFTER UPDATE ON  ec_C_ContentText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    6,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentText',
    CONCAT('Update',
           'NEW.C_ContentID=',
           NEW.C_ContentID,
           'OLD.C_ContentID=',
           OLD.C_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tad_ec_C_ContentText;
DELIMITER //
CREATE TRIGGER   tad_ec_C_ContentText
AFTER DELETE ON  ec_C_ContentText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    8,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentText',
    CONCAT('Delete',
           'OLD.C_ContentID=',
           OLD.C_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_C_ContentText
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  AUTO_INCREMENT = 100
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_C_ContentText
MODIFY COLUMN
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  C_ContentID                           BIGINT DEFAULT 0              NOT NULL
                                        AUTO_INCREMENT
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbi_ec_C_ContentTextFullText;
DELIMITER //
CREATE TRIGGER   tbi_ec_C_ContentTextFullText
BEFORE INSERT ON ec_C_ContentTextFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _ContentID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.Cft_EntryCreatedTime = CURRENT_TIMESTAMP();
  SET NEW.Cft_EntryUpdatedTime = '0000-00-00 00:00:00';
  -- --------------------------------------------------------------------------
  IF ((NEW.Cft_ContentID IS NULL
       )
      OR
      (NEW.Cft_ContentID != 0
       )
      )
  THEN
    SET _ContentID =
    sqlGetId3(NEW.Cft_ContentTitle,
              NEW.Cft_ProductID,
              NEW.Cft_ContentEdition -- ,
              -- NEW.Cft_ContentStandardCode
              );
    -- CAST(CONV(SUBSTRING(MD5(CONCAT(NEW.Cft_ContentTitle,
    --                                NEW.Cft_ProductID,
    --                                NEW.Cft_ContentEdition -- ,
    --                                -- NEW.Cft_ContentStandardCode
    --                                )
    --                         ),
    --                     1,15
    --                     ),
    --           16,10
    --           )
    --      AS UNSIGNED INTEGER
    --      );
    IF (_ContentID IS NULL)
    THEN
      SET _ContentID = 0;
    END IF;
    SET NEW.Cft_ContentID = _ContentID;
  END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.Cft_ContentID IS NULL
  --      )
  --     -- OR
  --     -- (NEW.Cft_ContentID = 0
  --     --  )
  --     )
  -- THEN
  --   SELECT
  --     MAX(ec_C_ContentTextFullText.Cft_ContentID)+1
  --   INTO
  --     _ContentID
  --   FROM
  --     ec_C_ContentTextFullText;
  --   IF (_ContentID IS NULL)
  --   THEN
  --     SET _ContentID = 0;
  --   END IF;
  --   SET NEW.Cft_ContentID = _ContentID;
  -- END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    3,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentTextFullText',
    CONCAT('Insert',
           'NEW.Cft_ContentID=',
           NEW.Cft_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbu_ec_C_ContentTextFullText;
DELIMITER //
CREATE TRIGGER   tbu_ec_C_ContentTextFullText
BEFORE UPDATE ON ec_C_ContentTextFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.Cft_EntryCreatedTime = OLD.Cft_EntryCreatedTime;
  SET NEW.Cft_EntryUpdatedTime = CURRENT_TIMESTAMP();
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    5,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentTextFullText',
    CONCAT('Update',
           'NEW.Cft_ContentID=',
           NEW.Cft_ContentID,
           'OLD.Cft_ContentID=',
           OLD.Cft_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbd_ec_C_ContentTextFullText;
DELIMITER //
CREATE TRIGGER   tbd_ec_C_ContentTextFullText
BEFORE DELETE ON ec_C_ContentTextFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    7,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentTextFullText',
    CONCAT('Delete',
           'OLD.Cft_ContentID=',
           OLD.Cft_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tai_ec_C_ContentTextFullText;
DELIMITER //
CREATE TRIGGER   tai_ec_C_ContentTextFullText
AFTER INSERT ON  ec_C_ContentTextFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    4,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentTextFullText',
    CONCAT('Insert',
           'NEW.Cft_ContentID=',
           NEW.Cft_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tau_ec_C_ContentTextFullText;
DELIMITER //
CREATE TRIGGER   tau_ec_C_ContentTextFullText
AFTER UPDATE ON  ec_C_ContentTextFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    6,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentTextFullText',
    CONCAT('Update',
           'NEW.Cft_ContentID=',
           NEW.Cft_ContentID,
           'OLD.Cft_ContentID=',
           OLD.Cft_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tad_ec_C_ContentTextFullText;
DELIMITER //
CREATE TRIGGER   tad_ec_C_ContentTextFullText
AFTER DELETE ON  ec_C_ContentTextFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    8,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentTextFullText',
    CONCAT('Delete',
           'OLD.Cft_ContentID=',
           OLD.Cft_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_C_ContentTextFullText
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  AUTO_INCREMENT = 100
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_C_ContentTextFullText
MODIFY COLUMN
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  Cft_ContentID                         BIGINT DEFAULT 0              NOT NULL
                                        AUTO_INCREMENT
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP PROCEDURE IF EXISTS sp_ec_C_ContentText;
DELIMITER //
CREATE PROCEDURE sp_ec_C_ContentText(
  -- --------------------------------------------------------------------------
  _ContentTitle        VARCHAR(255),
  -- _ContentTypeID    BIGINT,
  -- --------------------------------------------------------------------------
  __ProductID            BIGINT,
  __OrganizationID       BIGINT,
  _ProductTitle          VARCHAR(255),
  -- _ProductTypeID      BIGINT,
  _OrganizationName      VARCHAR(255),
  _ProductEdition        SMALLINT,
  _ProductStandardCode   VARCHAR(255),
  -- _ProductPublishDate VARCHAR(255),
  -- _ProductBasePricing NUMERIC(16,2),
  -- _ProductStatusID    BIGINT,
  -- _ProductReference   VARCHAR(1024),
  -- _Description        VARCHAR(1024)
  -- _Order              BIGINT,
  -- _Description        VARCHAR(1024)
  -- --------------------------------------------------------------------------
  _ContentEdition      SMALLINT,
  -- _ContentStandardCode VARCHAR(255),
  _ContentPublishDate  VARCHAR(255),
  _ContentBasePricing  NUMERIC(16,2),
  _ContentStatusID     BIGINT,
  _ContentText         TEXT,
  _ContentMIMEsetting  VARCHAR(255),
  _Description         VARCHAR(1024)
  -- --------------------------------------------------------------------------
)
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _OrganizationID BIGINT;
  -- --------------------------------------------------------------------------
  DECLARE _ProductID BIGINT;
  -- --------------------------------------------------------------------------
  IF (__OrganizationID IS NOT NULL)
  THEN
    SET _OrganizationID = __OrganizationID;
  ELSE
    SET _OrganizationID =
    sqlGetId(_OrganizationName);
    -- CAST(CONV(SUBSTRING(MD5(_OrganizationName),1,15),16,10)
    --      AS UNSIGNED INTEGER);
  END IF;
  -- --------------------------------------------------------------------------
  IF (__ProductID IS NOT NULL)
  THEN
    SET _ProductID = __ProductID;
  ELSE
    SET _ProductID =
    sqlGetId4(_OrganizationID,
              _ProductTitle,
              _ProductEdition,
              _ProductStandardCode
              );
    -- CAST(CONV(SUBSTRING(MD5(CONCAT(_OrganizationID,
    --                                _ProductTitle,
    --                                _ProductEdition,
    --                                _ProductStandardCode
    --                                )
    --                         ),
    --                     1,15
    --                     ),
    --           16,10
    --           )
    --      AS UNSIGNED INTEGER
    --      );
  END IF;
  -- --------------------------------------------------------------------------
  INSERT INTO ec_C_ContentText(
    C_ContentTitle,
    -- C_ContentTypeID,
    C_ProductID,
    C_ContentEdition,
    -- C_ContentStandardCode,
    C_ContentPublishDate,
    C_ContentBasePricing,
    C_ContentStatusID,
    C_ContentText,
    C_ContentMIMEsetting,
    C_Description
  ) VALUES (
    _ContentTitle,
    -- _ContentTypeID,
    _ProductID,
    _ContentEdition,
    -- _ContentStandardCode,
    _ContentPublishDate,
    _ContentBasePricing,
    _ContentStatusID,
    _ContentText,
    _ContentMIMEsetting,
    _Description
  );
  -- --------------------------------------------------------------------------
  INSERT INTO ec_C_ContentTextFullText(
    Cft_ContentTitle,
    Cft_ProductID,
    Cft_ContentEdition,
    -- Cft_ContentStandardCode,
    Cft_ContentPublishDate,
    Cft_ContentText,
    Cft_Description
  ) VALUES (
    _ContentTitle,
    _ProductID,
    _ContentEdition,
    -- _ContentStandardCode,
    _ContentPublishDate,
    _ContentText,
    _Description
  );
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbi_ec_C_ContentTinyText;
DELIMITER //
CREATE TRIGGER   tbi_ec_C_ContentTinyText
BEFORE INSERT ON ec_C_ContentTinyText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _ContentID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.C_EntryCreatedTime = CURRENT_TIMESTAMP();
  SET NEW.C_EntryUpdatedTime = '0000-00-00 00:00:00';
  -- --------------------------------------------------------------------------
  IF ((NEW.C_ContentID IS NULL
       )
      OR
      (NEW.C_ContentID != 0
       )
      )
  THEN
    SET _ContentID =
    sqlGetId3(NEW.C_ContentTitle,
              NEW.C_ProductID,
              NEW.C_ContentEdition -- ,
              -- NEW.C_ContentStandardCode
              );
    -- CAST(CONV(SUBSTRING(MD5(CONCAT(NEW.C_ContentTitle,
    --                                NEW.C_ProductID,
    --                                NEW.C_ContentEdition -- ,
    --                                -- NEW.C_ContentStandardCode
    --                                )
    --                         ),
    --                     1,15
    --                     ),
    --           16,10
    --           )
    --      AS UNSIGNED INTEGER
    --      );
    IF (_ContentID IS NULL)
    THEN
      SET _ContentID = 0;
    END IF;
    SET NEW.C_ContentID = _ContentID;
  END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.C_ContentID IS NULL
  --      )
  --     -- OR
  --     -- (NEW.C_ContentID = 0
  --     --  )
  --     )
  -- THEN
  --   SELECT
  --     MAX(ec_C_Content.C_ContentID)+1
  --   INTO
  --     _ContentID
  --   FROM
  --     ec_C_ContentTinyText;
  --   IF (_ContentID IS NULL)
  --   THEN
  --     SET _ContentID = 0;
  --   END IF;
  --   SET NEW.C_ContentID = _ContentID;
  -- END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.C_ContentTypeID IS NULL
  --      )
  --     OR
  --     (NEW.C_ContentTypeID < 1
  --      )
  --     )
  -- THEN
  --   SET NEW.C_ContentTypeID = 1;
  -- END IF;
  -- --------------------------------------------------------------------------
  IF ((NEW.C_ContentStatusID IS NULL
       )
      OR
      (NEW.C_ContentStatusID < 1
       )
      )
  THEN
    SET NEW.C_ContentStatusID = 1;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    3,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentTinyText',
    CONCAT('Insert',
           'NEW.C_ContentID=',
           NEW.C_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbu_ec_C_ContentTinyText;
DELIMITER //
CREATE TRIGGER   tbu_ec_C_ContentTinyText
BEFORE UPDATE ON ec_C_ContentTinyText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.C_EntryCreatedTime = OLD.C_EntryCreatedTime;
  SET NEW.C_EntryUpdatedTime = CURRENT_TIMESTAMP();
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    5,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentTinyText',
    CONCAT('Update',
           'NEW.C_ContentID=',
           NEW.C_ContentID,
           'OLD.C_ContentID=',
           OLD.C_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbd_ec_C_ContentTinyText;
DELIMITER //
CREATE TRIGGER   tbd_ec_C_ContentTinyText
BEFORE DELETE ON ec_C_ContentTinyText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    7,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentTinyText',
    CONCAT('Delete',
           'OLD.C_ContentID=',
           OLD.C_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tai_ec_C_ContentTinyText;
DELIMITER //
CREATE TRIGGER   tai_ec_C_ContentTinyText
AFTER INSERT ON  ec_C_ContentTinyText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    4,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentTinyText',
    CONCAT('Insert',
           'NEW.C_ContentID=',
           NEW.C_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tau_ec_C_ContentTinyText;
DELIMITER //
CREATE TRIGGER   tau_ec_C_ContentTinyText
AFTER UPDATE ON  ec_C_ContentTinyText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    6,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentTinyText',
    CONCAT('Update',
           'NEW.C_ContentID=',
           NEW.C_ContentID,
           'OLD.C_ContentID=',
           OLD.C_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tad_ec_C_ContentTinyText;
DELIMITER //
CREATE TRIGGER   tad_ec_C_ContentTinyText
AFTER DELETE ON  ec_C_ContentTinyText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    8,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentTinyText',
    CONCAT('Delete',
           'OLD.C_ContentID=',
           OLD.C_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_C_ContentTinyText
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  AUTO_INCREMENT = 100
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_C_ContentTinyText
MODIFY COLUMN
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  C_ContentID                           BIGINT DEFAULT 0              NOT NULL
                                        AUTO_INCREMENT
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbi_ec_C_ContentTinyTextFullText;
DELIMITER //
CREATE TRIGGER   tbi_ec_C_ContentTinyTextFullText
BEFORE INSERT ON ec_C_ContentTinyTextFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _ContentID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.Cft_EntryCreatedTime = CURRENT_TIMESTAMP();
  SET NEW.Cft_EntryUpdatedTime = '0000-00-00 00:00:00';
  -- --------------------------------------------------------------------------
  IF ((NEW.Cft_ContentID IS NULL
       )
      OR
      (NEW.Cft_ContentID != 0
       )
      )
  THEN
    SET _ContentID =
    sqlGetId3(NEW.Cft_ContentTitle,
              NEW.Cft_ProductID,
              NEW.Cft_ContentEdition -- ,
              -- NEW.Cft_ContentStandardCode
              );
    -- CAST(CONV(SUBSTRING(MD5(CONCAT(NEW.Cft_ContentTitle,
    --                                NEW.Cft_ProductID,
    --                                NEW.Cft_ContentEdition -- ,
    --                                -- NEW.Cft_ContentStandardCode
    --                                )
    --                         ),
    --                     1,15
    --                     ),
    --           16,10
    --           )
    --      AS UNSIGNED INTEGER
    --      );
    IF (_ContentID IS NULL)
    THEN
      SET _ContentID = 0;
    END IF;
    SET NEW.Cft_ContentID = _ContentID;
  END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.Cft_ContentID IS NULL
  --      )
  --     -- OR
  --     -- (NEW.Cft_ContentID = 0
  --     --  )
  --     )
  -- THEN
  --   SELECT
  --     MAX(ec_C_ContentTinyTextFullText.Cft_ContentID)+1
  --   INTO
  --     _ContentID
  --   FROM
  --     ec_C_ContentTinyTextFullText;
  --   IF (_ContentID IS NULL)
  --   THEN
  --     SET _ContentID = 0;
  --   END IF;
  --   SET NEW.Cft_ContentID = _ContentID;
  -- END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    3,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentTinyTextFullText',
    CONCAT('Insert',
           'NEW.Cft_ContentID=',
           NEW.Cft_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbu_ec_C_ContentTinyTextFullText;
DELIMITER //
CREATE TRIGGER   tbu_ec_C_ContentTinyTextFullText
BEFORE UPDATE ON ec_C_ContentTinyTextFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.Cft_EntryCreatedTime = OLD.Cft_EntryCreatedTime;
  SET NEW.Cft_EntryUpdatedTime = CURRENT_TIMESTAMP();
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    5,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentTinyTextFullText',
    CONCAT('Update',
           'NEW.Cft_ContentID=',
           NEW.Cft_ContentID,
           'OLD.Cft_ContentID=',
           OLD.Cft_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbd_ec_C_ContentTinyTextFullText;
DELIMITER //
CREATE TRIGGER   tbd_ec_C_ContentTinyTextFullText
BEFORE DELETE ON ec_C_ContentTinyTextFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    7,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentTinyTextFullText',
    CONCAT('Delete',
           'OLD.Cft_ContentID=',
           OLD.Cft_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tai_ec_C_ContentTinyTextFullText;
DELIMITER //
CREATE TRIGGER   tai_ec_C_ContentTinyTextFullText
AFTER INSERT ON  ec_C_ContentTinyTextFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    4,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentTinyTextFullText',
    CONCAT('Insert',
           'NEW.Cft_ContentID=',
           NEW.Cft_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tau_ec_C_ContentTinyTextFullText;
DELIMITER //
CREATE TRIGGER   tau_ec_C_ContentTinyTextFullText
AFTER UPDATE ON  ec_C_ContentTinyTextFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    6,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentTinyTextFullText',
    CONCAT('Update',
           'NEW.Cft_ContentID=',
           NEW.Cft_ContentID,
           'OLD.Cft_ContentID=',
           OLD.Cft_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tad_ec_C_ContentTinyTextFullText;
DELIMITER //
CREATE TRIGGER   tad_ec_C_ContentTinyTextFullText
AFTER DELETE ON  ec_C_ContentTinyTextFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    8,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentTinyTextFullText',
    CONCAT('Delete',
           'OLD.Cft_ContentID=',
           OLD.Cft_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_C_ContentTinyTextFullText
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  AUTO_INCREMENT = 100
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_C_ContentTinyTextFullText
MODIFY COLUMN
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  Cft_ContentID                         BIGINT DEFAULT 0              NOT NULL
                                        AUTO_INCREMENT
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP PROCEDURE IF EXISTS sp_ec_C_ContentTinyText;
DELIMITER //
CREATE PROCEDURE sp_ec_C_ContentTinyText(
  -- --------------------------------------------------------------------------
  _ContentTitle        VARCHAR(255),
  -- _ContentTypeID    BIGINT,
  -- --------------------------------------------------------------------------
  __ProductID            BIGINT,
  __OrganizationID       BIGINT,
  _ProductTitle          VARCHAR(255),
  -- _ProductTypeID      BIGINT,
  _OrganizationName      VARCHAR(255),
  _ProductEdition        SMALLINT,
  _ProductStandardCode   VARCHAR(255),
  -- _ProductPublishDate VARCHAR(255),
  -- _ProductBasePricing NUMERIC(16,2),
  -- _ProductStatusID    BIGINT,
  -- _ProductReference   VARCHAR(1024),
  -- _Description        VARCHAR(1024)
  -- _Order              BIGINT,
  -- _Description        VARCHAR(1024)
  -- --------------------------------------------------------------------------
  _ContentEdition      SMALLINT,
  -- _ContentStandardCode VARCHAR(255),
  _ContentPublishDate  VARCHAR(255),
  _ContentBasePricing  NUMERIC(16,2),
  _ContentStatusID     BIGINT,
  _ContentTinyText     TINYTEXT,
  _ContentMIMEsetting  VARCHAR(255),
  _Description         VARCHAR(1024)
  -- --------------------------------------------------------------------------
)
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _OrganizationID BIGINT;
  -- --------------------------------------------------------------------------
  DECLARE _ProductID BIGINT;
  -- --------------------------------------------------------------------------
  IF (__OrganizationID IS NOT NULL)
  THEN
    SET _OrganizationID = __OrganizationID;
  ELSE
    SET _OrganizationID =
    sqlGetId(_OrganizationName);
    -- CAST(CONV(SUBSTRING(MD5(_OrganizationName),1,15),16,10)
    --      AS UNSIGNED INTEGER);
  END IF;
  -- --------------------------------------------------------------------------
  IF (__ProductID IS NOT NULL)
  THEN
    SET _ProductID = __ProductID;
  ELSE
    SET _ProductID =
    sqlGetId4(_OrganizationID,
              _ProductTitle,
              _ProductEdition,
              _ProductStandardCode
              );
    -- CAST(CONV(SUBSTRING(MD5(CONCAT(_OrganizationID,
    --                                _ProductTitle,
    --                                _ProductEdition,
    --                                _ProductStandardCode
    --                                )
    --                         ),
    --                     1,15
    --                     ),
    --           16,10
    --           )
    --      AS UNSIGNED INTEGER
    --      );
  END IF;
  -- --------------------------------------------------------------------------
  INSERT INTO ec_C_ContentTinyText(
    C_ContentTitle,
    -- C_ContentTypeID,
    C_ProductID,
    C_ContentEdition,
    -- C_ContentStandardCode,
    C_ContentPublishDate,
    C_ContentBasePricing,
    C_ContentStatusID,
    C_ContentTinyText,
    C_ContentMIMEsetting,
    C_Description
  ) VALUES (
    _ContentTitle,
    -- _ContentTypeID,
    _ProductID,
    _ContentEdition,
    -- _ContentStandardCode,
    _ContentPublishDate,
    _ContentBasePricing,
    _ContentStatusID,
    _ContentTinyText,
    _ContentMIMEsetting,
    _Description
  );
  -- --------------------------------------------------------------------------
  INSERT INTO ec_C_ContentTinyTextFullText(
    Cft_ContentTitle,
    Cft_ProductID,
    Cft_ContentEdition,
    -- Cft_ContentStandardCode,
    Cft_ContentPublishDate,
    Cft_ContentTinyText,
    Cft_Description
  ) VALUES (
    _ContentTitle,
    _ProductID,
    _ContentEdition,
    -- _ContentStandardCode,
    _ContentPublishDate,
    _ContentTinyText,
    _Description
  );
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbi_ec_C_ContentMediumText;
DELIMITER //
CREATE TRIGGER   tbi_ec_C_ContentMediumText
BEFORE INSERT ON ec_C_ContentMediumText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _ContentID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.C_EntryCreatedTime = CURRENT_TIMESTAMP();
  SET NEW.C_EntryUpdatedTime = '0000-00-00 00:00:00';
  -- --------------------------------------------------------------------------
  IF ((NEW.C_ContentID IS NULL
       )
      OR
      (NEW.C_ContentID != 0
       )
      )
  THEN
    SET _ContentID =
    sqlGetId3(NEW.C_ContentTitle,
              NEW.C_ProductID,
              NEW.C_ContentEdition -- ,
              -- NEW.C_ContentStandardCode
              );
    -- CAST(CONV(SUBSTRING(MD5(CONCAT(NEW.C_ContentTitle,
    --                                NEW.C_ProductID,
    --                                NEW.C_ContentEdition -- ,
    --                                -- NEW.C_ContentStandardCode
    --                                )
    --                         ),
    --                     1,15
    --                     ),
    --           16,10
    --           )
    --      AS UNSIGNED INTEGER
    --      );
    IF (_ContentID IS NULL)
    THEN
      SET _ContentID = 0;
    END IF;
    SET NEW.C_ContentID = _ContentID;
  END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.C_ContentID IS NULL
  --      )
  --     -- OR
  --     -- (NEW.C_ContentID = 0
  --     --  )
  --     )
  -- THEN
  --   SELECT
  --     MAX(ec_C_Content.C_ContentID)+1
  --   INTO
  --     _ContentID
  --   FROM
  --     ec_C_ContentMediumText;
  --   IF (_ContentID IS NULL)
  --   THEN
  --     SET _ContentID = 0;
  --   END IF;
  --   SET NEW.C_ContentID = _ContentID;
  -- END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.C_ContentTypeID IS NULL
  --      )
  --     OR
  --     (NEW.C_ContentTypeID < 1
  --      )
  --     )
  -- THEN
  --   SET NEW.C_ContentTypeID = 1;
  -- END IF;
  -- --------------------------------------------------------------------------
  IF ((NEW.C_ContentStatusID IS NULL
       )
      OR
      (NEW.C_ContentStatusID < 1
       )
      )
  THEN
    SET NEW.C_ContentStatusID = 1;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    3,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentMediumText',
    CONCAT('Insert',
           'NEW.C_ContentID=',
           NEW.C_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbu_ec_C_ContentMediumText;
DELIMITER //
CREATE TRIGGER   tbu_ec_C_ContentMediumText
BEFORE UPDATE ON ec_C_ContentMediumText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.C_EntryCreatedTime = OLD.C_EntryCreatedTime;
  SET NEW.C_EntryUpdatedTime = CURRENT_TIMESTAMP();
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    5,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentMediumText',
    CONCAT('Update',
           'NEW.C_ContentID=',
           NEW.C_ContentID,
           'OLD.C_ContentID=',
           OLD.C_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbd_ec_C_ContentMediumText;
DELIMITER //
CREATE TRIGGER   tbd_ec_C_ContentMediumText
BEFORE DELETE ON ec_C_ContentMediumText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    7,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentMediumText',
    CONCAT('Delete',
           'OLD.C_ContentID=',
           OLD.C_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tai_ec_C_ContentMediumText;
DELIMITER //
CREATE TRIGGER   tai_ec_C_ContentMediumText
AFTER INSERT ON  ec_C_ContentMediumText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    4,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentMediumText',
    CONCAT('Insert',
           'NEW.C_ContentID=',
           NEW.C_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tau_ec_C_ContentMediumText;
DELIMITER //
CREATE TRIGGER   tau_ec_C_ContentMediumText
AFTER UPDATE ON  ec_C_ContentMediumText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    6,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentMediumText',
    CONCAT('Update',
           'NEW.C_ContentID=',
           NEW.C_ContentID,
           'OLD.C_ContentID=',
           OLD.C_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tad_ec_C_ContentMediumText;
DELIMITER //
CREATE TRIGGER   tad_ec_C_ContentMediumText
AFTER DELETE ON  ec_C_ContentMediumText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    8,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentMediumText',
    CONCAT('Delete',
           'OLD.C_ContentID=',
           OLD.C_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_C_ContentMediumText
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  AUTO_INCREMENT = 100
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_C_ContentMediumText
MODIFY COLUMN
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  C_ContentID                           BIGINT DEFAULT 0              NOT NULL
                                        AUTO_INCREMENT
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbi_ec_C_ContentMediumTextFullText;
DELIMITER //
CREATE TRIGGER   tbi_ec_C_ContentMediumTextFullText
BEFORE INSERT ON ec_C_ContentMediumTextFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _ContentID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.Cft_EntryCreatedTime = CURRENT_TIMESTAMP();
  SET NEW.Cft_EntryUpdatedTime = '0000-00-00 00:00:00';
  -- --------------------------------------------------------------------------
  IF ((NEW.Cft_ContentID IS NULL
       )
      OR
      (NEW.Cft_ContentID != 0
       )
      )
  THEN
    SET _ContentID =
    sqlGetId3(NEW.Cft_ContentTitle,
              NEW.Cft_ProductID,
              NEW.Cft_ContentEdition -- ,
              -- NEW.Cft_ContentStandardCode
              );
    -- CAST(CONV(SUBSTRING(MD5(CONCAT(NEW.Cft_ContentTitle,
    --                                NEW.Cft_ProductID,
    --                                NEW.Cft_ContentEdition -- ,
    --                                -- NEW.Cft_ContentStandardCode
    --                                )
    --                         ),
    --                     1,15
    --                     ),
    --           16,10
    --           )
    --      AS UNSIGNED INTEGER
    --      );
    IF (_ContentID IS NULL)
    THEN
      SET _ContentID = 0;
    END IF;
    SET NEW.Cft_ContentID = _ContentID;
  END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.Cft_ContentID IS NULL
  --      )
  --     -- OR
  --     -- (NEW.Cft_ContentID = 0
  --     --  )
  --     )
  -- THEN
  --   SELECT
  --     MAX(ec_C_ContentMediumTextFullText.Cft_ContentID)+1
  --   INTO
  --     _ContentID
  --   FROM
  --     ec_C_ContentMediumTextFullText;
  --   IF (_ContentID IS NULL)
  --   THEN
  --     SET _ContentID = 0;
  --   END IF;
  --   SET NEW.Cft_ContentID = _ContentID;
  -- END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    3,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentMediumTextFullText',
    CONCAT('Insert',
           'NEW.Cft_ContentID=',
           NEW.Cft_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbu_ec_C_ContentMediumTextFullText;
DELIMITER //
CREATE TRIGGER   tbu_ec_C_ContentMediumTextFullText
BEFORE UPDATE ON ec_C_ContentMediumTextFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.Cft_EntryCreatedTime = OLD.Cft_EntryCreatedTime;
  SET NEW.Cft_EntryUpdatedTime = CURRENT_TIMESTAMP();
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    5,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentMediumTextFullText',
    CONCAT('Update',
           'NEW.Cft_ContentID=',
           NEW.Cft_ContentID,
           'OLD.Cft_ContentID=',
           OLD.Cft_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbd_ec_C_ContentMediumTextFullText;
DELIMITER //
CREATE TRIGGER   tbd_ec_C_ContentMediumTextFullText
BEFORE DELETE ON ec_C_ContentMediumTextFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    7,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentMediumTextFullText',
    CONCAT('Delete',
           'OLD.Cft_ContentID=',
           OLD.Cft_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tai_ec_C_ContentMediumTextFullText;
DELIMITER //
CREATE TRIGGER   tai_ec_C_ContentMediumTextFullText
AFTER INSERT ON  ec_C_ContentMediumTextFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    4,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentMediumTextFullText',
    CONCAT('Insert',
           'NEW.Cft_ContentID=',
           NEW.Cft_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tau_ec_C_ContentMediumTextFullText;
DELIMITER //
CREATE TRIGGER   tau_ec_C_ContentMediumTextFullText
AFTER UPDATE ON  ec_C_ContentMediumTextFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    6,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentMediumTextFullText',
    CONCAT('Update',
           'NEW.Cft_ContentID=',
           NEW.Cft_ContentID,
           'OLD.Cft_ContentID=',
           OLD.Cft_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tad_ec_C_ContentMediumTextFullText;
DELIMITER //
CREATE TRIGGER   tad_ec_C_ContentMediumTextFullText
AFTER DELETE ON  ec_C_ContentMediumTextFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    8,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentMediumTextFullText',
    CONCAT('Delete',
           'OLD.Cft_ContentID=',
           OLD.Cft_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_C_ContentMediumTextFullText
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  AUTO_INCREMENT = 100
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_C_ContentMediumTextFullText
MODIFY COLUMN
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  Cft_ContentID                         BIGINT DEFAULT 0              NOT NULL
                                        AUTO_INCREMENT
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP PROCEDURE IF EXISTS sp_ec_C_ContentMediumText;
DELIMITER //
CREATE PROCEDURE sp_ec_C_ContentMediumText(
  -- --------------------------------------------------------------------------
  _ContentTitle        VARCHAR(255),
  -- _ContentTypeID    BIGINT,
  -- --------------------------------------------------------------------------
  __ProductID            BIGINT,
  __OrganizationID       BIGINT,
  _ProductTitle          VARCHAR(255),
  -- _ProductTypeID      BIGINT,
  _OrganizationName      VARCHAR(255),
  _ProductEdition        SMALLINT,
  _ProductStandardCode   VARCHAR(255),
  -- _ProductPublishDate VARCHAR(255),
  -- _ProductBasePricing NUMERIC(16,2),
  -- _ProductStatusID    BIGINT,
  -- _ProductReference   VARCHAR(1024),
  -- _Description        VARCHAR(1024)
  -- _Order              BIGINT,
  -- _Description        VARCHAR(1024)
  -- --------------------------------------------------------------------------
  _ContentEdition      SMALLINT,
  -- _ContentStandardCode VARCHAR(255),
  _ContentPublishDate  VARCHAR(255),
  _ContentBasePricing  NUMERIC(16,2),
  _ContentStatusID     BIGINT,
  _ContentMediumText   MEDIUMTEXT,
  _ContentMIMEsetting  VARCHAR(255),
  _Description         VARCHAR(1024)
  -- --------------------------------------------------------------------------
)
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _OrganizationID BIGINT;
  -- --------------------------------------------------------------------------
  DECLARE _ProductID BIGINT;
  -- --------------------------------------------------------------------------
  IF (__OrganizationID IS NOT NULL)
  THEN
    SET _OrganizationID = __OrganizationID;
  ELSE
    SET _OrganizationID =
    sqlGetId(_OrganizationName);
    -- CAST(CONV(SUBSTRING(MD5(_OrganizationName),1,15),16,10)
    --      AS UNSIGNED INTEGER);
  END IF;
  -- --------------------------------------------------------------------------
  IF (__ProductID IS NOT NULL)
  THEN
    SET _ProductID = __ProductID;
  ELSE
    SET _ProductID =
    sqlGetId4(_OrganizationID,
              _ProductTitle,
              _ProductEdition,
              _ProductStandardCode
              );
    -- CAST(CONV(SUBSTRING(MD5(CONCAT(_OrganizationID,
    --                                _ProductTitle,
    --                                _ProductEdition,
    --                                _ProductStandardCode
    --                                )
    --                         ),
    --                     1,15
    --                     ),
    --           16,10
    --           )
    --      AS UNSIGNED INTEGER
    --      );
  END IF;
  -- --------------------------------------------------------------------------
  INSERT INTO ec_C_ContentMediumText(
    C_ContentTitle,
    -- C_ContentTypeID,
    C_ProductID,
    C_ContentEdition,
    -- C_ContentStandardCode,
    C_ContentPublishDate,
    C_ContentBasePricing,
    C_ContentStatusID,
    C_ContentMediumText,
    C_ContentMIMEsetting,
    C_Description
  ) VALUES (
    _ContentTitle,
    -- _ContentTypeID,
    _ProductID,
    _ContentEdition,
    -- _ContentStandardCode,
    _ContentPublishDate,
    _ContentBasePricing,
    _ContentStatusID,
    _ContentMediumText,
    _ContentMIMEsetting,
    _Description
  );
  -- --------------------------------------------------------------------------
  INSERT INTO ec_C_ContentMediumTextFullText(
    Cft_ContentTitle,
    Cft_ProductID,
    Cft_ContentEdition,
    -- Cft_ContentStandardCode,
    Cft_ContentPublishDate,
    Cft_ContentMediumText,
    Cft_Description
  ) VALUES (
    _ContentTitle,
    _ProductID,
    _ContentEdition,
    -- _ContentStandardCode,
    _ContentPublishDate,
    _ContentMediumText,
    _Description
  );
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbi_ec_C_ContentLongText;
DELIMITER //
CREATE TRIGGER   tbi_ec_C_ContentLongText
BEFORE INSERT ON ec_C_ContentLongText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _ContentID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.C_EntryCreatedTime = CURRENT_TIMESTAMP();
  SET NEW.C_EntryUpdatedTime = '0000-00-00 00:00:00';
  -- --------------------------------------------------------------------------
  IF ((NEW.C_ContentID IS NULL
       )
      OR
      (NEW.C_ContentID != 0
       )
      )
  THEN
    SET _ContentID =
    sqlGetId3(NEW.C_ContentTitle,
              NEW.C_ProductID,
              NEW.C_ContentEdition -- ,
              -- NEW.C_ContentStandardCode
              );
    -- CAST(CONV(SUBSTRING(MD5(CONCAT(NEW.C_ContentTitle,
    --                                NEW.C_ProductID,
    --                                NEW.C_ContentEdition -- ,
    --                                -- NEW.C_ContentStandardCode
    --                                )
    --                         ),
    --                     1,15
    --                     ),
    --           16,10
    --           )
    --      AS UNSIGNED INTEGER
    --      );
    IF (_ContentID IS NULL)
    THEN
      SET _ContentID = 0;
    END IF;
    SET NEW.C_ContentID = _ContentID;
  END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.C_ContentID IS NULL
  --      )
  --     -- OR
  --     -- (NEW.C_ContentID = 0
  --     --  )
  --     )
  -- THEN
  --   SELECT
  --     MAX(ec_C_Content.C_ContentID)+1
  --   INTO
  --     _ContentID
  --   FROM
  --     ec_C_ContentLongText;
  --   IF (_ContentID IS NULL)
  --   THEN
  --     SET _ContentID = 0;
  --   END IF;
  --   SET NEW.C_ContentID = _ContentID;
  -- END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.C_ContentTypeID IS NULL
  --      )
  --     OR
  --     (NEW.C_ContentTypeID < 1
  --      )
  --     )
  -- THEN
  --   SET NEW.C_ContentTypeID = 1;
  -- END IF;
  -- --------------------------------------------------------------------------
  IF ((NEW.C_ContentStatusID IS NULL
       )
      OR
      (NEW.C_ContentStatusID < 1
       )
      )
  THEN
    SET NEW.C_ContentStatusID = 1;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    3,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentLongText',
    CONCAT('Insert',
           'NEW.C_ContentID=',
           NEW.C_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbu_ec_C_ContentLongText;
DELIMITER //
CREATE TRIGGER   tbu_ec_C_ContentLongText
BEFORE UPDATE ON ec_C_ContentLongText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.C_EntryCreatedTime = OLD.C_EntryCreatedTime;
  SET NEW.C_EntryUpdatedTime = CURRENT_TIMESTAMP();
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    5,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentLongText',
    CONCAT('Update',
           'NEW.C_ContentID=',
           NEW.C_ContentID,
           'OLD.C_ContentID=',
           OLD.C_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbd_ec_C_ContentLongText;
DELIMITER //
CREATE TRIGGER   tbd_ec_C_ContentLongText
BEFORE DELETE ON ec_C_ContentLongText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    7,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentLongText',
    CONCAT('Delete',
           'OLD.C_ContentID=',
           OLD.C_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tai_ec_C_ContentLongText;
DELIMITER //
CREATE TRIGGER   tai_ec_C_ContentLongText
AFTER INSERT ON  ec_C_ContentLongText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    4,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentLongText',
    CONCAT('Insert',
           'NEW.C_ContentID=',
           NEW.C_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tau_ec_C_ContentLongText;
DELIMITER //
CREATE TRIGGER   tau_ec_C_ContentLongText
AFTER UPDATE ON  ec_C_ContentLongText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    6,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentLongText',
    CONCAT('Update',
           'NEW.C_ContentID=',
           NEW.C_ContentID,
           'OLD.C_ContentID=',
           OLD.C_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tad_ec_C_ContentLongText;
DELIMITER //
CREATE TRIGGER   tad_ec_C_ContentLongText
AFTER DELETE ON  ec_C_ContentLongText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    8,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentLongText',
    CONCAT('Delete',
           'OLD.C_ContentID=',
           OLD.C_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_C_ContentLongText
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  AUTO_INCREMENT = 100
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_C_ContentLongText
MODIFY COLUMN
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  C_ContentID                           BIGINT DEFAULT 0              NOT NULL
                                        AUTO_INCREMENT
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbi_ec_C_ContentLongTextFullText;
DELIMITER //
CREATE TRIGGER   tbi_ec_C_ContentLongTextFullText
BEFORE INSERT ON ec_C_ContentLongTextFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _ContentID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.Cft_EntryCreatedTime = CURRENT_TIMESTAMP();
  SET NEW.Cft_EntryUpdatedTime = '0000-00-00 00:00:00';
  -- --------------------------------------------------------------------------
  IF ((NEW.Cft_ContentID IS NULL
       )
      OR
      (NEW.Cft_ContentID != 0
       )
      )
  THEN
    SET _ContentID =
    sqlGetId3(NEW.Cft_ContentTitle,
              NEW.Cft_ProductID,
              NEW.Cft_ContentEdition -- ,
              -- NEW.Cft_ContentStandardCode
              );
    -- CAST(CONV(SUBSTRING(MD5(CONCAT(NEW.Cft_ContentTitle,
    --                                NEW.Cft_ProductID,
    --                                NEW.Cft_ContentEdition -- ,
    --                                -- NEW.Cft_ContentStandardCode
    --                                )
    --                         ),
    --                     1,15
    --                     ),
    --           16,10
    --           )
    --      AS UNSIGNED INTEGER
    --      );
    IF (_ContentID IS NULL)
    THEN
      SET _ContentID = 0;
    END IF;
    SET NEW.Cft_ContentID = _ContentID;
  END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.Cft_ContentID IS NULL
  --      )
  --     -- OR
  --     -- (NEW.Cft_ContentID = 0
  --     --  )
  --     )
  -- THEN
  --   SELECT
  --     MAX(ec_C_ContentLongTextFullText.Cft_ContentID)+1
  --   INTO
  --     _ContentID
  --   FROM
  --     ec_C_ContentLongTextFullText;
  --   IF (_ContentID IS NULL)
  --   THEN
  --     SET _ContentID = 0;
  --   END IF;
  --   SET NEW.Cft_ContentID = _ContentID;
  -- END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    3,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentLongTextFullText',
    CONCAT('Insert',
           'NEW.Cft_ContentID=',
           NEW.Cft_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbu_ec_C_ContentLongTextFullText;
DELIMITER //
CREATE TRIGGER   tbu_ec_C_ContentLongTextFullText
BEFORE UPDATE ON ec_C_ContentLongTextFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.Cft_EntryCreatedTime = OLD.Cft_EntryCreatedTime;
  SET NEW.Cft_EntryUpdatedTime = CURRENT_TIMESTAMP();
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    5,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentLongTextFullText',
    CONCAT('Update',
           'NEW.Cft_ContentID=',
           NEW.Cft_ContentID,
           'OLD.Cft_ContentID=',
           OLD.Cft_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbd_ec_C_ContentLongTextFullText;
DELIMITER //
CREATE TRIGGER   tbd_ec_C_ContentLongTextFullText
BEFORE DELETE ON ec_C_ContentLongTextFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    7,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentLongTextFullText',
    CONCAT('Delete',
           'OLD.Cft_ContentID=',
           OLD.Cft_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tai_ec_C_ContentLongTextFullText;
DELIMITER //
CREATE TRIGGER   tai_ec_C_ContentLongTextFullText
AFTER INSERT ON  ec_C_ContentLongTextFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    4,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentLongTextFullText',
    CONCAT('Insert',
           'NEW.Cft_ContentID=',
           NEW.Cft_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tau_ec_C_ContentLongTextFullText;
DELIMITER //
CREATE TRIGGER   tau_ec_C_ContentLongTextFullText
AFTER UPDATE ON  ec_C_ContentLongTextFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    6,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentLongTextFullText',
    CONCAT('Update',
           'NEW.Cft_ContentID=',
           NEW.Cft_ContentID,
           'OLD.Cft_ContentID=',
           OLD.Cft_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tad_ec_C_ContentLongTextFullText;
DELIMITER //
CREATE TRIGGER   tad_ec_C_ContentLongTextFullText
AFTER DELETE ON  ec_C_ContentLongTextFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    8,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentLongTextFullText',
    CONCAT('Delete',
           'OLD.Cft_ContentID=',
           OLD.Cft_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_C_ContentLongTextFullText
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  AUTO_INCREMENT = 100
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_C_ContentLongTextFullText
MODIFY COLUMN
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  Cft_ContentID                         BIGINT DEFAULT 0              NOT NULL
                                        AUTO_INCREMENT
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP PROCEDURE IF EXISTS sp_ec_C_ContentLongText;
DELIMITER //
CREATE PROCEDURE sp_ec_C_ContentLongText(
  -- --------------------------------------------------------------------------
  _ContentTitle        VARCHAR(255),
  -- _ContentTypeID    BIGINT,
  -- --------------------------------------------------------------------------
  __ProductID            BIGINT,
  __OrganizationID       BIGINT,
  _ProductTitle          VARCHAR(255),
  -- _ProductTypeID      BIGINT,
  _OrganizationName      VARCHAR(255),
  _ProductEdition        SMALLINT,
  _ProductStandardCode   VARCHAR(255),
  -- _ProductPublishDate VARCHAR(255),
  -- _ProductBasePricing NUMERIC(16,2),
  -- _ProductStatusID    BIGINT,
  -- _ProductReference   VARCHAR(1024),
  -- _Description        VARCHAR(1024)
  -- _Order              BIGINT,
  -- _Description        VARCHAR(1024)
  -- --------------------------------------------------------------------------
  _ContentEdition      SMALLINT,
  -- _ContentStandardCode VARCHAR(255),
  _ContentPublishDate  VARCHAR(255),
  _ContentBasePricing  NUMERIC(16,2),
  _ContentStatusID     BIGINT,
  _ContentLongText     LONGTEXT,
  _ContentMIMEsetting  VARCHAR(255),
  _Description         VARCHAR(1024)
  -- --------------------------------------------------------------------------
)
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _OrganizationID BIGINT;
  -- --------------------------------------------------------------------------
  DECLARE _ProductID BIGINT;
  -- --------------------------------------------------------------------------
  IF (__OrganizationID IS NOT NULL)
  THEN
    SET _OrganizationID = __OrganizationID;
  ELSE
    SET _OrganizationID =
    sqlGetId(_OrganizationName);
    -- CAST(CONV(SUBSTRING(MD5(_OrganizationName),1,15),16,10)
    --      AS UNSIGNED INTEGER);
  END IF;
  -- --------------------------------------------------------------------------
  IF (__ProductID IS NOT NULL)
  THEN
    SET _ProductID = __ProductID;
  ELSE
    SET _ProductID =
    sqlGetId4(_OrganizationID,
              _ProductTitle,
              _ProductEdition,
              _ProductStandardCode
              );
    -- CAST(CONV(SUBSTRING(MD5(CONCAT(_OrganizationID,
    --                                _ProductTitle,
    --                                _ProductEdition,
    --                                _ProductStandardCode
    --                                )
    --                         ),
    --                     1,15
    --                     ),
    --           16,10
    --           )
    --      AS UNSIGNED INTEGER
    --      );
  END IF;
  -- --------------------------------------------------------------------------
  INSERT INTO ec_C_ContentLongText(
    C_ContentTitle,
    -- C_ContentTypeID,
    C_ProductID,
    C_ContentEdition,
    -- C_ContentStandardCode,
    C_ContentPublishDate,
    C_ContentBasePricing,
    C_ContentStatusID,
    C_ContentLongText,
    C_ContentMIMEsetting,
    C_Description
  ) VALUES (
    _ContentTitle,
    -- _ContentTypeID,
    _ProductID,
    _ContentEdition,
    -- _ContentStandardCode,
    _ContentPublishDate,
    _ContentBasePricing,
    _ContentStatusID,
    _ContentLongText,
    _ContentMIMEsetting,
    _Description
  );
  -- --------------------------------------------------------------------------
  INSERT INTO ec_C_ContentLongTextFullText(
    Cft_ContentTitle,
    Cft_ProductID,
    Cft_ContentEdition,
    -- Cft_ContentStandardCode,
    Cft_ContentPublishDate,
    Cft_ContentLongText,
    Cft_Description
  ) VALUES (
    _ContentTitle,
    _ProductID,
    _ContentEdition,
    -- _ContentStandardCode,
    _ContentPublishDate,
    _ContentLongText,
    _Description
  );
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbi_ec_C_ContentBlob;
DELIMITER //
CREATE TRIGGER   tbi_ec_C_ContentBlob
BEFORE INSERT ON ec_C_ContentBlob
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _ContentID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.C_EntryCreatedTime = CURRENT_TIMESTAMP();
  SET NEW.C_EntryUpdatedTime = '0000-00-00 00:00:00';
  -- --------------------------------------------------------------------------
  IF ((NEW.C_ContentID IS NULL
       )
      OR
      (NEW.C_ContentID != 0
       )
      )
  THEN
    SET _ContentID =
    sqlGetId3(NEW.C_ContentTitle,
              NEW.C_ProductID,
              NEW.C_ContentEdition -- ,
              -- NEW.C_ContentStandardCode
              );
    -- CAST(CONV(SUBSTRING(MD5(CONCAT(NEW.C_ContentTitle,
    --                                NEW.C_ProductID,
    --                                NEW.C_ContentEdition -- ,
    --                                -- NEW.C_ContentStandardCode
    --                                )
    --                         ),
    --                     1,15
    --                     ),
    --           16,10
    --           )
    --      AS UNSIGNED INTEGER
    --      );
    IF (_ContentID IS NULL)
    THEN
      SET _ContentID = 0;
    END IF;
    SET NEW.C_ContentID = _ContentID;
  END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.C_ContentID IS NULL
  --      )
  --     -- OR
  --     -- (NEW.C_ContentID = 0
  --     --  )
  --     )
  -- THEN
  --   SELECT
  --     MAX(ec_C_Content.C_ContentID)+1
  --   INTO
  --     _ContentID
  --   FROM
  --     ec_C_ContentBlob;
  --   IF (_ContentID IS NULL)
  --   THEN
  --     SET _ContentID = 0;
  --   END IF;
  --   SET NEW.C_ContentID = _ContentID;
  -- END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.C_ContentTypeID IS NULL
  --      )
  --     OR
  --     (NEW.C_ContentTypeID < 1
  --      )
  --     )
  -- THEN
  --   SET NEW.C_ContentTypeID = 1;
  -- END IF;
  -- --------------------------------------------------------------------------
  IF ((NEW.C_ContentStatusID IS NULL
       )
      OR
      (NEW.C_ContentStatusID < 1
       )
      )
  THEN
    SET NEW.C_ContentStatusID = 1;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    3,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentBlob',
    CONCAT('Insert',
           'NEW.C_ContentID=',
           NEW.C_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbu_ec_C_ContentBlob;
DELIMITER //
CREATE TRIGGER   tbu_ec_C_ContentBlob
BEFORE UPDATE ON ec_C_ContentBlob
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.C_EntryCreatedTime = OLD.C_EntryCreatedTime;
  SET NEW.C_EntryUpdatedTime = CURRENT_TIMESTAMP();
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    5,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentBlob',
    CONCAT('Update',
           'NEW.C_ContentID=',
           NEW.C_ContentID,
           'OLD.C_ContentID=',
           OLD.C_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbd_ec_C_ContentBlob;
DELIMITER //
CREATE TRIGGER   tbd_ec_C_ContentBlob
BEFORE DELETE ON ec_C_ContentBlob
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    7,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentBlob',
    CONCAT('Delete',
           'OLD.C_ContentID=',
           OLD.C_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tai_ec_C_ContentBlob;
DELIMITER //
CREATE TRIGGER   tai_ec_C_ContentBlob
AFTER INSERT ON  ec_C_ContentBlob
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    4,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentBlob',
    CONCAT('Insert',
           'NEW.C_ContentID=',
           NEW.C_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tau_ec_C_ContentBlob;
DELIMITER //
CREATE TRIGGER   tau_ec_C_ContentBlob
AFTER UPDATE ON  ec_C_ContentBlob
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    6,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentBlob',
    CONCAT('Update',
           'NEW.C_ContentID=',
           NEW.C_ContentID,
           'OLD.C_ContentID=',
           OLD.C_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tad_ec_C_ContentBlob;
DELIMITER //
CREATE TRIGGER   tad_ec_C_ContentBlob
AFTER DELETE ON  ec_C_ContentBlob
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    8,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentBlob',
    CONCAT('Delete',
           'OLD.C_ContentID=',
           OLD.C_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_C_ContentBlob
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  AUTO_INCREMENT = 100
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_C_ContentBlob
MODIFY COLUMN
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  C_ContentID                           BIGINT DEFAULT 0              NOT NULL
                                        AUTO_INCREMENT
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbi_ec_C_ContentBlobFullText;
DELIMITER //
CREATE TRIGGER   tbi_ec_C_ContentBlobFullText
BEFORE INSERT ON ec_C_ContentBlobFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _ContentID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.Cft_EntryCreatedTime = CURRENT_TIMESTAMP();
  SET NEW.Cft_EntryUpdatedTime = '0000-00-00 00:00:00';
  -- --------------------------------------------------------------------------
  IF ((NEW.Cft_ContentID IS NULL
       )
      OR
      (NEW.Cft_ContentID != 0
       )
      )
  THEN
    SET _ContentID =
    sqlGetId3(NEW.Cft_ContentTitle,
              NEW.Cft_ProductID,
              NEW.Cft_ContentEdition -- ,
              -- NEW.Cft_ContentStandardCode
              );
    -- CAST(CONV(SUBSTRING(MD5(CONCAT(NEW.Cft_ContentTitle,
    --                                NEW.Cft_ProductID,
    --                                NEW.Cft_ContentEdition -- ,
    --                                -- NEW.Cft_ContentStandardCode
    --                                )
    --                         ),
    --                     1,15
    --                     ),
    --           16,10
    --           )
    --      AS UNSIGNED INTEGER
    --      );
    IF (_ContentID IS NULL)
    THEN
      SET _ContentID = 0;
    END IF;
    SET NEW.Cft_ContentID = _ContentID;
  END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.Cft_ContentID IS NULL
  --      )
  --     -- OR
  --     -- (NEW.Cft_ContentID = 0
  --     --  )
  --     )
  -- THEN
  --   SELECT
  --     MAX(ec_C_ContentBlobFullText.Cft_ContentID)+1
  --   INTO
  --     _ContentID
  --   FROM
  --     ec_C_ContentBlobFullText;
  --   IF (_ContentID IS NULL)
  --   THEN
  --     SET _ContentID = 0;
  --   END IF;
  --   SET NEW.Cft_ContentID = _ContentID;
  -- END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    3,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentBlobFullText',
    CONCAT('Insert',
           'NEW.Cft_ContentID=',
           NEW.Cft_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbu_ec_C_ContentBlobFullText;
DELIMITER //
CREATE TRIGGER   tbu_ec_C_ContentBlobFullText
BEFORE UPDATE ON ec_C_ContentBlobFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.Cft_EntryCreatedTime = OLD.Cft_EntryCreatedTime;
  SET NEW.Cft_EntryUpdatedTime = CURRENT_TIMESTAMP();
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    5,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentBlobFullText',
    CONCAT('Update',
           'NEW.Cft_ContentID=',
           NEW.Cft_ContentID,
           'OLD.Cft_ContentID=',
           OLD.Cft_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbd_ec_C_ContentBlobFullText;
DELIMITER //
CREATE TRIGGER   tbd_ec_C_ContentBlobFullText
BEFORE DELETE ON ec_C_ContentBlobFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    7,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentBlobFullText',
    CONCAT('Delete',
           'OLD.Cft_ContentID=',
           OLD.Cft_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tai_ec_C_ContentBlobFullText;
DELIMITER //
CREATE TRIGGER   tai_ec_C_ContentBlobFullText
AFTER INSERT ON  ec_C_ContentBlobFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    4,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentBlobFullText',
    CONCAT('Insert',
           'NEW.Cft_ContentID=',
           NEW.Cft_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tau_ec_C_ContentBlobFullText;
DELIMITER //
CREATE TRIGGER   tau_ec_C_ContentBlobFullText
AFTER UPDATE ON  ec_C_ContentBlobFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    6,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentBlobFullText',
    CONCAT('Update',
           'NEW.Cft_ContentID=',
           NEW.Cft_ContentID,
           'OLD.Cft_ContentID=',
           OLD.Cft_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tad_ec_C_ContentBlobFullText;
DELIMITER //
CREATE TRIGGER   tad_ec_C_ContentBlobFullText
AFTER DELETE ON  ec_C_ContentBlobFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    8,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentBlobFullText',
    CONCAT('Delete',
           'OLD.Cft_ContentID=',
           OLD.Cft_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_C_ContentBlobFullText
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  AUTO_INCREMENT = 100
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_C_ContentBlobFullText
MODIFY COLUMN
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  Cft_ContentID                         BIGINT DEFAULT 0              NOT NULL
                                        AUTO_INCREMENT
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP PROCEDURE IF EXISTS sp_ec_C_ContentBlob;
DELIMITER //
CREATE PROCEDURE sp_ec_C_ContentBlob(
  -- --------------------------------------------------------------------------
  _ContentTitle        VARCHAR(255),
  -- _ContentTypeID    BIGINT,
  -- --------------------------------------------------------------------------
  __ProductID            BIGINT,
  __OrganizationID       BIGINT,
  _ProductTitle          VARCHAR(255),
  -- _ProductTypeID      BIGINT,
  _OrganizationName      VARCHAR(255),
  _ProductEdition        SMALLINT,
  _ProductStandardCode   VARCHAR(255),
  -- _ProductPublishDate VARCHAR(255),
  -- _ProductBasePricing NUMERIC(16,2),
  -- _ProductStatusID    BIGINT,
  -- _ProductReference   VARCHAR(1024),
  -- _Description        VARCHAR(1024)
  -- _Order              BIGINT,
  -- _Description        VARCHAR(1024)
  -- --------------------------------------------------------------------------
  _ContentEdition      SMALLINT,
  -- _ContentStandardCode VARCHAR(255),
  _ContentPublishDate  VARCHAR(255),
  _ContentBasePricing  NUMERIC(16,2),
  _ContentStatusID     BIGINT,
  _ContentBlob         BLOB,
  _ContentMIMEsetting  VARCHAR(255),
  _Description         VARCHAR(1024)
  -- --------------------------------------------------------------------------
)
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _OrganizationID BIGINT;
  -- --------------------------------------------------------------------------
  DECLARE _ProductID BIGINT;
  -- --------------------------------------------------------------------------
  IF (__OrganizationID IS NOT NULL)
  THEN
    SET _OrganizationID = __OrganizationID;
  ELSE
    SET _OrganizationID =
    sqlGetId(_OrganizationName);
    -- CAST(CONV(SUBSTRING(MD5(_OrganizationName),1,15),16,10)
    --      AS UNSIGNED INTEGER);
  END IF;
  -- --------------------------------------------------------------------------
  IF (__ProductID IS NOT NULL)
  THEN
    SET _ProductID = __ProductID;
  ELSE
    SET _ProductID =
    sqlGetId4(_OrganizationID,
              _ProductTitle,
              _ProductEdition,
              _ProductStandardCode
              );
    -- CAST(CONV(SUBSTRING(MD5(CONCAT(_OrganizationID,
    --                                _ProductTitle,
    --                                _ProductEdition,
    --                                _ProductStandardCode
    --                                )
    --                         ),
    --                     1,15
    --                     ),
    --           16,10
    --           )
    --      AS UNSIGNED INTEGER
    --      );
  END IF;
  -- --------------------------------------------------------------------------
  INSERT INTO ec_C_ContentBlob(
    C_ContentTitle,
    -- C_ContentTypeID,
    C_ProductID,
    C_ContentEdition,
    -- C_ContentStandardCode,
    C_ContentPublishDate,
    C_ContentBasePricing,
    C_ContentStatusID,
    C_ContentBlob,
    C_ContentMIMEsetting,
    C_Description
  ) VALUES (
    _ContentTitle,
    -- _ContentTypeID,
    _ProductID,
    _ContentEdition,
    -- _ContentStandardCode,
    _ContentPublishDate,
    _ContentBasePricing,
    _ContentStatusID,
    _ContentBlob,
    _ContentMIMEsetting,
    _Description
  );
  -- --------------------------------------------------------------------------
  INSERT INTO ec_C_ContentBlobFullText(
    Cft_ContentTitle,
    Cft_ProductID,
    Cft_ContentEdition,
    -- Cft_ContentStandardCode,
    Cft_ContentPublishDate,
    Cft_ContentBlob,
    Cft_Description
  ) VALUES (
    _ContentTitle,
    _ProductID,
    _ContentEdition,
    -- _ContentStandardCode,
    _ContentPublishDate,
    _ContentBlob,
    _Description
  );
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbi_ec_C_ContentTinyBlob;
DELIMITER //
CREATE TRIGGER   tbi_ec_C_ContentTinyBlob
BEFORE INSERT ON ec_C_ContentTinyBlob
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _ContentID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.C_EntryCreatedTime = CURRENT_TIMESTAMP();
  SET NEW.C_EntryUpdatedTime = '0000-00-00 00:00:00';
  -- --------------------------------------------------------------------------
  IF ((NEW.C_ContentID IS NULL
       )
      OR
      (NEW.C_ContentID != 0
       )
      )
  THEN
    SET _ContentID =
    sqlGetId3(NEW.C_ContentTitle,
              NEW.C_ProductID,
              NEW.C_ContentEdition -- ,
              -- NEW.C_ContentStandardCode
              );
    -- CAST(CONV(SUBSTRING(MD5(CONCAT(NEW.C_ContentTitle,
    --                                NEW.C_ProductID,
    --                                NEW.C_ContentEdition -- ,
    --                                -- NEW.C_ContentStandardCode
    --                                )
    --                         ),
    --                     1,15
    --                     ),
    --           16,10
    --           )
    --      AS UNSIGNED INTEGER
    --      );
    IF (_ContentID IS NULL)
    THEN
      SET _ContentID = 0;
    END IF;
    SET NEW.C_ContentID = _ContentID;
  END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.C_ContentID IS NULL
  --      )
  --     -- OR
  --     -- (NEW.C_ContentID = 0
  --     --  )
  --     )
  -- THEN
  --   SELECT
  --     MAX(ec_C_Content.C_ContentID)+1
  --   INTO
  --     _ContentID
  --   FROM
  --     ec_C_ContentTinyBlob;
  --   IF (_ContentID IS NULL)
  --   THEN
  --     SET _ContentID = 0;
  --   END IF;
  --   SET NEW.C_ContentID = _ContentID;
  -- END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.C_ContentTypeID IS NULL
  --      )
  --     OR
  --     (NEW.C_ContentTypeID < 1
  --      )
  --     )
  -- THEN
  --   SET NEW.C_ContentTypeID = 1;
  -- END IF;
  -- --------------------------------------------------------------------------
  IF ((NEW.C_ContentStatusID IS NULL
       )
      OR
      (NEW.C_ContentStatusID < 1
       )
      )
  THEN
    SET NEW.C_ContentStatusID = 1;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    3,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentTinyBlob',
    CONCAT('Insert',
           'NEW.C_ContentID=',
           NEW.C_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbu_ec_C_ContentTinyBlob;
DELIMITER //
CREATE TRIGGER   tbu_ec_C_ContentTinyBlob
BEFORE UPDATE ON ec_C_ContentTinyBlob
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.C_EntryCreatedTime = OLD.C_EntryCreatedTime;
  SET NEW.C_EntryUpdatedTime = CURRENT_TIMESTAMP();
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    5,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentTinyBlob',
    CONCAT('Update',
           'NEW.C_ContentID=',
           NEW.C_ContentID,
           'OLD.C_ContentID=',
           OLD.C_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbd_ec_C_ContentTinyBlob;
DELIMITER //
CREATE TRIGGER   tbd_ec_C_ContentTinyBlob
BEFORE DELETE ON ec_C_ContentTinyBlob
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    7,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentTinyBlob',
    CONCAT('Delete',
           'OLD.C_ContentID=',
           OLD.C_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tai_ec_C_ContentTinyBlob;
DELIMITER //
CREATE TRIGGER   tai_ec_C_ContentTinyBlob
AFTER INSERT ON  ec_C_ContentTinyBlob
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    4,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentTinyBlob',
    CONCAT('Insert',
           'NEW.C_ContentID=',
           NEW.C_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tau_ec_C_ContentTinyBlob;
DELIMITER //
CREATE TRIGGER   tau_ec_C_ContentTinyBlob
AFTER UPDATE ON  ec_C_ContentTinyBlob
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    6,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentTinyBlob',
    CONCAT('Update',
           'NEW.C_ContentID=',
           NEW.C_ContentID,
           'OLD.C_ContentID=',
           OLD.C_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tad_ec_C_ContentTinyBlob;
DELIMITER //
CREATE TRIGGER   tad_ec_C_ContentTinyBlob
AFTER DELETE ON  ec_C_ContentTinyBlob
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    8,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentTinyBlob',
    CONCAT('Delete',
           'OLD.C_ContentID=',
           OLD.C_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_C_ContentTinyBlob
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  AUTO_INCREMENT = 100
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_C_ContentTinyBlob
MODIFY COLUMN
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  C_ContentID                           BIGINT DEFAULT 0              NOT NULL
                                        AUTO_INCREMENT
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbi_ec_C_ContentTinyBlobFullText;
DELIMITER //
CREATE TRIGGER   tbi_ec_C_ContentTinyBlobFullText
BEFORE INSERT ON ec_C_ContentTinyBlobFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _ContentID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.Cft_EntryCreatedTime = CURRENT_TIMESTAMP();
  SET NEW.Cft_EntryUpdatedTime = '0000-00-00 00:00:00';
  -- --------------------------------------------------------------------------
  IF ((NEW.Cft_ContentID IS NULL
       )
      OR
      (NEW.Cft_ContentID != 0
       )
      )
  THEN
    SET _ContentID =
    sqlGetId3(NEW.Cft_ContentTitle,
              NEW.Cft_ProductID,
              NEW.Cft_ContentEdition -- ,
              -- NEW.Cft_ContentStandardCode
              );
    -- CAST(CONV(SUBSTRING(MD5(CONCAT(NEW.Cft_ContentTitle,
    --                                NEW.Cft_ProductID,
    --                                NEW.Cft_ContentEdition -- ,
    --                                -- NEW.Cft_ContentStandardCode
    --                                )
    --                         ),
    --                     1,15
    --                     ),
    --           16,10
    --           )
    --      AS UNSIGNED INTEGER
    --      );
    IF (_ContentID IS NULL)
    THEN
      SET _ContentID = 0;
    END IF;
    SET NEW.Cft_ContentID = _ContentID;
  END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.Cft_ContentID IS NULL
  --      )
  --     -- OR
  --     -- (NEW.Cft_ContentID = 0
  --     --  )
  --     )
  -- THEN
  --   SELECT
  --     MAX(ec_C_ContentTinyBlobFullText.Cft_ContentID)+1
  --   INTO
  --     _ContentID
  --   FROM
  --     ec_C_ContentTinyBlobFullText;
  --   IF (_ContentID IS NULL)
  --   THEN
  --     SET _ContentID = 0;
  --   END IF;
  --   SET NEW.Cft_ContentID = _ContentID;
  -- END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    3,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentTinyBlobFullText',
    CONCAT('Insert',
           'NEW.Cft_ContentID=',
           NEW.Cft_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbu_ec_C_ContentTinyBlobFullText;
DELIMITER //
CREATE TRIGGER   tbu_ec_C_ContentTinyBlobFullText
BEFORE UPDATE ON ec_C_ContentTinyBlobFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.Cft_EntryCreatedTime = OLD.Cft_EntryCreatedTime;
  SET NEW.Cft_EntryUpdatedTime = CURRENT_TIMESTAMP();
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    5,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentTinyBlobFullText',
    CONCAT('Update',
           'NEW.Cft_ContentID=',
           NEW.Cft_ContentID,
           'OLD.Cft_ContentID=',
           OLD.Cft_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbd_ec_C_ContentTinyBlobFullText;
DELIMITER //
CREATE TRIGGER   tbd_ec_C_ContentTinyBlobFullText
BEFORE DELETE ON ec_C_ContentTinyBlobFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    7,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentTinyBlobFullText',
    CONCAT('Delete',
           'OLD.Cft_ContentID=',
           OLD.Cft_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tai_ec_C_ContentTinyBlobFullText;
DELIMITER //
CREATE TRIGGER   tai_ec_C_ContentTinyBlobFullText
AFTER INSERT ON  ec_C_ContentTinyBlobFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    4,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentTinyBlobFullText',
    CONCAT('Insert',
           'NEW.Cft_ContentID=',
           NEW.Cft_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tau_ec_C_ContentTinyBlobFullText;
DELIMITER //
CREATE TRIGGER   tau_ec_C_ContentTinyBlobFullText
AFTER UPDATE ON  ec_C_ContentTinyBlobFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    6,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentTinyBlobFullText',
    CONCAT('Update',
           'NEW.Cft_ContentID=',
           NEW.Cft_ContentID,
           'OLD.Cft_ContentID=',
           OLD.Cft_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tad_ec_C_ContentTinyBlobFullText;
DELIMITER //
CREATE TRIGGER   tad_ec_C_ContentTinyBlobFullText
AFTER DELETE ON  ec_C_ContentTinyBlobFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    8,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentTinyBlobFullText',
    CONCAT('Delete',
           'OLD.Cft_ContentID=',
           OLD.Cft_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_C_ContentTinyBlobFullText
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  AUTO_INCREMENT = 100
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_C_ContentTinyBlobFullText
MODIFY COLUMN
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  Cft_ContentID                         BIGINT DEFAULT 0              NOT NULL
                                        AUTO_INCREMENT
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP PROCEDURE IF EXISTS sp_ec_C_ContentTinyBlob;
DELIMITER //
CREATE PROCEDURE sp_ec_C_ContentTinyBlob(
  -- --------------------------------------------------------------------------
  _ContentTitle        VARCHAR(255),
  -- _ContentTypeID    BIGINT,
  -- --------------------------------------------------------------------------
  __ProductID            BIGINT,
  __OrganizationID       BIGINT,
  _ProductTitle          VARCHAR(255),
  -- _ProductTypeID      BIGINT,
  _OrganizationName      VARCHAR(255),
  _ProductEdition        SMALLINT,
  _ProductStandardCode   VARCHAR(255),
  -- _ProductPublishDate VARCHAR(255),
  -- _ProductBasePricing NUMERIC(16,2),
  -- _ProductStatusID    BIGINT,
  -- _ProductReference   VARCHAR(1024),
  -- _Description        VARCHAR(1024)
  -- _Order              BIGINT,
  -- _Description        VARCHAR(1024)
  -- --------------------------------------------------------------------------
  _ContentEdition      SMALLINT,
  -- _ContentStandardCode VARCHAR(255),
  _ContentPublishDate  VARCHAR(255),
  _ContentBasePricing  NUMERIC(16,2),
  _ContentStatusID     BIGINT,
  _ContentTinyBlob     TINYBLOB,
  _ContentMIMEsetting  VARCHAR(255),
  _Description         VARCHAR(1024)
  -- --------------------------------------------------------------------------
)
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _OrganizationID BIGINT;
  -- --------------------------------------------------------------------------
  DECLARE _ProductID BIGINT;
  -- --------------------------------------------------------------------------
  IF (__OrganizationID IS NOT NULL)
  THEN
    SET _OrganizationID = __OrganizationID;
  ELSE
    SET _OrganizationID =
    sqlGetId(_OrganizationName);
    -- CAST(CONV(SUBSTRING(MD5(_OrganizationName),1,15),16,10)
    --      AS UNSIGNED INTEGER);
  END IF;
  -- --------------------------------------------------------------------------
  IF (__ProductID IS NOT NULL)
  THEN
    SET _ProductID = __ProductID;
  ELSE
    SET _ProductID =
    sqlGetId4(_OrganizationID,
              _ProductTitle,
              _ProductEdition,
              _ProductStandardCode
              );
    -- CAST(CONV(SUBSTRING(MD5(CONCAT(_OrganizationID,
    --                                _ProductTitle,
    --                                _ProductEdition,
    --                                _ProductStandardCode
    --                                )
    --                         ),
    --                     1,15
    --                     ),
    --           16,10
    --           )
    --      AS UNSIGNED INTEGER
    --      );
  END IF;
  -- --------------------------------------------------------------------------
  INSERT INTO ec_C_ContentTinyBlob(
    C_ContentTitle,
    -- C_ContentTypeID,
    C_ProductID,
    C_ContentEdition,
    -- C_ContentStandardCode,
    C_ContentPublishDate,
    C_ContentBasePricing,
    C_ContentStatusID,
    C_ContentTinyBlob,
    C_ContentMIMEsetting,
    C_Description
  ) VALUES (
    _ContentTitle,
    -- _ContentTypeID,
    _ProductID,
    _ContentEdition,
    -- _ContentStandardCode,
    _ContentPublishDate,
    _ContentBasePricing,
    _ContentStatusID,
    _ContentTinyBlob,
    _ContentMIMEsetting,
    _Description
  );
  -- --------------------------------------------------------------------------
  INSERT INTO ec_C_ContentTinyBlobFullText(
    Cft_ContentTitle,
    Cft_ProductID,
    Cft_ContentEdition,
    -- Cft_ContentStandardCode,
    Cft_ContentPublishDate,
    Cft_ContentTinyBlob,
    Cft_Description
  ) VALUES (
    _ContentTitle,
    _ProductID,
    _ContentEdition,
    -- _ContentStandardCode,
    _ContentPublishDate,
    _ContentTinyBlob,
    _Description
  );
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbi_ec_C_ContentMediumBlob;
DELIMITER //
CREATE TRIGGER   tbi_ec_C_ContentMediumBlob
BEFORE INSERT ON ec_C_ContentMediumBlob
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _ContentID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.C_EntryCreatedTime = CURRENT_TIMESTAMP();
  SET NEW.C_EntryUpdatedTime = '0000-00-00 00:00:00';
  -- --------------------------------------------------------------------------
  IF ((NEW.C_ContentID IS NULL
       )
      OR
      (NEW.C_ContentID != 0
       )
      )
  THEN
    SET _ContentID =
    sqlGetId3(NEW.C_ContentTitle,
              NEW.C_ProductID,
              NEW.C_ContentEdition -- ,
              -- NEW.C_ContentStandardCode
              );
    -- CAST(CONV(SUBSTRING(MD5(CONCAT(NEW.C_ContentTitle,
    --                                NEW.C_ProductID,
    --                                NEW.C_ContentEdition -- ,
    --                                -- NEW.C_ContentStandardCode
    --                                )
    --                         ),
    --                     1,15
    --                     ),
    --           16,10
    --           )
    --      AS UNSIGNED INTEGER
    --      );
    IF (_ContentID IS NULL)
    THEN
      SET _ContentID = 0;
    END IF;
    SET NEW.C_ContentID = _ContentID;
  END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.C_ContentID IS NULL
  --      )
  --     -- OR
  --     -- (NEW.C_ContentID = 0
  --     --  )
  --     )
  -- THEN
  --   SELECT
  --     MAX(ec_C_Content.C_ContentID)+1
  --   INTO
  --     _ContentID
  --   FROM
  --     ec_C_ContentMediumBlob;
  --   IF (_ContentID IS NULL)
  --   THEN
  --     SET _ContentID = 0;
  --   END IF;
  --   SET NEW.C_ContentID = _ContentID;
  -- END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.C_ContentTypeID IS NULL
  --      )
  --     OR
  --     (NEW.C_ContentTypeID < 1
  --      )
  --     )
  -- THEN
  --   SET NEW.C_ContentTypeID = 1;
  -- END IF;
  -- --------------------------------------------------------------------------
  IF ((NEW.C_ContentStatusID IS NULL
       )
      OR
      (NEW.C_ContentStatusID < 1
       )
      )
  THEN
    SET NEW.C_ContentStatusID = 1;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    3,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentMediumBlob',
    CONCAT('Insert',
           'NEW.C_ContentID=',
           NEW.C_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbu_ec_C_ContentMediumBlob;
DELIMITER //
CREATE TRIGGER   tbu_ec_C_ContentMediumBlob
BEFORE UPDATE ON ec_C_ContentMediumBlob
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.C_EntryCreatedTime = OLD.C_EntryCreatedTime;
  SET NEW.C_EntryUpdatedTime = CURRENT_TIMESTAMP();
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    5,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentMediumBlob',
    CONCAT('Update',
           'NEW.C_ContentID=',
           NEW.C_ContentID,
           'OLD.C_ContentID=',
           OLD.C_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbd_ec_C_ContentMediumBlob;
DELIMITER //
CREATE TRIGGER   tbd_ec_C_ContentMediumBlob
BEFORE DELETE ON ec_C_ContentMediumBlob
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    7,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentMediumBlob',
    CONCAT('Delete',
           'OLD.C_ContentID=',
           OLD.C_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tai_ec_C_ContentMediumBlob;
DELIMITER //
CREATE TRIGGER   tai_ec_C_ContentMediumBlob
AFTER INSERT ON  ec_C_ContentMediumBlob
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    4,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentMediumBlob',
    CONCAT('Insert',
           'NEW.C_ContentID=',
           NEW.C_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tau_ec_C_ContentMediumBlob;
DELIMITER //
CREATE TRIGGER   tau_ec_C_ContentMediumBlob
AFTER UPDATE ON  ec_C_ContentMediumBlob
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    6,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentMediumBlob',
    CONCAT('Update',
           'NEW.C_ContentID=',
           NEW.C_ContentID,
           'OLD.C_ContentID=',
           OLD.C_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tad_ec_C_ContentMediumBlob;
DELIMITER //
CREATE TRIGGER   tad_ec_C_ContentMediumBlob
AFTER DELETE ON  ec_C_ContentMediumBlob
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    8,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentMediumBlob',
    CONCAT('Delete',
           'OLD.C_ContentID=',
           OLD.C_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_C_ContentMediumBlob
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  AUTO_INCREMENT = 100
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_C_ContentMediumBlob
MODIFY COLUMN
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  C_ContentID                           BIGINT DEFAULT 0              NOT NULL
                                        AUTO_INCREMENT
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbi_ec_C_ContentMediumBlobFullText;
DELIMITER //
CREATE TRIGGER   tbi_ec_C_ContentMediumBlobFullText
BEFORE INSERT ON ec_C_ContentMediumBlobFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _ContentID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.Cft_EntryCreatedTime = CURRENT_TIMESTAMP();
  SET NEW.Cft_EntryUpdatedTime = '0000-00-00 00:00:00';
  -- --------------------------------------------------------------------------
  IF ((NEW.Cft_ContentID IS NULL
       )
      OR
      (NEW.Cft_ContentID != 0
       )
      )
  THEN
    SET _ContentID =
    sqlGetId3(NEW.Cft_ContentTitle,
              NEW.Cft_ProductID,
              NEW.Cft_ContentEdition -- ,
              -- NEW.Cft_ContentStandardCode
              );
    -- CAST(CONV(SUBSTRING(MD5(CONCAT(NEW.Cft_ContentTitle,
    --                                NEW.Cft_ProductID,
    --                                NEW.Cft_ContentEdition -- ,
    --                                -- NEW.Cft_ContentStandardCode
    --                                )
    --                         ),
    --                     1,15
    --                     ),
    --           16,10
    --           )
    --      AS UNSIGNED INTEGER
    --      );
    IF (_ContentID IS NULL)
    THEN
      SET _ContentID = 0;
    END IF;
    SET NEW.Cft_ContentID = _ContentID;
  END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.Cft_ContentID IS NULL
  --      )
  --     -- OR
  --     -- (NEW.Cft_ContentID = 0
  --     --  )
  --     )
  -- THEN
  --   SELECT
  --     MAX(ec_C_ContentMediumBlobFullText.Cft_ContentID)+1
  --   INTO
  --     _ContentID
  --   FROM
  --     ec_C_ContentMediumBlobFullText;
  --   IF (_ContentID IS NULL)
  --   THEN
  --     SET _ContentID = 0;
  --   END IF;
  --   SET NEW.Cft_ContentID = _ContentID;
  -- END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    3,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentMediumBlobFullText',
    CONCAT('Insert',
           'NEW.Cft_ContentID=',
           NEW.Cft_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbu_ec_C_ContentMediumBlobFullText;
DELIMITER //
CREATE TRIGGER   tbu_ec_C_ContentMediumBlobFullText
BEFORE UPDATE ON ec_C_ContentMediumBlobFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.Cft_EntryCreatedTime = OLD.Cft_EntryCreatedTime;
  SET NEW.Cft_EntryUpdatedTime = CURRENT_TIMESTAMP();
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    5,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentMediumBlobFullText',
    CONCAT('Update',
           'NEW.Cft_ContentID=',
           NEW.Cft_ContentID,
           'OLD.Cft_ContentID=',
           OLD.Cft_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbd_ec_C_ContentMediumBlobFullText;
DELIMITER //
CREATE TRIGGER   tbd_ec_C_ContentMediumBlobFullText
BEFORE DELETE ON ec_C_ContentMediumBlobFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    7,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentMediumBlobFullText',
    CONCAT('Delete',
           'OLD.Cft_ContentID=',
           OLD.Cft_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tai_ec_C_ContentMediumBlobFullText;
DELIMITER //
CREATE TRIGGER   tai_ec_C_ContentMediumBlobFullText
AFTER INSERT ON  ec_C_ContentMediumBlobFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    4,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentMediumBlobFullText',
    CONCAT('Insert',
           'NEW.Cft_ContentID=',
           NEW.Cft_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tau_ec_C_ContentMediumBlobFullText;
DELIMITER //
CREATE TRIGGER   tau_ec_C_ContentMediumBlobFullText
AFTER UPDATE ON  ec_C_ContentMediumBlobFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    6,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentMediumBlobFullText',
    CONCAT('Update',
           'NEW.Cft_ContentID=',
           NEW.Cft_ContentID,
           'OLD.Cft_ContentID=',
           OLD.Cft_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tad_ec_C_ContentMediumBlobFullText;
DELIMITER //
CREATE TRIGGER   tad_ec_C_ContentMediumBlobFullText
AFTER DELETE ON  ec_C_ContentMediumBlobFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    8,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentMediumBlobFullText',
    CONCAT('Delete',
           'OLD.Cft_ContentID=',
           OLD.Cft_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_C_ContentMediumBlobFullText
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  AUTO_INCREMENT = 100
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_C_ContentMediumBlobFullText
MODIFY COLUMN
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  Cft_ContentID                         BIGINT DEFAULT 0              NOT NULL
                                        AUTO_INCREMENT
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP PROCEDURE IF EXISTS sp_ec_C_ContentMediumBlob;
DELIMITER //
CREATE PROCEDURE sp_ec_C_ContentMediumBlob(
  -- --------------------------------------------------------------------------
  _ContentTitle        VARCHAR(255),
  -- _ContentTypeID    BIGINT,
  -- --------------------------------------------------------------------------
  __ProductID            BIGINT,
  __OrganizationID       BIGINT,
  _ProductTitle          VARCHAR(255),
  -- _ProductTypeID      BIGINT,
  _OrganizationName      VARCHAR(255),
  _ProductEdition        SMALLINT,
  _ProductStandardCode   VARCHAR(255),
  -- _ProductPublishDate VARCHAR(255),
  -- _ProductBasePricing NUMERIC(16,2),
  -- _ProductStatusID    BIGINT,
  -- _ProductReference   VARCHAR(1024),
  -- _Description        VARCHAR(1024)
  -- _Order              BIGINT,
  -- _Description        VARCHAR(1024)
  -- --------------------------------------------------------------------------
  _ContentEdition      SMALLINT,
  -- _ContentStandardCode VARCHAR(255),
  _ContentPublishDate  VARCHAR(255),
  _ContentBasePricing  NUMERIC(16,2),
  _ContentStatusID     BIGINT,
  _ContentMediumBlob   MEDIUMBLOB,
  _ContentMIMEsetting  VARCHAR(255),
  _Description         VARCHAR(1024)
  -- --------------------------------------------------------------------------
)
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _OrganizationID BIGINT;
  -- --------------------------------------------------------------------------
  DECLARE _ProductID BIGINT;
  -- --------------------------------------------------------------------------
  IF (__OrganizationID IS NOT NULL)
  THEN
    SET _OrganizationID = __OrganizationID;
  ELSE
    SET _OrganizationID =
    sqlGetId(_OrganizationName);
    -- CAST(CONV(SUBSTRING(MD5(_OrganizationName),1,15),16,10)
    --      AS UNSIGNED INTEGER);
  END IF;
  -- --------------------------------------------------------------------------
  IF (__ProductID IS NOT NULL)
  THEN
    SET _ProductID = __ProductID;
  ELSE
    SET _ProductID =
    sqlGetId4(_OrganizationID,
              _ProductTitle,
              _ProductEdition,
              _ProductStandardCode
              );
    -- CAST(CONV(SUBSTRING(MD5(CONCAT(_OrganizationID,
    --                                _ProductTitle,
    --                                _ProductEdition,
    --                                _ProductStandardCode
    --                                )
    --                         ),
    --                     1,15
    --                     ),
    --           16,10
    --           )
    --      AS UNSIGNED INTEGER
    --      );
  END IF;
  -- --------------------------------------------------------------------------
  INSERT INTO ec_C_ContentMediumBlob(
    C_ContentTitle,
    -- C_ContentTypeID,
    C_ProductID,
    C_ContentEdition,
    -- C_ContentStandardCode,
    C_ContentPublishDate,
    C_ContentBasePricing,
    C_ContentStatusID,
    C_ContentMediumBlob,
    C_ContentMIMEsetting,
    C_Description
  ) VALUES (
    _ContentTitle,
    -- _ContentTypeID,
    _ProductID,
    _ContentEdition,
    -- _ContentStandardCode,
    _ContentPublishDate,
    _ContentBasePricing,
    _ContentStatusID,
    _ContentMediumBlob,
    _ContentMIMEsetting,
    _Description
  );
  -- --------------------------------------------------------------------------
  INSERT INTO ec_C_ContentMediumBlobFullText(
    Cft_ContentTitle,
    Cft_ProductID,
    Cft_ContentEdition,
    -- Cft_ContentStandardCode,
    Cft_ContentPublishDate,
    Cft_ContentMediumBlob,
    Cft_Description
  ) VALUES (
    _ContentTitle,
    _ProductID,
    _ContentEdition,
    -- _ContentStandardCode,
    _ContentPublishDate,
    _ContentMediumBlob,
    _Description
  );
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbi_ec_C_ContentLongBlob;
DELIMITER //
CREATE TRIGGER   tbi_ec_C_ContentLongBlob
BEFORE INSERT ON ec_C_ContentLongBlob
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _ContentID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.C_EntryCreatedTime = CURRENT_TIMESTAMP();
  SET NEW.C_EntryUpdatedTime = '0000-00-00 00:00:00';
  -- --------------------------------------------------------------------------
  IF ((NEW.C_ContentID IS NULL
       )
      OR
      (NEW.C_ContentID != 0
       )
      )
  THEN
    SET _ContentID =
    sqlGetId3(NEW.C_ContentTitle,
              NEW.C_ProductID,
              NEW.C_ContentEdition -- ,
              -- NEW.C_ContentStandardCode
              );
    -- CAST(CONV(SUBSTRING(MD5(CONCAT(NEW.C_ContentTitle,
    --                                NEW.C_ProductID,
    --                                NEW.C_ContentEdition -- ,
    --                                -- NEW.C_ContentStandardCode
    --                                )
    --                         ),
    --                     1,15
    --                     ),
    --           16,10
    --           )
    --      AS UNSIGNED INTEGER
    --      );
    IF (_ContentID IS NULL)
    THEN
      SET _ContentID = 0;
    END IF;
    SET NEW.C_ContentID = _ContentID;
  END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.C_ContentID IS NULL
  --      )
  --     -- OR
  --     -- (NEW.C_ContentID = 0
  --     --  )
  --     )
  -- THEN
  --   SELECT
  --     MAX(ec_C_Content.C_ContentID)+1
  --   INTO
  --     _ContentID
  --   FROM
  --     ec_C_ContentLongBlob;
  --   IF (_ContentID IS NULL)
  --   THEN
  --     SET _ContentID = 0;
  --   END IF;
  --   SET NEW.C_ContentID = _ContentID;
  -- END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.C_ContentTypeID IS NULL
  --      )
  --     OR
  --     (NEW.C_ContentTypeID < 1
  --      )
  --     )
  -- THEN
  --   SET NEW.C_ContentTypeID = 1;
  -- END IF;
  -- --------------------------------------------------------------------------
  IF ((NEW.C_ContentStatusID IS NULL
       )
      OR
      (NEW.C_ContentStatusID < 1
       )
      )
  THEN
    SET NEW.C_ContentStatusID = 1;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    3,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentLongBlob',
    CONCAT('Insert',
           'NEW.C_ContentID=',
           NEW.C_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbu_ec_C_ContentLongBlob;
DELIMITER //
CREATE TRIGGER   tbu_ec_C_ContentLongBlob
BEFORE UPDATE ON ec_C_ContentLongBlob
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.C_EntryCreatedTime = OLD.C_EntryCreatedTime;
  SET NEW.C_EntryUpdatedTime = CURRENT_TIMESTAMP();
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    5,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentLongBlob',
    CONCAT('Update',
           'NEW.C_ContentID=',
           NEW.C_ContentID,
           'OLD.C_ContentID=',
           OLD.C_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbd_ec_C_ContentLongBlob;
DELIMITER //
CREATE TRIGGER   tbd_ec_C_ContentLongBlob
BEFORE DELETE ON ec_C_ContentLongBlob
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    7,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentLongBlob',
    CONCAT('Delete',
           'OLD.C_ContentID=',
           OLD.C_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tai_ec_C_ContentLongBlob;
DELIMITER //
CREATE TRIGGER   tai_ec_C_ContentLongBlob
AFTER INSERT ON  ec_C_ContentLongBlob
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    4,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentLongBlob',
    CONCAT('Insert',
           'NEW.C_ContentID=',
           NEW.C_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tau_ec_C_ContentLongBlob;
DELIMITER //
CREATE TRIGGER   tau_ec_C_ContentLongBlob
AFTER UPDATE ON  ec_C_ContentLongBlob
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    6,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentLongBlob',
    CONCAT('Update',
           'NEW.C_ContentID=',
           NEW.C_ContentID,
           'OLD.C_ContentID=',
           OLD.C_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tad_ec_C_ContentLongBlob;
DELIMITER //
CREATE TRIGGER   tad_ec_C_ContentLongBlob
AFTER DELETE ON  ec_C_ContentLongBlob
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    8,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentLongBlob',
    CONCAT('Delete',
           'OLD.C_ContentID=',
           OLD.C_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_C_ContentLongBlob
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  AUTO_INCREMENT = 100
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_C_ContentLongBlob
MODIFY COLUMN
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  C_ContentID                           BIGINT DEFAULT 0              NOT NULL
                                        AUTO_INCREMENT
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbi_ec_C_ContentLongBlobFullText;
DELIMITER //
CREATE TRIGGER   tbi_ec_C_ContentLongBlobFullText
BEFORE INSERT ON ec_C_ContentLongBlobFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _ContentID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.Cft_EntryCreatedTime = CURRENT_TIMESTAMP();
  SET NEW.Cft_EntryUpdatedTime = '0000-00-00 00:00:00';
  -- --------------------------------------------------------------------------
  IF ((NEW.Cft_ContentID IS NULL
       )
      OR
      (NEW.Cft_ContentID != 0
       )
      )
  THEN
    SET _ContentID =
    sqlGetId3(NEW.Cft_ContentTitle,
              NEW.Cft_ProductID,
              NEW.Cft_ContentEdition -- ,
              -- NEW.Cft_ContentStandardCode
              );
    -- CAST(CONV(SUBSTRING(MD5(CONCAT(NEW.Cft_ContentTitle,
    --                                NEW.Cft_ProductID,
    --                                NEW.Cft_ContentEdition -- ,
    --                                -- NEW.Cft_ContentStandardCode
    --                                )
    --                         ),
    --                     1,15
    --                     ),
    --           16,10
    --           )
    --      AS UNSIGNED INTEGER
    --      );
    IF (_ContentID IS NULL)
    THEN
      SET _ContentID = 0;
    END IF;
    SET NEW.Cft_ContentID = _ContentID;
  END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.Cft_ContentID IS NULL
  --      )
  --     -- OR
  --     -- (NEW.Cft_ContentID = 0
  --     --  )
  --     )
  -- THEN
  --   SELECT
  --     MAX(ec_C_ContentLongBlobFullText.Cft_ContentID)+1
  --   INTO
  --     _ContentID
  --   FROM
  --     ec_C_ContentLongBlobFullText;
  --   IF (_ContentID IS NULL)
  --   THEN
  --     SET _ContentID = 0;
  --   END IF;
  --   SET NEW.Cft_ContentID = _ContentID;
  -- END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    3,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentLongBlobFullText',
    CONCAT('Insert',
           'NEW.Cft_ContentID=',
           NEW.Cft_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbu_ec_C_ContentLongBlobFullText;
DELIMITER //
CREATE TRIGGER   tbu_ec_C_ContentLongBlobFullText
BEFORE UPDATE ON ec_C_ContentLongBlobFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.Cft_EntryCreatedTime = OLD.Cft_EntryCreatedTime;
  SET NEW.Cft_EntryUpdatedTime = CURRENT_TIMESTAMP();
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    5,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentLongBlobFullText',
    CONCAT('Update',
           'NEW.Cft_ContentID=',
           NEW.Cft_ContentID,
           'OLD.Cft_ContentID=',
           OLD.Cft_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbd_ec_C_ContentLongBlobFullText;
DELIMITER //
CREATE TRIGGER   tbd_ec_C_ContentLongBlobFullText
BEFORE DELETE ON ec_C_ContentLongBlobFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    7,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentLongBlobFullText',
    CONCAT('Delete',
           'OLD.Cft_ContentID=',
           OLD.Cft_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tai_ec_C_ContentLongBlobFullText;
DELIMITER //
CREATE TRIGGER   tai_ec_C_ContentLongBlobFullText
AFTER INSERT ON  ec_C_ContentLongBlobFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    4,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentLongBlobFullText',
    CONCAT('Insert',
           'NEW.Cft_ContentID=',
           NEW.Cft_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tau_ec_C_ContentLongBlobFullText;
DELIMITER //
CREATE TRIGGER   tau_ec_C_ContentLongBlobFullText
AFTER UPDATE ON  ec_C_ContentLongBlobFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    6,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentLongBlobFullText',
    CONCAT('Update',
           'NEW.Cft_ContentID=',
           NEW.Cft_ContentID,
           'OLD.Cft_ContentID=',
           OLD.Cft_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tad_ec_C_ContentLongBlobFullText;
DELIMITER //
CREATE TRIGGER   tad_ec_C_ContentLongBlobFullText
AFTER DELETE ON  ec_C_ContentLongBlobFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    8,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentLongBlobFullText',
    CONCAT('Delete',
           'OLD.Cft_ContentID=',
           OLD.Cft_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_C_ContentLongBlobFullText
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  AUTO_INCREMENT = 100
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_C_ContentLongBlobFullText
MODIFY COLUMN
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  Cft_ContentID                         BIGINT DEFAULT 0              NOT NULL
                                        AUTO_INCREMENT
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP PROCEDURE IF EXISTS sp_ec_C_ContentLongBlob;
DELIMITER //
CREATE PROCEDURE sp_ec_C_ContentLongBlob(
  -- --------------------------------------------------------------------------
  _ContentTitle        VARCHAR(255),
  -- _ContentTypeID    BIGINT,
  -- --------------------------------------------------------------------------
  __ProductID            BIGINT,
  __OrganizationID       BIGINT,
  _ProductTitle          VARCHAR(255),
  -- _ProductTypeID      BIGINT,
  _OrganizationName      VARCHAR(255),
  _ProductEdition        SMALLINT,
  _ProductStandardCode   VARCHAR(255),
  -- _ProductPublishDate VARCHAR(255),
  -- _ProductBasePricing NUMERIC(16,2),
  -- _ProductStatusID    BIGINT,
  -- _ProductReference   VARCHAR(1024),
  -- _Description        VARCHAR(1024)
  -- _Order              BIGINT,
  -- _Description        VARCHAR(1024)
  -- --------------------------------------------------------------------------
  _ContentEdition      SMALLINT,
  -- _ContentStandardCode VARCHAR(255),
  _ContentPublishDate  VARCHAR(255),
  _ContentBasePricing  NUMERIC(16,2),
  _ContentStatusID     BIGINT,
  _ContentLongBlob     LONGBLOB,
  _ContentMIMEsetting  VARCHAR(255),
  _Description         VARCHAR(1024)
  -- --------------------------------------------------------------------------
)
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _OrganizationID BIGINT;
  -- --------------------------------------------------------------------------
  DECLARE _ProductID BIGINT;
  -- --------------------------------------------------------------------------
  IF (__OrganizationID IS NOT NULL)
  THEN
    SET _OrganizationID = __OrganizationID;
  ELSE
    SET _OrganizationID =
    sqlGetId(_OrganizationName);
    -- CAST(CONV(SUBSTRING(MD5(_OrganizationName),1,15),16,10)
    --      AS UNSIGNED INTEGER);
  END IF;
  -- --------------------------------------------------------------------------
  IF (__ProductID IS NOT NULL)
  THEN
    SET _ProductID = __ProductID;
  ELSE
    SET _ProductID =
    sqlGetId4(_OrganizationID,
              _ProductTitle,
              _ProductEdition,
              _ProductStandardCode
              );
    -- CAST(CONV(SUBSTRING(MD5(CONCAT(_OrganizationID,
    --                                _ProductTitle,
    --                                _ProductEdition,
    --                                _ProductStandardCode
    --                                )
    --                         ),
    --                     1,15
    --                     ),
    --           16,10
    --           )
    --      AS UNSIGNED INTEGER
    --      );
  END IF;
  -- --------------------------------------------------------------------------
  INSERT INTO ec_C_ContentLongBlob(
    C_ContentTitle,
    -- C_ContentTypeID,
    C_ProductID,
    C_ContentEdition,
    -- C_ContentStandardCode,
    C_ContentPublishDate,
    C_ContentBasePricing,
    C_ContentStatusID,
    C_ContentLongBlob,
    C_ContentMIMEsetting,
    C_Description
  ) VALUES (
    _ContentTitle,
    -- _ContentTypeID,
    _ProductID,
    _ContentEdition,
    -- _ContentStandardCode,
    _ContentPublishDate,
    _ContentBasePricing,
    _ContentStatusID,
    _ContentLongBlob,
    _ContentMIMEsetting,
    _Description
  );
  -- --------------------------------------------------------------------------
  INSERT INTO ec_C_ContentLongBlobFullText(
    Cft_ContentTitle,
    Cft_ProductID,
    Cft_ContentEdition,
    -- Cft_ContentStandardCode,
    Cft_ContentPublishDate,
    Cft_ContentLongBlob,
    Cft_Description
  ) VALUES (
    _ContentTitle,
    _ProductID,
    _ContentEdition,
    -- _ContentStandardCode,
    _ContentPublishDate,
    _ContentLongBlob,
    _Description
  );
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbi_ec_C_ContentExternalFile;
DELIMITER //
CREATE TRIGGER   tbi_ec_C_ContentExternalFile
BEFORE INSERT ON ec_C_ContentExternalFile
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _ContentID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.C_EntryCreatedTime = CURRENT_TIMESTAMP();
  SET NEW.C_EntryUpdatedTime = '0000-00-00 00:00:00';
  -- --------------------------------------------------------------------------
  IF ((NEW.C_ContentID IS NULL
       )
      OR
      (NEW.C_ContentID != 0
       )
      )
  THEN
    SET _ContentID =
    sqlGetId3(NEW.C_ContentTitle,
              NEW.C_ProductID,
              NEW.C_ContentEdition -- ,
              -- NEW.C_ContentStandardCode
              );
    -- CAST(CONV(SUBSTRING(MD5(CONCAT(NEW.C_ContentTitle,
    --                                NEW.C_ProductID,
    --                                NEW.C_ContentEdition -- ,
    --                                -- NEW.C_ContentStandardCode
    --                                )
    --                         ),
    --                     1,15
    --                     ),
    --           16,10
    --           )
    --      AS UNSIGNED INTEGER
    --      );
    IF (_ContentID IS NULL)
    THEN
      SET _ContentID = 0;
    END IF;
    SET NEW.C_ContentID = _ContentID;
  END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.C_ContentID IS NULL
  --      )
  --     -- OR
  --     -- (NEW.C_ContentID = 0
  --     --  )
  --     )
  -- THEN
  --   SELECT
  --     MAX(ec_C_Content.C_ContentID)+1
  --   INTO
  --     _ContentID
  --   FROM
  --     ec_C_ContentExternalFile;
  --   IF (_ContentID IS NULL)
  --   THEN
  --     SET _ContentID = 0;
  --   END IF;
  --   SET NEW.C_ContentID = _ContentID;
  -- END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.C_ContentTypeID IS NULL
  --      )
  --     OR
  --     (NEW.C_ContentTypeID < 1
  --      )
  --     )
  -- THEN
  --   SET NEW.C_ContentTypeID = 1;
  -- END IF;
  -- --------------------------------------------------------------------------
  IF ((NEW.C_ContentStatusID IS NULL
       )
      OR
      (NEW.C_ContentStatusID < 1
       )
      )
  THEN
    SET NEW.C_ContentStatusID = 1;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    3,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentExternalFile',
    CONCAT('Insert',
           'NEW.C_ContentID=',
           NEW.C_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbu_ec_C_ContentExternalFile;
DELIMITER //
CREATE TRIGGER   tbu_ec_C_ContentExternalFile
BEFORE UPDATE ON ec_C_ContentExternalFile
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.C_EntryCreatedTime = OLD.C_EntryCreatedTime;
  SET NEW.C_EntryUpdatedTime = CURRENT_TIMESTAMP();
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    5,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentExternalFile',
    CONCAT('Update',
           'NEW.C_ContentID=',
           NEW.C_ContentID,
           'OLD.C_ContentID=',
           OLD.C_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbd_ec_C_ContentExternalFile;
DELIMITER //
CREATE TRIGGER   tbd_ec_C_ContentExternalFile
BEFORE DELETE ON ec_C_ContentExternalFile
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    7,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentExternalFile',
    CONCAT('Delete',
           'OLD.C_ContentID=',
           OLD.C_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tai_ec_C_ContentExternalFile;
DELIMITER //
CREATE TRIGGER   tai_ec_C_ContentExternalFile
AFTER INSERT ON  ec_C_ContentExternalFile
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    4,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentExternalFile',
    CONCAT('Insert',
           'NEW.C_ContentID=',
           NEW.C_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tau_ec_C_ContentExternalFile;
DELIMITER //
CREATE TRIGGER   tau_ec_C_ContentExternalFile
AFTER UPDATE ON  ec_C_ContentExternalFile
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    6,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentExternalFile',
    CONCAT('Update',
           'NEW.C_ContentID=',
           NEW.C_ContentID,
           'OLD.C_ContentID=',
           OLD.C_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tad_ec_C_ContentExternalFile;
DELIMITER //
CREATE TRIGGER   tad_ec_C_ContentExternalFile
AFTER DELETE ON  ec_C_ContentExternalFile
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    8,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentExternalFile',
    CONCAT('Delete',
           'OLD.C_ContentID=',
           OLD.C_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_C_ContentExternalFile
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  AUTO_INCREMENT = 100
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_C_ContentExternalFile
MODIFY COLUMN
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  C_ContentID                           BIGINT DEFAULT 0              NOT NULL
                                        AUTO_INCREMENT
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbi_ec_C_ContentExternalFileFullText;
DELIMITER //
CREATE TRIGGER   tbi_ec_C_ContentExternalFileFullText
BEFORE INSERT ON ec_C_ContentExternalFileFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _ContentID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.Cft_EntryCreatedTime = CURRENT_TIMESTAMP();
  SET NEW.Cft_EntryUpdatedTime = '0000-00-00 00:00:00';
  -- --------------------------------------------------------------------------
  IF ((NEW.Cft_ContentID IS NULL
       )
      OR
      (NEW.Cft_ContentID != 0
       )
      )
  THEN
    SET _ContentID =
    sqlGetId3(NEW.Cft_ContentTitle,
              NEW.Cft_ProductID,
              NEW.Cft_ContentEdition -- ,
              -- NEW.Cft_ContentStandardCode
              );
    -- CAST(CONV(SUBSTRING(MD5(CONCAT(NEW.Cft_ContentTitle,
    --                                NEW.Cft_ProductID,
    --                                NEW.Cft_ContentEdition -- ,
    --                                -- NEW.Cft_ContentStandardCode
    --                                )
    --                         ),
    --                     1,15
    --                     ),
    --           16,10
    --           )
    --      AS UNSIGNED INTEGER
    --      );
    IF (_ContentID IS NULL)
    THEN
      SET _ContentID = 0;
    END IF;
    SET NEW.Cft_ContentID = _ContentID;
  END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.Cft_ContentID IS NULL
  --      )
  --     -- OR
  --     -- (NEW.Cft_ContentID = 0
  --     --  )
  --     )
  -- THEN
  --   SELECT
  --     MAX(ec_C_ContentExternalFileFullText.Cft_ContentID)+1
  --   INTO
  --     _ContentID
  --   FROM
  --     ec_C_ContentExternalFileFullText;
  --   IF (_ContentID IS NULL)
  --   THEN
  --     SET _ContentID = 0;
  --   END IF;
  --   SET NEW.Cft_ContentID = _ContentID;
  -- END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    3,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentExternalFileFullText',
    CONCAT('Insert',
           'NEW.Cft_ContentID=',
           NEW.Cft_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbu_ec_C_ContentExternalFileFullText;
DELIMITER //
CREATE TRIGGER   tbu_ec_C_ContentExternalFileFullText
BEFORE UPDATE ON ec_C_ContentExternalFileFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.Cft_EntryCreatedTime = OLD.Cft_EntryCreatedTime;
  SET NEW.Cft_EntryUpdatedTime = CURRENT_TIMESTAMP();
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    5,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentExternalFileFullText',
    CONCAT('Update',
           'NEW.Cft_ContentID=',
           NEW.Cft_ContentID,
           'OLD.Cft_ContentID=',
           OLD.Cft_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbd_ec_C_ContentExternalFileFullText;
DELIMITER //
CREATE TRIGGER   tbd_ec_C_ContentExternalFileFullText
BEFORE DELETE ON ec_C_ContentExternalFileFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    7,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentExternalFileFullText',
    CONCAT('Delete',
           'OLD.Cft_ContentID=',
           OLD.Cft_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tai_ec_C_ContentExternalFileFullText;
DELIMITER //
CREATE TRIGGER   tai_ec_C_ContentExternalFileFullText
AFTER INSERT ON  ec_C_ContentExternalFileFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    4,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentExternalFileFullText',
    CONCAT('Insert',
           'NEW.Cft_ContentID=',
           NEW.Cft_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tau_ec_C_ContentExternalFileFullText;
DELIMITER //
CREATE TRIGGER   tau_ec_C_ContentExternalFileFullText
AFTER UPDATE ON  ec_C_ContentExternalFileFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    6,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentExternalFileFullText',
    CONCAT('Update',
           'NEW.Cft_ContentID=',
           NEW.Cft_ContentID,
           'OLD.Cft_ContentID=',
           OLD.Cft_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tad_ec_C_ContentExternalFileFullText;
DELIMITER //
CREATE TRIGGER   tad_ec_C_ContentExternalFileFullText
AFTER DELETE ON  ec_C_ContentExternalFileFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    8,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ContentExternalFileFullText',
    CONCAT('Delete',
           'OLD.Cft_ContentID=',
           OLD.Cft_ContentID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_C_ContentExternalFileFullText
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  AUTO_INCREMENT = 100
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_C_ContentExternalFileFullText
MODIFY COLUMN
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  Cft_ContentID                         BIGINT DEFAULT 0              NOT NULL
                                        AUTO_INCREMENT
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP PROCEDURE IF EXISTS sp_ec_C_ContentExternalFile;
DELIMITER //
CREATE PROCEDURE sp_ec_C_ContentExternalFile(
  -- --------------------------------------------------------------------------
  _ContentTitle        VARCHAR(255),
  -- _ContentTypeID    BIGINT,
  -- --------------------------------------------------------------------------
  __ProductID            BIGINT,
  __OrganizationID       BIGINT,
  _ProductTitle          VARCHAR(255),
  -- _ProductTypeID      BIGINT,
  _OrganizationName      VARCHAR(255),
  _ProductEdition        SMALLINT,
  _ProductStandardCode   VARCHAR(255),
  -- _ProductPublishDate VARCHAR(255),
  -- _ProductBasePricing NUMERIC(16,2),
  -- _ProductStatusID    BIGINT,
  -- _ProductReference   VARCHAR(1024),
  -- _Description        VARCHAR(1024)
  -- _Order              BIGINT,
  -- _Description        VARCHAR(1024)
  -- --------------------------------------------------------------------------
  _ContentEdition      SMALLINT,
  -- _ContentStandardCode VARCHAR(255),
  _ContentPublishDate  VARCHAR(255),
  _ContentBasePricing  NUMERIC(16,2),
  _ContentStatusID     BIGINT,
  _ContentExternalFile VARCHAR(255),
  _ContentMIMEsetting  VARCHAR(255),
  _Description         VARCHAR(1024)
  -- --------------------------------------------------------------------------
)
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _OrganizationID BIGINT;
  -- --------------------------------------------------------------------------
  DECLARE _ProductID BIGINT;
  -- --------------------------------------------------------------------------
  IF (__OrganizationID IS NOT NULL)
  THEN
    SET _OrganizationID = __OrganizationID;
  ELSE
    SET _OrganizationID =
    sqlGetId(_OrganizationName);
    -- CAST(CONV(SUBSTRING(MD5(_OrganizationName),1,15),16,10)
    --      AS UNSIGNED INTEGER);
  END IF;
  -- --------------------------------------------------------------------------
  IF (__ProductID IS NOT NULL)
  THEN
    SET _ProductID = __ProductID;
  ELSE
    SET _ProductID =
    sqlGetId4(_OrganizationID,
              _ProductTitle,
              _ProductEdition,
              _ProductStandardCode
              );
    -- CAST(CONV(SUBSTRING(MD5(CONCAT(_OrganizationID,
    --                                _ProductTitle,
    --                                _ProductEdition,
    --                                _ProductStandardCode
    --                                )
    --                         ),
    --                     1,15
    --                     ),
    --           16,10
    --           )
    --      AS UNSIGNED INTEGER
    --      );
  END IF;
  -- --------------------------------------------------------------------------
  INSERT INTO ec_C_ContentExternalFile(
    C_ContentTitle,
    -- C_ContentTypeID,
    C_ProductID,
    C_ContentEdition,
    -- C_ContentStandardCode,
    C_ContentPublishDate,
    C_ContentBasePricing,
    C_ContentStatusID,
    C_ContentExternalFile,
    C_ContentMIMEsetting,
    C_Description
  ) VALUES (
    _ContentTitle,
    -- _ContentTypeID,
    _ProductID,
    _ContentEdition,
    -- _ContentStandardCode,
    _ContentPublishDate,
    _ContentBasePricing,
    _ContentStatusID,
    _ContentExternalFile,
    _ContentMIMEsetting,
    _Description
  );
  -- --------------------------------------------------------------------------
  INSERT INTO ec_C_ContentExternalFileFullText(
    Cft_ContentTitle,
    Cft_ProductID,
    Cft_ContentEdition,
    -- Cft_ContentStandardCode,
    Cft_ContentPublishDate,
    Cft_ContentExternalFile,
    Cft_Description
  ) VALUES (
    _ContentTitle,
    _ProductID,
    _ContentEdition,
    -- _ContentStandardCode,
    _ContentPublishDate,
    _ContentExternalFile,
    _Description
  );
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
===============================================================================
== Subschema: Product-Content
===============================================================================
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbi_ec_PC_ProductContentType;
DELIMITER //
CREATE TRIGGER   tbi_ec_PC_ProductContentType
BEFORE INSERT ON ec_PC_ProductContentType
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _ProductContentTypeID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.PCT_EntryCreatedTime = CURRENT_TIMESTAMP();
  SET NEW.PCT_EntryUpdatedTime = '0000-00-00 00:00:00';
  -- --------------------------------------------------------------------------
  IF ((NEW.PCT_ProductContentTypeID IS NULL
       )
      OR
      (NEW.PCT_ProductContentTypeID != 0
       )
      )
  THEN
    SET _ProductContentTypeID =
    sqlGetId(NEW.PCT_ProductContentTypeName);
    -- CAST(CONV(SUBSTRING(MD5(NEW.PCT_ProductContentTypeName),1,15),16,10)
    --      AS UNSIGNED INTEGER);
    IF (_ProductContentTypeID IS NULL)
    THEN
      SET _ProductContentTypeID = 0;
    END IF;
    SET NEW.PCT_ProductContentTypeID = _ProductContentTypeID;
  END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.PCT_ProductContentTypeID IS NULL
  --      )
  --     -- OR
  --     -- (NEW.PCT_ProductContentTypeID = 0
  --     --  )
  --     )
  -- THEN
  --   SELECT
  --     MAX(ec_PC_ProductContentType.PCT_ProductContentTypeID)+1
  --   INTO
  --     _ProductContentTypeID
  --   FROM
  --     ec_PC_ProductContentType;
  --   IF (_ProductContentTypeID IS NULL)
  --   THEN
  --     SET _ProductContentTypeID = 0;
  --   END IF;
  --   SET NEW.PCT_ProductContentTypeID = _ProductContentTypeID;
  -- END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    3,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ProductContentType',
    CONCAT('Insert',
           'NEW.PCT_ProductContentTypeID=',
           NEW.PCT_ProductContentTypeID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbu_ec_PC_ProductContentType;
DELIMITER //
CREATE TRIGGER   tbu_ec_PC_ProductContentType
BEFORE UPDATE ON ec_PC_ProductContentType
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.PCT_EntryCreatedTime = OLD.PCT_EntryCreatedTime;
  SET NEW.PCT_EntryUpdatedTime = CURRENT_TIMESTAMP();
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    5,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ProductContentType',
    CONCAT('Update',
           'NEW.PCT_ProductContentTypeID=',
           NEW.PCT_ProductContentTypeID,
           'OLD.PCT_ProductContentTypeID=',
           OLD.PCT_ProductContentTypeID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbd_ec_PC_ProductContentType;
DELIMITER //
CREATE TRIGGER   tbd_ec_PC_ProductContentType
BEFORE DELETE ON ec_PC_ProductContentType
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    7,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ProductContentType',
    CONCAT('Delete',
           'OLD.PCT_ProductContentTypeID=',
           OLD.PCT_ProductContentTypeID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tai_ec_PC_ProductContentType;
DELIMITER //
CREATE TRIGGER   tai_ec_PC_ProductContentType
AFTER INSERT ON  ec_PC_ProductContentType
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    4,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ProductContentType',
    CONCAT('Insert',
           'NEW.PCT_ProductContentTypeID=',
           NEW.PCT_ProductContentTypeID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tau_ec_PC_ProductContentType;
DELIMITER //
CREATE TRIGGER   tau_ec_PC_ProductContentType
AFTER UPDATE ON  ec_PC_ProductContentType
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    6,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ProductContentType',
    CONCAT('Update',
           'NEW.PCT_ProductContentTypeID=',
           NEW.PCT_ProductContentTypeID,
           'OLD.PCT_ProductContentTypeID=',
           OLD.PCT_ProductContentTypeID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tad_ec_PC_ProductContentType;
DELIMITER //
CREATE TRIGGER   tad_ec_PC_ProductContentType
AFTER DELETE ON  ec_PC_ProductContentType
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    8,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ProductContentType',
    CONCAT('Delete',
           'OLD.PCT_ProductContentTypeID=',
           OLD.PCT_ProductContentTypeID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_PC_ProductContentType
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  AUTO_INCREMENT = 100
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_PC_ProductContentType
MODIFY COLUMN
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  PCT_ProductContentTypeID              BIGINT DEFAULT 0              NOT NULL
                                        AUTO_INCREMENT
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbi_ec_PC_ProductContentStatus;
DELIMITER //
CREATE TRIGGER   tbi_ec_PC_ProductContentStatus
BEFORE INSERT ON ec_PC_ProductContentStatus
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _ProductContentStatusID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.PCs_EntryCreatedTime = CURRENT_TIMESTAMP();
  SET NEW.PCs_EntryUpdatedTime = '0000-00-00 00:00:00';
  -- --------------------------------------------------------------------------
  IF ((NEW.PCs_ProductContentStatusID IS NULL
       )
      OR
      (NEW.PCs_ProductContentStatusID != 0
       )
      )
  THEN
    SET _ProductContentStatusID =
    sqlGetId(NEW.PCs_ProductContentStatusName);
    -- CAST(CONV(SUBSTRING(MD5(NEW.PCs_ProductContentStatusName),1,15),16,10)
    --      AS UNSIGNED INTEGER);
    IF (_ProductContentStatusID IS NULL)
    THEN
      SET _ProductContentStatusID = 0;
    END IF;
    SET NEW.PCs_ProductContentStatusID = _ProductContentStatusID;
  END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.PCs_ProductContentStatusID IS NULL
  --      )
  --     -- OR
  --     -- (NEW.PCs_ProductContentStatusID = 0
  --     --  )
  --     )
  -- THEN
  --   SELECT
  --     MAX(ec_PC_ProductContentStatus.PCs_ProductContentStatusID)+1
  --   INTO
  --     _ProductContentStatusID
  --   FROM
  --     ec_PC_ProductContentStatus;
  --   IF (_ProductContentStatusID IS NULL)
  --   THEN
  --     SET _ProductContentStatusID = 0;
  --   END IF;
  --   SET NEW.PCs_ProductContentStatusID = _ProductContentStatusID;
  -- END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    3,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ProductContentStatus',
    CONCAT('Insert',
           'NEW.PCs_ProductContentStatusID=',
           NEW.PCs_ProductContentStatusID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbu_ec_PC_ProductContentStatus;
DELIMITER //
CREATE TRIGGER   tbu_ec_PC_ProductContentStatus
BEFORE UPDATE ON ec_PC_ProductContentStatus
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.PCs_EntryCreatedTime = OLD.PCs_EntryCreatedTime;
  SET NEW.PCs_EntryUpdatedTime = CURRENT_TIMESTAMP();
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    5,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ProductContentStatus',
    CONCAT('Update',
           'NEW.PCs_ProductContentStatusID=',
           NEW.PCs_ProductContentStatusID,
           'OLD.PCs_ProductContentStatusID=',
           OLD.PCs_ProductContentStatusID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbd_ec_PC_ProductContentStatus;
DELIMITER //
CREATE TRIGGER   tbd_ec_PC_ProductContentStatus
BEFORE DELETE ON ec_PC_ProductContentStatus
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    7,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ProductContentStatus',
    CONCAT('Delete',
           'OLD.PCs_ProductContentStatusID=',
           OLD.PCs_ProductContentStatusID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tai_ec_PC_ProductContentStatus;
DELIMITER //
CREATE TRIGGER   tai_ec_PC_ProductContentStatus
AFTER INSERT ON  ec_PC_ProductContentStatus
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    4,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ProductContentStatus',
    CONCAT('Insert',
           'NEW.PCs_ProductContentStatusID=',
           NEW.PCs_ProductContentStatusID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tau_ec_PC_ProductContentStatus;
DELIMITER //
CREATE TRIGGER   tau_ec_PC_ProductContentStatus
AFTER UPDATE ON  ec_PC_ProductContentStatus
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    6,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ProductContentStatus',
    CONCAT('Update',
           'NEW.PCs_ProductContentStatusID=',
           NEW.PCs_ProductContentStatusID,
           'OLD.PCs_ProductContentStatusID=',
           OLD.PCs_ProductContentStatusID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tad_ec_PC_ProductContentStatus;
DELIMITER //
CREATE TRIGGER   tad_ec_PC_ProductContentStatus
AFTER DELETE ON  ec_PC_ProductContentStatus
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    8,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ProductContentStatus',
    CONCAT('Delete',
           'OLD.PCs_ProductContentStatusID=',
           OLD.PCs_ProductContentStatusID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_PC_ProductContentStatus
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  AUTO_INCREMENT = 100
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_PC_ProductContentStatus
MODIFY COLUMN
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  PCs_ProductContentStatusID            BIGINT DEFAULT 0              NOT NULL
                                        AUTO_INCREMENT
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbi_ec_PC_ProductContent;
DELIMITER //
CREATE TRIGGER   tbi_ec_PC_ProductContent
BEFORE INSERT ON ec_PC_ProductContent
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _ProductContentID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.PC_EntryCreatedTime = CURRENT_TIMESTAMP();
  SET NEW.PC_EntryUpdatedTime = '0000-00-00 00:00:00';
  -- --------------------------------------------------------------------------
  IF ((NEW.PC_ProductContentTypeID IS NULL
       )
      OR
      (NEW.PC_ProductContentTypeID < 1
       )
      )
  THEN
    SET NEW.PC_ProductContentTypeID = 1;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((NEW.PC_ProductContentStatusID IS NULL
       )
      OR
      (NEW.PC_ProductContentStatusID < 1
       )
      )
  THEN
    SET NEW.PC_ProductContentStatusID = 1;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    3,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ProductContent',
    CONCAT('Insert',
           'NEW.PC_ProductID=',
           NEW.PC_ProductID,
           'NEW.PC_PresentationOrder=',
           NEW.PC_PresentationOrder),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbu_ec_PC_ProductContent;
DELIMITER //
CREATE TRIGGER   tbu_ec_PC_ProductContent
BEFORE UPDATE ON ec_PC_ProductContent
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.PC_EntryCreatedTime = OLD.PC_EntryCreatedTime;
  SET NEW.PC_EntryUpdatedTime = CURRENT_TIMESTAMP();
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    5,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ProductContent',
    CONCAT('Update',
           'NEW.PC_ProductID=',
           NEW.PC_ProductID,
           'NEW.PC_PresentationOrder=',
           NEW.PC_PresentationOrder,
           'OLD.PC_ProductID=',
           OLD.PC_ProductID,
           'OLD.PC_PresentationOrder=',
           OLD.PC_PresentationOrder),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbd_ec_PC_ProductContent;
DELIMITER //
CREATE TRIGGER   tbd_ec_PC_ProductContent
BEFORE DELETE ON ec_PC_ProductContent
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    7,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ProductContent',
    CONCAT('Delete',
           'OLD.PC_ProductID=',
           OLD.PC_ProductID,
           'OLD.PC_PresentationOrder=',
           OLD.PC_PresentationOrder),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tai_ec_PC_ProductContent;
DELIMITER //
CREATE TRIGGER   tai_ec_PC_ProductContent
AFTER INSERT ON  ec_PC_ProductContent
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    4,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ProductContent',
    CONCAT('Insert',
           'NEW.PC_ProductID=',
           NEW.PC_ProductID,
           'NEW.PC_PresentationOrder=',
           NEW.PC_PresentationOrder),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tau_ec_PC_ProductContent;
DELIMITER //
CREATE TRIGGER   tau_ec_PC_ProductContent
AFTER UPDATE ON  ec_PC_ProductContent
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    6,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ProductContent',
    CONCAT('Update',
           'NEW.PC_ProductID=',
           NEW.PC_ProductID,
           'NEW.PC_PresentationOrder=',
           NEW.PC_PresentationOrder,
           'OLD.PC_ProductID=',
           OLD.PC_ProductID,
           'OLD.PC_PresentationOrder=',
           OLD.PC_PresentationOrder),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tad_ec_PC_ProductContent;
DELIMITER //
CREATE TRIGGER   tad_ec_PC_ProductContent
AFTER DELETE ON  ec_PC_ProductContent
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    8,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'ProductContent',
    CONCAT('Delete',
           'OLD.PC_ProductID=',
           OLD.PC_ProductID,
           'OLD.PC_PresentationOrder=',
           OLD.PC_PresentationOrder),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP PROCEDURE IF EXISTS sp_ec_PC_ProductContent;
DELIMITER //
CREATE PROCEDURE sp_ec_PC_ProductContent(
  -- --------------------------------------------------------------------------
  -- --------------------------------------------------------------------------
  __ProductID            BIGINT,
  __OrganizationID       BIGINT,
  _ProductTitle          VARCHAR(255),
  -- _ProductTypeID      BIGINT,
  _OrganizationName      VARCHAR(255),
  _ProductEdition        SMALLINT,
  _ProductStandardCode   VARCHAR(255),
  -- _ProductPublishDate VARCHAR(255),
  -- _ProductBasePricing NUMERIC(16,2),
  -- _ProductStatusID    BIGINT,
  -- _ProductReference   VARCHAR(1024),
  -- _Description        VARCHAR(1024)
  -- _Order              BIGINT,
  -- _Description        VARCHAR(1024)
  -- --------------------------------------------------------------------------
  __ContentID          BIGINT,
  _ContentTitle        VARCHAR(255),
  -- _ContentTypeID    BIGINT,
  -- _ProductID        BIGINT,
  _ContentEdition      SMALLINT,
  -- _ContentStandardCode VARCHAR(255),
  -- _ContentPublishDate  VARCHAR(255),
  -- _ContentBasePricing  NUMERIC(16,2),
  -- _ContentStatusID     BIGINT,
  -- _ContentText         TEXT,
  -- _ContentMIMEsetting  VARCHAR(255),
  -- _Description         VARCHAR(1024)
  -- --------------------------------------------------------------------------
  -- --------------------------------------------------------------------------
  _PresentationOrder                  BIGINT,
  -- --------------------------------------------------------------------------
  _ProductContentTypeID               BIGINT,
  -- --------------------------------------------------------------------------
  _ProductContentStatusID             BIGINT,
  -- --------------------------------------------------------------------------
  -- --------------------------------------------------------------------------
  _ContentText                        BIT,
  -- --------------------------------------------------------------------------
  _ContentTinyText                    BIT,
  -- --------------------------------------------------------------------------
  _ContentMediumText                  BIT,
  -- --------------------------------------------------------------------------
  _ContentLongText                    BIT,
  -- --------------------------------------------------------------------------
  _ContentBlob                        BIT,
  -- --------------------------------------------------------------------------
  _ContentTinyBlob                    BIT,
  -- --------------------------------------------------------------------------
  _ContentMediumBlob                  BIT,
  -- --------------------------------------------------------------------------
  _ContentLongBlob                    BIT,
  -- --------------------------------------------------------------------------
  _ContentExternalFile                BIT,
  -- --------------------------------------------------------------------------
  -- --------------------------------------------------------------------------
  _Description        VARCHAR(1024)
  -- --------------------------------------------------------------------------
  -- --------------------------------------------------------------------------
)
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _OrganizationID BIGINT;
  -- --------------------------------------------------------------------------
  DECLARE _ProductID BIGINT;
  -- --------------------------------------------------------------------------
  DECLARE _ContentID BIGINT;
  -- --------------------------------------------------------------------------
  IF (__OrganizationID IS NOT NULL)
  THEN
    SET _OrganizationID = __OrganizationID;
  ELSE
    SET _OrganizationID =
    sqlGetId(_OrganizationName);
    -- CAST(CONV(SUBSTRING(MD5(_OrganizationName),1,15),16,10)
    --      AS UNSIGNED INTEGER);
  END IF;
  -- --------------------------------------------------------------------------
  IF (__ProductID IS NOT NULL)
  THEN
    SET _ProductID = __ProductID;
  ELSE
    SET _ProductID =
    sqlGetId4(_OrganizationID,
              _ProductTitle,
              _ProductEdition,
              _ProductStandardCode
              );
    -- CAST(CONV(SUBSTRING(MD5(CONCAT(_OrganizationID,
    --                                _ProductTitle,
    --                                _ProductEdition,
    --                                _ProductStandardCode
    --                                )
    --                         ),
    --                     1,15
    --                     ),
    --           16,10
    --           )
    --      AS UNSIGNED INTEGER
    --      );
  END IF;
  -- --------------------------------------------------------------------------
  IF (__ContentID IS NOT NULL)
  THEN
    SET _ContentID = __ContentID;
  ELSE
    SET _ContentID =
    sqlGetId3(_ContentTitle,
              _ProductID,
              _ContentEdition -- ,
              -- _ContentStandardCode
              );
    -- CAST(CONV(SUBSTRING(MD5(CONCAT(_ContentTitle,
    --                                _ProductID,
    --                                _ContentEdition -- ,
    --                                -- _ContentStandardCode
    --                                )
    --                         ),
    --                     1,15
    --                     ),
    --           16,10
    --           )
    --      AS UNSIGNED INTEGER
    --      );
  END IF;
  -- --------------------------------------------------------------------------
  IF (_ContentText = 1)
  THEN
    INSERT INTO ec_PC_ProductContent(
      PC_ProductID,
      PC_PresentationOrder,
      PC_ProductContentTypeID,
      PC_ProductContentStatusID,
      PC_ContentTextID,
      PC_ContentTinyTextID,
      PC_ContentMediumTextID,
      PC_ContentLongTextID,
      PC_ContentBlobID,
      PC_ContentTinyBlobID,
      PC_ContentMediumBlobID,
      PC_ContentLongBlobID,
      PC_ContentExternalFileID,
      PC_Description
    ) VALUES (
      _ProductID,
      _PresentationOrder,
      _ProductContentTypeID,
      _ProductContentStatusID,
      _ContentID,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      _Description
    );
  END IF;
  -- --------------------------------------------------------------------------
  IF (_ContentTinyText = 1)
  THEN
    INSERT INTO ec_PC_ProductContent(
      PC_ProductID,
      PC_PresentationOrder,
      PC_ProductContentTypeID,
      PC_ProductContentStatusID,
      PC_ContentTextID,
      PC_ContentTinyTextID,
      PC_ContentMediumTextID,
      PC_ContentLongTextID,
      PC_ContentBlobID,
      PC_ContentTinyBlobID,
      PC_ContentMediumBlobID,
      PC_ContentLongBlobID,
      PC_ContentExternalFileID,
      PC_Description
    ) VALUES (
      _ProductID,
      _PresentationOrder,
      _ProductContentTypeID,
      _ProductContentStatusID,
      0,
      _ContentID,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      _Description
    );
  END IF;
  -- --------------------------------------------------------------------------
  IF (_ContentMediumText = 1)
  THEN
    INSERT INTO ec_PC_ProductContent(
      PC_ProductID,
      PC_PresentationOrder,
      PC_ProductContentTypeID,
      PC_ProductContentStatusID,
      PC_ContentTextID,
      PC_ContentTinyTextID,
      PC_ContentMediumTextID,
      PC_ContentLongTextID,
      PC_ContentBlobID,
      PC_ContentTinyBlobID,
      PC_ContentMediumBlobID,
      PC_ContentLongBlobID,
      PC_ContentExternalFileID,
      PC_Description
    ) VALUES (
      _ProductID,
      _PresentationOrder,
      _ProductContentTypeID,
      _ProductContentStatusID,
      0,
      0,
      _ContentID,
      0,
      0,
      0,
      0,
      0,
      0,
      _Description
    );
  END IF;
  -- --------------------------------------------------------------------------
  IF (_ContentLongText = 1)
  THEN
    INSERT INTO ec_PC_ProductContent(
      PC_ProductID,
      PC_PresentationOrder,
      PC_ProductContentTypeID,
      PC_ProductContentStatusID,
      PC_ContentTextID,
      PC_ContentTinyTextID,
      PC_ContentMediumTextID,
      PC_ContentLongTextID,
      PC_ContentBlobID,
      PC_ContentTinyBlobID,
      PC_ContentMediumBlobID,
      PC_ContentLongBlobID,
      PC_ContentExternalFileID,
      PC_Description
    ) VALUES (
      _ProductID,
      _PresentationOrder,
      _ProductContentTypeID,
      _ProductContentStatusID,
      0,
      0,
      0,
      _ContentID,
      0,
      0,
      0,
      0,
      0,
      _Description
    );
  END IF;
  -- --------------------------------------------------------------------------
  IF (_ContentBlob = 1)
  THEN
    INSERT INTO ec_PC_ProductContent(
      PC_ProductID,
      PC_PresentationOrder,
      PC_ProductContentTypeID,
      PC_ProductContentStatusID,
      PC_ContentTextID,
      PC_ContentTinyTextID,
      PC_ContentMediumTextID,
      PC_ContentLongTextID,
      PC_ContentBlobID,
      PC_ContentTinyBlobID,
      PC_ContentMediumBlobID,
      PC_ContentLongBlobID,
      PC_ContentExternalFileID,
      PC_Description
    ) VALUES (
      _ProductID,
      _PresentationOrder,
      _ProductContentTypeID,
      _ProductContentStatusID,
      0,
      0,
      0,
      0,
      _ContentID,
      0,
      0,
      0,
      0,
      _Description
    );
  END IF;
  -- --------------------------------------------------------------------------
  IF (_ContentTinyBlob = 1)
  THEN
    INSERT INTO ec_PC_ProductContent(
      PC_ProductID,
      PC_PresentationOrder,
      PC_ProductContentTypeID,
      PC_ProductContentStatusID,
      PC_ContentTextID,
      PC_ContentTinyTextID,
      PC_ContentMediumTextID,
      PC_ContentLongTextID,
      PC_ContentBlobID,
      PC_ContentTinyBlobID,
      PC_ContentMediumBlobID,
      PC_ContentLongBlobID,
      PC_ContentExternalFileID,
      PC_Description
    ) VALUES (
      _ProductID,
      _PresentationOrder,
      _ProductContentTypeID,
      _ProductContentStatusID,
      0,
      0,
      0,
      0,
      0,
      _ContentID,
      0,
      0,
      0,
      _Description
    );
  END IF;
  -- --------------------------------------------------------------------------
  IF (_ContentMediumBlob = 1)
  THEN
    INSERT INTO ec_PC_ProductContent(
      PC_ProductID,
      PC_PresentationOrder,
      PC_ProductContentTypeID,
      PC_ProductContentStatusID,
      PC_ContentTextID,
      PC_ContentTinyTextID,
      PC_ContentMediumTextID,
      PC_ContentLongTextID,
      PC_ContentBlobID,
      PC_ContentTinyBlobID,
      PC_ContentMediumBlobID,
      PC_ContentLongBlobID,
      PC_ContentExternalFileID,
      PC_Description
    ) VALUES (
      _ProductID,
      _PresentationOrder,
      _ProductContentTypeID,
      _ProductContentStatusID,
      0,
      0,
      0,
      0,
      0,
      0,
      _ContentID,
      0,
      0,
      _Description
    );
  END IF;
  -- --------------------------------------------------------------------------
  IF (_ContentLongBlob = 1)
  THEN
    INSERT INTO ec_PC_ProductContent(
      PC_ProductID,
      PC_PresentationOrder,
      PC_ProductContentTypeID,
      PC_ProductContentStatusID,
      PC_ContentTextID,
      PC_ContentTinyTextID,
      PC_ContentMediumTextID,
      PC_ContentLongTextID,
      PC_ContentBlobID,
      PC_ContentTinyBlobID,
      PC_ContentMediumBlobID,
      PC_ContentLongBlobID,
      PC_ContentExternalFileID,
      PC_Description
    ) VALUES (
      _ProductID,
      _PresentationOrder,
      _ProductContentTypeID,
      _ProductContentStatusID,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      _ContentID,
      0,
      _Description
    );
  END IF;
  -- --------------------------------------------------------------------------
  IF (_ContentExternalFile = 1)
  THEN
    INSERT INTO ec_PC_ProductContent(
      PC_ProductID,
      PC_PresentationOrder,
      PC_ProductContentTypeID,
      PC_ProductContentStatusID,
      PC_ContentTextID,
      PC_ContentTinyTextID,
      PC_ContentMediumTextID,
      PC_ContentLongTextID,
      PC_ContentBlobID,
      PC_ContentTinyBlobID,
      PC_ContentMediumBlobID,
      PC_ContentLongBlobID,
      PC_ContentExternalFileID,
      PC_Description
    ) VALUES (
      _ProductID,
      _PresentationOrder,
      _ProductContentTypeID,
      _ProductContentStatusID,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      _ContentID,
      _Description
    );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
===============================================================================
== Subschema: Annotation
===============================================================================
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbi_ec_A_AnnotationType;
DELIMITER //
CREATE TRIGGER   tbi_ec_A_AnnotationType
BEFORE INSERT ON ec_A_AnnotationType
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _AnnotationTypeID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.AT_EntryCreatedTime = CURRENT_TIMESTAMP();
  SET NEW.AT_EntryUpdatedTime = '0000-00-00 00:00:00';
  -- --------------------------------------------------------------------------
  IF ((NEW.AT_AnnotationTypeID IS NULL
       )
      OR
      (NEW.AT_AnnotationTypeID != 0
       )
      )
  THEN
    SET _AnnotationTypeID =
    sqlGetId(NEW.AT_AnnotationTypeName);
    -- CAST(CONV(SUBSTRING(MD5(NEW.AT_AnnotationTypeName),1,15),16,10)
    --      AS UNSIGNED INTEGER);
    IF (_AnnotationTypeID IS NULL)
    THEN
      SET _AnnotationTypeID = 0;
    END IF;
    SET NEW.AT_AnnotationTypeID = _AnnotationTypeID;
  END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.AT_AnnotationTypeID IS NULL
  --      )
  --     -- OR
  --     -- (NEW.AT_AnnotationTypeID = 0
  --     --  )
  --     )
  -- THEN
  --   SELECT
  --     MAX(ec_A_AnnotationType.AT_AnnotationTypeID)+1
  --   INTO
  --     _AnnotationTypeID
  --   FROM
  --     ec_A_AnnotationType;
  --   IF (_AnnotationTypeID IS NULL)
  --   THEN
  --     SET _AnnotationTypeID = 0;
  --   END IF;
  --   SET NEW.AT_AnnotationTypeID = _AnnotationTypeID;
  -- END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    3,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationType',
    CONCAT('Insert',
           'NEW.AT_AnnotationTypeID=',
           NEW.AT_AnnotationTypeID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbu_ec_A_AnnotationType;
DELIMITER //
CREATE TRIGGER   tbu_ec_A_AnnotationType
BEFORE UPDATE ON ec_A_AnnotationType
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.AT_EntryCreatedTime = OLD.AT_EntryCreatedTime;
  SET NEW.AT_EntryUpdatedTime = CURRENT_TIMESTAMP();
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    5,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationType',
    CONCAT('Update',
           'NEW.AT_AnnotationTypeID=',
           NEW.AT_AnnotationTypeID,
           'OLD.AT_AnnotationTypeID=',
           OLD.AT_AnnotationTypeID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbd_ec_A_AnnotationType;
DELIMITER //
CREATE TRIGGER   tbd_ec_A_AnnotationType
BEFORE DELETE ON ec_A_AnnotationType
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    7,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationType',
    CONCAT('Delete',
           'OLD.AT_AnnotationTypeID=',
           OLD.AT_AnnotationTypeID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tai_ec_A_AnnotationType;
DELIMITER //
CREATE TRIGGER   tai_ec_A_AnnotationType
AFTER INSERT ON  ec_A_AnnotationType
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    4,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationType',
    CONCAT('Insert',
           'NEW.AT_AnnotationTypeID=',
           NEW.AT_AnnotationTypeID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tau_ec_A_AnnotationType;
DELIMITER //
CREATE TRIGGER   tau_ec_A_AnnotationType
AFTER UPDATE ON  ec_A_AnnotationType
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    6,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationType',
    CONCAT('Update',
           'NEW.AT_AnnotationTypeID=',
           NEW.AT_AnnotationTypeID,
           'OLD.AT_AnnotationTypeID=',
           OLD.AT_AnnotationTypeID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tad_ec_A_AnnotationType;
DELIMITER //
CREATE TRIGGER   tad_ec_A_AnnotationType
AFTER DELETE ON  ec_A_AnnotationType
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    8,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationType',
    CONCAT('Delete',
           'OLD.AT_AnnotationTypeID=',
           OLD.AT_AnnotationTypeID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_A_AnnotationType
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  AUTO_INCREMENT = 100
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_A_AnnotationType
MODIFY COLUMN
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  AT_AnnotationTypeID                   BIGINT DEFAULT 0              NOT NULL
                                        AUTO_INCREMENT
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbi_ec_A_AnnotationStatus;
DELIMITER //
CREATE TRIGGER   tbi_ec_A_AnnotationStatus
BEFORE INSERT ON ec_A_AnnotationStatus
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _AnnotationStatusID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.As_EntryCreatedTime = CURRENT_TIMESTAMP();
  SET NEW.As_EntryUpdatedTime = '0000-00-00 00:00:00';
  -- --------------------------------------------------------------------------
  IF ((NEW.As_AnnotationStatusID IS NULL
       )
      OR
      (NEW.As_AnnotationStatusID != 0
       )
      )
  THEN
    SET _AnnotationStatusID =
    sqlGetId(NEW.As_AnnotationStatusName);
    -- CAST(CONV(SUBSTRING(MD5(NEW.As_AnnotationStatusName),1,15),16,10)
    --      AS UNSIGNED INTEGER);
    IF (_AnnotationStatusID IS NULL)
    THEN
      SET _AnnotationStatusID = 0;
    END IF;
    SET NEW.As_AnnotationStatusID = _AnnotationStatusID;
  END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.As_AnnotationStatusID IS NULL
  --      )
  --     -- OR
  --     -- (NEW.As_AnnotationStatusID = 0
  --     --  )
  --     )
  -- THEN
  --   SELECT
  --     MAX(ec_A_AnnotationStatus.As_AnnotationStatusID)+1
  --   INTO
  --     _AnnotationStatusID
  --   FROM
  --     ec_A_AnnotationStatus;
  --   IF (_AnnotationStatusID IS NULL)
  --   THEN
  --     SET _AnnotationStatusID = 0;
  --   END IF;
  --   SET NEW.As_AnnotationStatusID = _AnnotationStatusID;
  -- END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    3,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationStatus',
    CONCAT('Insert',
           'NEW.As_AnnotationStatusID=',
           NEW.As_AnnotationStatusID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbu_ec_A_AnnotationStatus;
DELIMITER //
CREATE TRIGGER   tbu_ec_A_AnnotationStatus
BEFORE UPDATE ON ec_A_AnnotationStatus
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.As_EntryCreatedTime = OLD.As_EntryCreatedTime;
  SET NEW.As_EntryUpdatedTime = CURRENT_TIMESTAMP();
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    5,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationStatus',
    CONCAT('Update',
           'NEW.As_AnnotationStatusID=',
           NEW.As_AnnotationStatusID,
           'OLD.As_AnnotationStatusID=',
           OLD.As_AnnotationStatusID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbd_ec_A_AnnotationStatus;
DELIMITER //
CREATE TRIGGER   tbd_ec_A_AnnotationStatus
BEFORE DELETE ON ec_A_AnnotationStatus
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    7,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationStatus',
    CONCAT('Delete',
           'OLD.As_AnnotationStatusID=',
           OLD.As_AnnotationStatusID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tai_ec_A_AnnotationStatus;
DELIMITER //
CREATE TRIGGER   tai_ec_A_AnnotationStatus
AFTER INSERT ON  ec_A_AnnotationStatus
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    4,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationStatus',
    CONCAT('Insert',
           'NEW.As_AnnotationStatusID=',
           NEW.As_AnnotationStatusID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tau_ec_A_AnnotationStatus;
DELIMITER //
CREATE TRIGGER   tau_ec_A_AnnotationStatus
AFTER UPDATE ON  ec_A_AnnotationStatus
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    6,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationStatus',
    CONCAT('Update',
           'NEW.As_AnnotationStatusID=',
           NEW.As_AnnotationStatusID,
           'OLD.As_AnnotationStatusID=',
           OLD.As_AnnotationStatusID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tad_ec_A_AnnotationStatus;
DELIMITER //
CREATE TRIGGER   tad_ec_A_AnnotationStatus
AFTER DELETE ON  ec_A_AnnotationStatus
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    8,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationStatus',
    CONCAT('Delete',
           'OLD.As_AnnotationStatusID=',
           OLD.As_AnnotationStatusID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_A_AnnotationStatus
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  AUTO_INCREMENT = 100
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_A_AnnotationStatus
MODIFY COLUMN
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  As_AnnotationStatusID                 BIGINT DEFAULT 0              NOT NULL
                                        AUTO_INCREMENT
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbi_ec_A_Annotation;
DELIMITER //
CREATE TRIGGER   tbi_ec_A_Annotation
BEFORE INSERT ON ec_A_Annotation
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _AnnotationID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.A_EntryCreatedTime = CURRENT_TIMESTAMP();
  SET NEW.A_EntryUpdatedTime = '0000-00-00 00:00:00';
  -- --------------------------------------------------------------------------
  IF ((NEW.A_AnnotationID IS NULL
       )
      OR
      (NEW.A_AnnotationID != 0
       )
      )
  THEN
    SET _AnnotationID =
    sqlGetId5(NEW.A_TargetID,
              NEW.A_AnnotationTypeID,
              NEW.A_ProductID,
              NEW.A_AnnotationKey,
              NEW.A_Annotation
              );
    -- CAST(CONV(SUBSTRING(MD5(CONCAT(NEW.A_TargetID,
    --                                NEW.A_AnnotationTypeID,
    --                                NEW.A_ProductID,
    --                                NEW.A_AnnotationKey,
    --                                NEW.A_Annotation
    --                                )
    --                         ),
    --                     1,15
    --                     ),
    --           16,10
    --           )
    --      AS UNSIGNED INTEGER
    --      );
    IF (_AnnotationID IS NULL)
    THEN
      SET _AnnotationID = 0;
    END IF;
    SET NEW.A_AnnotationID = _AnnotationID;
  END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.A_AnnotationID IS NULL
  --      )
  --     -- OR
  --     -- (NEW.A_AnnotationID = 0
  --     --  )
  --     )
  -- THEN
  --   SELECT
  --     MAX(ec_A_Annotation.A_AnnotationID)+1
  --   INTO
  --     _AnnotationID
  --   FROM
  --     ec_A_Annotation;
  --   IF (_AnnotationID IS NULL)
  --   THEN
  --     SET _AnnotationID = 0;
  --   END IF;
  --   SET NEW.A_AnnotationID = _AnnotationID;
  -- END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.A_AnnotationTypeID IS NULL
  --      )
  --     OR
  --     (NEW.A_AnnotationTypeID < 1
  --      )
  --     )
  -- THEN
  --   SET NEW.A_AnnotationTypeID = 1;
  -- END IF;
  -- --------------------------------------------------------------------------
  IF ((NEW.A_AnnotationStatusID IS NULL
       )
      OR
      (NEW.A_AnnotationStatusID < 1
       )
      )
  THEN
    SET NEW.A_AnnotationStatusID = 1;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    3,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'Annotation',
    CONCAT('Insert',
           'NEW.A_AnnotationID=',
           NEW.A_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbu_ec_A_Annotation;
DELIMITER //
CREATE TRIGGER   tbu_ec_A_Annotation
BEFORE UPDATE ON ec_A_Annotation
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.A_EntryCreatedTime = OLD.A_EntryCreatedTime;
  SET NEW.A_EntryUpdatedTime = CURRENT_TIMESTAMP();
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    5,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'Annotation',
    CONCAT('Update',
           'NEW.A_AnnotationID=',
           NEW.A_AnnotationID,
           'OLD.A_AnnotationID=',
           OLD.A_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbd_ec_A_Annotation;
DELIMITER //
CREATE TRIGGER   tbd_ec_A_Annotation
BEFORE DELETE ON ec_A_Annotation
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    7,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'Annotation',
    CONCAT('Delete',
           'OLD.A_AnnotationID=',
           OLD.A_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tai_ec_A_Annotation;
DELIMITER //
CREATE TRIGGER   tai_ec_A_Annotation
AFTER INSERT ON  ec_A_Annotation
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    4,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'Annotation',
    CONCAT('Insert',
           'NEW.A_AnnotationID=',
           NEW.A_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tau_ec_A_Annotation;
DELIMITER //
CREATE TRIGGER   tau_ec_A_Annotation
AFTER UPDATE ON  ec_A_Annotation
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    6,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'Annotation',
    CONCAT('Update',
           'NEW.A_AnnotationID=',
           NEW.A_AnnotationID,
           'OLD.A_AnnotationID=',
           OLD.A_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tad_ec_A_Annotation;
DELIMITER //
CREATE TRIGGER   tad_ec_A_Annotation
AFTER DELETE ON  ec_A_Annotation
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    8,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'Annotation',
    CONCAT('Delete',
           'OLD.A_AnnotationID=',
           OLD.A_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_A_Annotation
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  AUTO_INCREMENT = 100
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_A_Annotation
MODIFY COLUMN
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  A_AnnotationID                           BIGINT DEFAULT 0              NOT NULL
                                        AUTO_INCREMENT
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbi_ec_A_AnnotationFullText;
DELIMITER //
CREATE TRIGGER   tbi_ec_A_AnnotationFullText
BEFORE INSERT ON ec_A_AnnotationFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _AnnotationID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.Aft_EntryCreatedTime = CURRENT_TIMESTAMP();
  SET NEW.Aft_EntryUpdatedTime = '0000-00-00 00:00:00';
  -- --------------------------------------------------------------------------
  IF ((NEW.Aft_AnnotationID IS NULL
       )
      OR
      (NEW.Aft_AnnotationID != 0
       )
      )
  THEN
    SET _AnnotationID =
    sqlGetId5(NEW.Aft_TargetID,
              NEW.Aft_AnnotationTypeID,
              NEW.Aft_ProductID,
              NEW.Aft_AnnotationKey,
              NEW.Aft_Annotation
              );
    -- CAST(CONV(SUBSTRING(MD5(CONCAT(NEW.Aft_TargetID,
    --                                NEW.Aft_AnnotationTypeID,
    --                                NEW.Aft_ProductID,
    --                                NEW.Aft_AnnotationKey,
    --                                NEW.Aft_Annotation
    --                                )
    --                         ),
    --                     1,15
    --                     ),
    --           16,10
    --           )
    --      AS UNSIGNED INTEGER
    --      );
    IF (_AnnotationID IS NULL)
    THEN
      SET _AnnotationID = 0;
    END IF;
    SET NEW.Aft_AnnotationID = _AnnotationID;
  END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.Aft_AnnotationID IS NULL
  --      )
  --     -- OR
  --     -- (NEW.Aft_AnnotationID = 0
  --     --  )
  --     )
  -- THEN
  --   SELECT
  --     MAX(ec_A_AnnotationFullText.Aft_AnnotationID)+1
  --   INTO
  --     _AnnotationID
  --   FROM
  --     ec_A_AnnotationFullText;
  --   IF (_AnnotationID IS NULL)
  --   THEN
  --     SET _AnnotationID = 0;
  --   END IF;
  --   SET NEW.Aft_AnnotationID = _AnnotationID;
  -- END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    3,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationFullText',
    CONCAT('Insert',
           'NEW.Aft_AnnotationID=',
           NEW.Aft_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbu_ec_A_AnnotationFullText;
DELIMITER //
CREATE TRIGGER   tbu_ec_A_AnnotationFullText
BEFORE UPDATE ON ec_A_AnnotationFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.Aft_EntryCreatedTime = OLD.Aft_EntryCreatedTime;
  SET NEW.Aft_EntryUpdatedTime = CURRENT_TIMESTAMP();
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    5,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationFullText',
    CONCAT('Update',
           'NEW.Aft_AnnotationID=',
           NEW.Aft_AnnotationID,
           'OLD.Aft_AnnotationID=',
           OLD.Aft_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbd_ec_A_AnnotationFullText;
DELIMITER //
CREATE TRIGGER   tbd_ec_A_AnnotationFullText
BEFORE DELETE ON ec_A_AnnotationFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    7,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationFullText',
    CONCAT('Delete',
           'OLD.Aft_AnnotationID=',
           OLD.Aft_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tai_ec_A_AnnotationFullText;
DELIMITER //
CREATE TRIGGER   tai_ec_A_AnnotationFullText
AFTER INSERT ON  ec_A_AnnotationFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    4,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationFullText',
    CONCAT('Insert',
           'NEW.Aft_AnnotationID=',
           NEW.Aft_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tau_ec_A_AnnotationFullText;
DELIMITER //
CREATE TRIGGER   tau_ec_A_AnnotationFullText
AFTER UPDATE ON  ec_A_AnnotationFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    6,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationFullText',
    CONCAT('Update',
           'NEW.Aft_AnnotationID=',
           NEW.Aft_AnnotationID,
           'OLD.Aft_AnnotationID=',
           OLD.Aft_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tad_ec_A_AnnotationFullText;
DELIMITER //
CREATE TRIGGER   tad_ec_A_AnnotationFullText
AFTER DELETE ON  ec_A_AnnotationFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    8,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationFullText',
    CONCAT('Delete',
           'OLD.Aft_AnnotationID=',
           OLD.Aft_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_A_AnnotationFullText
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  AUTO_INCREMENT = 100
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_A_AnnotationFullText
MODIFY COLUMN
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  Aft_AnnotationID                         BIGINT DEFAULT 0              NOT NULL
                                        AUTO_INCREMENT
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP PROCEDURE IF EXISTS sp_ec_A_Annotation;
DELIMITER //
CREATE PROCEDURE sp_ec_A_Annotation(
  -- --------------------------------------------------------------------------
  _AnnotationKey       VARCHAR(255),
  _Annotation          VARCHAR(255),
  _AnnotationTypeID    BIGINT,
  -- --------------------------------------------------------------------------
  __TargetID                 BIGINT,
  _TargetEmailAddress        VARCHAR(255),
  -- _TargetName             VARCHAR(255),
  -- _TargetPasswordHash     VARCHAR(255),
  -- _TargetGender           CHAR(1),
  -- _TargetFromInformation  VARCHAR(255),
  -- _TargetBirthInformation VARCHAR(255),
  -- _TargetTypeID           BIGINT,
  -- _TargetPhone            VARCHAR(255),
  -- _TargetAddress          VARCHAR(255),
  -- _TargetStatusID         BIGINT,
  -- _Description            VARCHAR(1024),
  -- --------------------------------------------------------------------------
  __ProductID            BIGINT,
  __OrganizationID       BIGINT,
  _ProductTitle          VARCHAR(255),
  -- _ProductTypeID      BIGINT,
  _OrganizationName      VARCHAR(255),
  _ProductEdition        SMALLINT,
  _ProductStandardCode   VARCHAR(255),
  -- _ProductPublishDate VARCHAR(255),
  -- _ProductBasePricing NUMERIC(16,2),
  -- _ProductStatusID    BIGINT,
  -- _ProductReference   VARCHAR(1024),
  -- _Description        VARCHAR(1024)
  -- _Order              BIGINT,
  -- _Description        VARCHAR(1024)
  -- --------------------------------------------------------------------------
  _AnnotationStatusID    BIGINT,
  _Description           VARCHAR(1024)
  -- --------------------------------------------------------------------------
)
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _TargetID BIGINT;
  -- --------------------------------------------------------------------------
  DECLARE _OrganizationID BIGINT;
  -- --------------------------------------------------------------------------
  DECLARE _ProductID BIGINT;
  -- --------------------------------------------------------------------------
  IF (__TargetID IS NOT NULL)
  THEN
    SET _TargetID = __TargetID;
  ELSE
    SET _TargetID =
    sqlGetId(_TargetEmailAddress);
    -- CAST(CONV(SUBSTRING(MD5(_TargetEmailAddress),1,15),16,10)
    --      AS UNSIGNED INTEGER);
  END IF;
  -- --------------------------------------------------------------------------
  IF (__OrganizationID IS NOT NULL)
  THEN
    SET _OrganizationID = __OrganizationID;
  ELSE
    SET _OrganizationID =
    sqlGetId(_OrganizationName);
    -- CAST(CONV(SUBSTRING(MD5(_OrganizationName),1,15),16,10)
    --      AS UNSIGNED INTEGER);
  END IF;
  -- --------------------------------------------------------------------------
  IF (__ProductID IS NOT NULL)
  THEN
    SET _ProductID = __ProductID;
  ELSE
    SET _ProductID =
    sqlGetId4(_OrganizationID,
              _ProductTitle,
              _ProductEdition,
              _ProductStandardCode
              );
    -- CAST(CONV(SUBSTRING(MD5(CONCAT(_OrganizationID,
    --                                _ProductTitle,
    --                                _ProductEdition,
    --                                _ProductStandardCode
    --                                )
    --                         ),
    --                     1,15
    --                     ),
    --           16,10
    --           )
    --      AS UNSIGNED INTEGER
    --      );
  END IF;
  -- --------------------------------------------------------------------------
  INSERT INTO ec_A_Annotation(
    A_AnnotationKey,
    A_Annotation,
    A_AnnotationTypeID,
    A_TargetID,
    A_ProductID,
    A_AnnotationStatusID,
    A_Description
  ) VALUES (
    _AnnotationKey,
    _Annotation,
    _AnnotationTypeID,
    _TargetID,
    _ProductID,
    _AnnotationStatusID,
    _Description
  );
  -- --------------------------------------------------------------------------
  INSERT INTO ec_A_AnnotationFullText(
    Aft_AnnotationKey,
    Aft_Annotation,
    Aft_AnnotationTypeID,
    Aft_TargetID,
    Aft_ProductID,
    Aft_Description
  ) VALUES (
    _AnnotationKey,
    _Annotation,
    _AnnotationTypeID,
    _TargetID,
    _ProductID,
    _Description
  );
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbi_ec_A_AnnotationText;
DELIMITER //
CREATE TRIGGER   tbi_ec_A_AnnotationText
BEFORE INSERT ON ec_A_AnnotationText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _AnnotationID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.A_EntryCreatedTime = CURRENT_TIMESTAMP();
  SET NEW.A_EntryUpdatedTime = '0000-00-00 00:00:00';
  -- --------------------------------------------------------------------------
  IF ((NEW.A_AnnotationID IS NULL
       )
      OR
      (NEW.A_AnnotationID != 0
       )
      )
  THEN
    SET _AnnotationID =
    sqlGetId5(NEW.A_TargetID,
              NEW.A_AnnotationTypeID,
              NEW.A_ContentID,
              NEW.A_AnnotationKey,
              NEW.A_Annotation
              );
    -- CAST(CONV(SUBSTRING(MD5(CONCAT(NEW.A_TargetID,
    --                                NEW.A_AnnotationTypeID,
    --                                NEW.A_ContentID,
    --                                NEW.A_AnnotationKey,
    --                                NEW.A_Annotation
    --                                )
    --                         ),
    --                     1,15
    --                     ),
    --           16,10
    --           )
    --      AS UNSIGNED INTEGER
    --      );
    IF (_AnnotationID IS NULL)
    THEN
      SET _AnnotationID = 0;
    END IF;
    SET NEW.A_AnnotationID = _AnnotationID;
  END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.A_AnnotationID IS NULL
  --      )
  --     -- OR
  --     -- (NEW.A_AnnotationID = 0
  --     --  )
  --     )
  -- THEN
  --   SELECT
  --     MAX(ec_A_Annotation.A_AnnotationID)+1
  --   INTO
  --     _AnnotationID
  --   FROM
  --     ec_A_AnnotationText;
  --   IF (_AnnotationID IS NULL)
  --   THEN
  --     SET _AnnotationID = 0;
  --   END IF;
  --   SET NEW.A_AnnotationID = _AnnotationID;
  -- END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.A_AnnotationTypeID IS NULL
  --      )
  --     OR
  --     (NEW.A_AnnotationTypeID < 1
  --      )
  --     )
  -- THEN
  --   SET NEW.A_AnnotationTypeID = 1;
  -- END IF;
  -- --------------------------------------------------------------------------
  IF ((NEW.A_AnnotationStatusID IS NULL
       )
      OR
      (NEW.A_AnnotationStatusID < 1
       )
      )
  THEN
    SET NEW.A_AnnotationStatusID = 1;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    3,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationText',
    CONCAT('Insert',
           'NEW.A_AnnotationID=',
           NEW.A_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbu_ec_A_AnnotationText;
DELIMITER //
CREATE TRIGGER   tbu_ec_A_AnnotationText
BEFORE UPDATE ON ec_A_AnnotationText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.A_EntryCreatedTime = OLD.A_EntryCreatedTime;
  SET NEW.A_EntryUpdatedTime = CURRENT_TIMESTAMP();
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    5,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationText',
    CONCAT('Update',
           'NEW.A_AnnotationID=',
           NEW.A_AnnotationID,
           'OLD.A_AnnotationID=',
           OLD.A_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbd_ec_A_AnnotationText;
DELIMITER //
CREATE TRIGGER   tbd_ec_A_AnnotationText
BEFORE DELETE ON ec_A_AnnotationText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    7,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationText',
    CONCAT('Delete',
           'OLD.A_AnnotationID=',
           OLD.A_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tai_ec_A_AnnotationText;
DELIMITER //
CREATE TRIGGER   tai_ec_A_AnnotationText
AFTER INSERT ON  ec_A_AnnotationText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    4,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationText',
    CONCAT('Insert',
           'NEW.A_AnnotationID=',
           NEW.A_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tau_ec_A_AnnotationText;
DELIMITER //
CREATE TRIGGER   tau_ec_A_AnnotationText
AFTER UPDATE ON  ec_A_AnnotationText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    6,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationText',
    CONCAT('Update',
           'NEW.A_AnnotationID=',
           NEW.A_AnnotationID,
           'OLD.A_AnnotationID=',
           OLD.A_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tad_ec_A_AnnotationText;
DELIMITER //
CREATE TRIGGER   tad_ec_A_AnnotationText
AFTER DELETE ON  ec_A_AnnotationText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    8,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationText',
    CONCAT('Delete',
           'OLD.A_AnnotationID=',
           OLD.A_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_A_AnnotationText
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  AUTO_INCREMENT = 100
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_A_AnnotationText
MODIFY COLUMN
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  A_AnnotationID                           BIGINT DEFAULT 0              NOT NULL
                                        AUTO_INCREMENT
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbi_ec_A_AnnotationTextFullText;
DELIMITER //
CREATE TRIGGER   tbi_ec_A_AnnotationTextFullText
BEFORE INSERT ON ec_A_AnnotationTextFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _AnnotationID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.Aft_EntryCreatedTime = CURRENT_TIMESTAMP();
  SET NEW.Aft_EntryUpdatedTime = '0000-00-00 00:00:00';
  -- --------------------------------------------------------------------------
  IF ((NEW.Aft_AnnotationID IS NULL
       )
      OR
      (NEW.Aft_AnnotationID != 0
       )
      )
  THEN
    SET _AnnotationID =
    sqlGetId5(NEW.Aft_TargetID,
              NEW.Aft_AnnotationTypeID,
              NEW.Aft_ContentID,
              NEW.Aft_AnnotationKey,
              NEW.Aft_Annotation
              );
    -- CAST(CONV(SUBSTRING(MD5(CONCAT(NEW.Aft_TargetID,
    --                                NEW.Aft_AnnotationTypeID,
    --                                NEW.Aft_ContentID,
    --                                NEW.Aft_AnnotationKey,
    --                                NEW.Aft_Annotation
    --                                )
    --                         ),
    --                     1,15
    --                     ),
    --           16,10
    --           )
    --      AS UNSIGNED INTEGER
    --      );
    IF (_AnnotationID IS NULL)
    THEN
      SET _AnnotationID = 0;
    END IF;
    SET NEW.Aft_AnnotationID = _AnnotationID;
  END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.Aft_AnnotationID IS NULL
  --      )
  --     -- OR
  --     -- (NEW.Aft_AnnotationID = 0
  --     --  )
  --     )
  -- THEN
  --   SELECT
  --     MAX(ec_A_AnnotationTextFullText.Aft_AnnotationID)+1
  --   INTO
  --     _AnnotationID
  --   FROM
  --     ec_A_AnnotationTextFullText;
  --   IF (_AnnotationID IS NULL)
  --   THEN
  --     SET _AnnotationID = 0;
  --   END IF;
  --   SET NEW.Aft_AnnotationID = _AnnotationID;
  -- END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    3,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationTextFullText',
    CONCAT('Insert',
           'NEW.Aft_AnnotationID=',
           NEW.Aft_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbu_ec_A_AnnotationTextFullText;
DELIMITER //
CREATE TRIGGER   tbu_ec_A_AnnotationTextFullText
BEFORE UPDATE ON ec_A_AnnotationTextFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.Aft_EntryCreatedTime = OLD.Aft_EntryCreatedTime;
  SET NEW.Aft_EntryUpdatedTime = CURRENT_TIMESTAMP();
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    5,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationTextFullText',
    CONCAT('Update',
           'NEW.Aft_AnnotationID=',
           NEW.Aft_AnnotationID,
           'OLD.Aft_AnnotationID=',
           OLD.Aft_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbd_ec_A_AnnotationTextFullText;
DELIMITER //
CREATE TRIGGER   tbd_ec_A_AnnotationTextFullText
BEFORE DELETE ON ec_A_AnnotationTextFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    7,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationTextFullText',
    CONCAT('Delete',
           'OLD.Aft_AnnotationID=',
           OLD.Aft_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tai_ec_A_AnnotationTextFullText;
DELIMITER //
CREATE TRIGGER   tai_ec_A_AnnotationTextFullText
AFTER INSERT ON  ec_A_AnnotationTextFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    4,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationTextFullText',
    CONCAT('Insert',
           'NEW.Aft_AnnotationID=',
           NEW.Aft_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tau_ec_A_AnnotationTextFullText;
DELIMITER //
CREATE TRIGGER   tau_ec_A_AnnotationTextFullText
AFTER UPDATE ON  ec_A_AnnotationTextFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    6,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationTextFullText',
    CONCAT('Update',
           'NEW.Aft_AnnotationID=',
           NEW.Aft_AnnotationID,
           'OLD.Aft_AnnotationID=',
           OLD.Aft_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tad_ec_A_AnnotationTextFullText;
DELIMITER //
CREATE TRIGGER   tad_ec_A_AnnotationTextFullText
AFTER DELETE ON  ec_A_AnnotationTextFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    8,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationTextFullText',
    CONCAT('Delete',
           'OLD.Aft_AnnotationID=',
           OLD.Aft_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_A_AnnotationTextFullText
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  AUTO_INCREMENT = 100
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_A_AnnotationTextFullText
MODIFY COLUMN
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  Aft_AnnotationID                         BIGINT DEFAULT 0              NOT NULL
                                        AUTO_INCREMENT
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP PROCEDURE IF EXISTS sp_ec_A_AnnotationText;
DELIMITER //
CREATE PROCEDURE sp_ec_A_AnnotationText(
  -- --------------------------------------------------------------------------
  _AnnotationKey       VARCHAR(255),
  _Annotation          VARCHAR(255),
  _AnnotationTypeID    BIGINT,
  -- --------------------------------------------------------------------------
  __TargetID                 BIGINT,
  _TargetEmailAddress        VARCHAR(255),
  -- _TargetName             VARCHAR(255),
  -- _TargetPasswordHash     VARCHAR(255),
  -- _TargetGender           CHAR(1),
  -- _TargetFromInformation  VARCHAR(255),
  -- _TargetBirthInformation VARCHAR(255),
  -- _TargetTypeID           BIGINT,
  -- _TargetPhone            VARCHAR(255),
  -- _TargetAddress          VARCHAR(255),
  -- _TargetStatusID         BIGINT,
  -- _Description            VARCHAR(1024),
  -- --------------------------------------------------------------------------
  __ProductID            BIGINT,
  __OrganizationID       BIGINT,
  _ProductTitle          VARCHAR(255),
  -- _ProductTypeID      BIGINT,
  _OrganizationName      VARCHAR(255),
  _ProductEdition        SMALLINT,
  _ProductStandardCode   VARCHAR(255),
  -- _ProductPublishDate VARCHAR(255),
  -- _ProductBasePricing NUMERIC(16,2),
  -- _ProductStatusID    BIGINT,
  -- _ProductReference   VARCHAR(1024),
  -- _Description        VARCHAR(1024)
  -- _Order              BIGINT,
  -- _Description        VARCHAR(1024)
  -- --------------------------------------------------------------------------
  _AnnotationStatusID    BIGINT,
  _Description           VARCHAR(1024)
  -- --------------------------------------------------------------------------
)
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _TargetID BIGINT;
  -- --------------------------------------------------------------------------
  DECLARE _OrganizationID BIGINT;
  -- --------------------------------------------------------------------------
  DECLARE _ProductID BIGINT;
  -- --------------------------------------------------------------------------
  IF (__TargetID IS NOT NULL)
  THEN
    SET _TargetID = __TargetID;
  ELSE
    SET _TargetID =
    sqlGetId(_TargetEmailAddress);
    -- CAST(CONV(SUBSTRING(MD5(_TargetEmailAddress),1,15),16,10)
    --      AS UNSIGNED INTEGER);
  END IF;
  -- --------------------------------------------------------------------------
  IF (__OrganizationID IS NOT NULL)
  THEN
    SET _OrganizationID = __OrganizationID;
  ELSE
    SET _OrganizationID =
    sqlGetId(_OrganizationName);
    -- CAST(CONV(SUBSTRING(MD5(_OrganizationName),1,15),16,10)
    --      AS UNSIGNED INTEGER);
  END IF;
  -- --------------------------------------------------------------------------
  IF (__ProductID IS NOT NULL)
  THEN
    SET _ProductID = __ProductID;
  ELSE
    SET _ProductID =
    sqlGetId4(_OrganizationID,
              _ProductTitle,
              _ProductEdition,
              _ProductStandardCode
              );
    -- CAST(CONV(SUBSTRING(MD5(CONCAT(_OrganizationID,
    --                                _ProductTitle,
    --                                _ProductEdition,
    --                                _ProductStandardCode
    --                                )
    --                         ),
    --                     1,15
    --                     ),
    --           16,10
    --           )
    --      AS UNSIGNED INTEGER
    --      );
  END IF;
  -- --------------------------------------------------------------------------
  INSERT INTO ec_A_AnnotationText(
    A_AnnotationKey,
    A_Annotation,
    A_AnnotationTypeID,
    A_TargetID,
    A_ContentID,
    A_AnnotationStatusID,
    A_Description
  ) VALUES (
    _AnnotationKey,
    _Annotation,
    _AnnotationTypeID,
    _TargetID,
    _ProductID,
    _AnnotationStatusID,
    _Description
  );
  -- --------------------------------------------------------------------------
  INSERT INTO ec_A_AnnotationTextFullText(
    Aft_AnnotationKey,
    Aft_Annotation,
    Aft_AnnotationTypeID,
    Aft_TargetID,
    Aft_ContentID,
    Aft_Description
  ) VALUES (
    _AnnotationKey,
    _Annotation,
    _AnnotationTypeID,
    _TargetID,
    _ProductID,
    _Description
  );
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbi_ec_A_AnnotationTinyText;
DELIMITER //
CREATE TRIGGER   tbi_ec_A_AnnotationTinyText
BEFORE INSERT ON ec_A_AnnotationTinyText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _AnnotationID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.A_EntryCreatedTime = CURRENT_TIMESTAMP();
  SET NEW.A_EntryUpdatedTime = '0000-00-00 00:00:00';
  -- --------------------------------------------------------------------------
  IF ((NEW.A_AnnotationID IS NULL
       )
      OR
      (NEW.A_AnnotationID != 0
       )
      )
  THEN
    SET _AnnotationID =
    sqlGetId5(NEW.A_TargetID,
              NEW.A_AnnotationTypeID,
              NEW.A_ContentID,
              NEW.A_AnnotationKey,
              NEW.A_Annotation
              );
    -- CAST(CONV(SUBSTRING(MD5(CONCAT(NEW.A_TargetID,
    --                                NEW.A_AnnotationTypeID,
    --                                NEW.A_ContentID,
    --                                NEW.A_AnnotationKey,
    --                                NEW.A_Annotation
    --                                )
    --                         ),
    --                     1,15
    --                     ),
    --           16,10
    --           )
    --      AS UNSIGNED INTEGER
    --      );
    IF (_AnnotationID IS NULL)
    THEN
      SET _AnnotationID = 0;
    END IF;
    SET NEW.A_AnnotationID = _AnnotationID;
  END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.A_AnnotationID IS NULL
  --      )
  --     -- OR
  --     -- (NEW.A_AnnotationID = 0
  --     --  )
  --     )
  -- THEN
  --   SELECT
  --     MAX(ec_A_Annotation.A_AnnotationID)+1
  --   INTO
  --     _AnnotationID
  --   FROM
  --     ec_A_AnnotationTinyText;
  --   IF (_AnnotationID IS NULL)
  --   THEN
  --     SET _AnnotationID = 0;
  --   END IF;
  --   SET NEW.A_AnnotationID = _AnnotationID;
  -- END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.A_AnnotationTypeID IS NULL
  --      )
  --     OR
  --     (NEW.A_AnnotationTypeID < 1
  --      )
  --     )
  -- THEN
  --   SET NEW.A_AnnotationTypeID = 1;
  -- END IF;
  -- --------------------------------------------------------------------------
  IF ((NEW.A_AnnotationStatusID IS NULL
       )
      OR
      (NEW.A_AnnotationStatusID < 1
       )
      )
  THEN
    SET NEW.A_AnnotationStatusID = 1;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    3,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationTinyText',
    CONCAT('Insert',
           'NEW.A_AnnotationID=',
           NEW.A_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbu_ec_A_AnnotationTinyText;
DELIMITER //
CREATE TRIGGER   tbu_ec_A_AnnotationTinyText
BEFORE UPDATE ON ec_A_AnnotationTinyText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.A_EntryCreatedTime = OLD.A_EntryCreatedTime;
  SET NEW.A_EntryUpdatedTime = CURRENT_TIMESTAMP();
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    5,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationTinyText',
    CONCAT('Update',
           'NEW.A_AnnotationID=',
           NEW.A_AnnotationID,
           'OLD.A_AnnotationID=',
           OLD.A_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbd_ec_A_AnnotationTinyText;
DELIMITER //
CREATE TRIGGER   tbd_ec_A_AnnotationTinyText
BEFORE DELETE ON ec_A_AnnotationTinyText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    7,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationTinyText',
    CONCAT('Delete',
           'OLD.A_AnnotationID=',
           OLD.A_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tai_ec_A_AnnotationTinyText;
DELIMITER //
CREATE TRIGGER   tai_ec_A_AnnotationTinyText
AFTER INSERT ON  ec_A_AnnotationTinyText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    4,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationTinyText',
    CONCAT('Insert',
           'NEW.A_AnnotationID=',
           NEW.A_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tau_ec_A_AnnotationTinyText;
DELIMITER //
CREATE TRIGGER   tau_ec_A_AnnotationTinyText
AFTER UPDATE ON  ec_A_AnnotationTinyText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    6,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationTinyText',
    CONCAT('Update',
           'NEW.A_AnnotationID=',
           NEW.A_AnnotationID,
           'OLD.A_AnnotationID=',
           OLD.A_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tad_ec_A_AnnotationTinyText;
DELIMITER //
CREATE TRIGGER   tad_ec_A_AnnotationTinyText
AFTER DELETE ON  ec_A_AnnotationTinyText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    8,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationTinyText',
    CONCAT('Delete',
           'OLD.A_AnnotationID=',
           OLD.A_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_A_AnnotationTinyText
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  AUTO_INCREMENT = 100
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_A_AnnotationTinyText
MODIFY COLUMN
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  A_AnnotationID                           BIGINT DEFAULT 0              NOT NULL
                                        AUTO_INCREMENT
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbi_ec_A_AnnotationTinyTextFullText;
DELIMITER //
CREATE TRIGGER   tbi_ec_A_AnnotationTinyTextFullText
BEFORE INSERT ON ec_A_AnnotationTinyTextFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _AnnotationID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.Aft_EntryCreatedTime = CURRENT_TIMESTAMP();
  SET NEW.Aft_EntryUpdatedTime = '0000-00-00 00:00:00';
  -- --------------------------------------------------------------------------
  IF ((NEW.Aft_AnnotationID IS NULL
       )
      OR
      (NEW.Aft_AnnotationID != 0
       )
      )
  THEN
    SET _AnnotationID =
    sqlGetId5(NEW.Aft_TargetID,
              NEW.Aft_AnnotationTypeID,
              NEW.Aft_ContentID,
              NEW.Aft_AnnotationKey,
              NEW.Aft_Annotation
              );
    -- CAST(CONV(SUBSTRING(MD5(CONCAT(NEW.Aft_TargetID,
    --                                NEW.Aft_AnnotationTypeID,
    --                                NEW.Aft_ContentID,
    --                                NEW.Aft_AnnotationKey,
    --                                NEW.Aft_Annotation
    --                                )
    --                         ),
    --                     1,15
    --                     ),
    --           16,10
    --           )
    --      AS UNSIGNED INTEGER
    --      );
    IF (_AnnotationID IS NULL)
    THEN
      SET _AnnotationID = 0;
    END IF;
    SET NEW.Aft_AnnotationID = _AnnotationID;
  END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.Aft_AnnotationID IS NULL
  --      )
  --     -- OR
  --     -- (NEW.Aft_AnnotationID = 0
  --     --  )
  --     )
  -- THEN
  --   SELECT
  --     MAX(ec_A_AnnotationTinyTextFullText.Aft_AnnotationID)+1
  --   INTO
  --     _AnnotationID
  --   FROM
  --     ec_A_AnnotationTinyTextFullText;
  --   IF (_AnnotationID IS NULL)
  --   THEN
  --     SET _AnnotationID = 0;
  --   END IF;
  --   SET NEW.Aft_AnnotationID = _AnnotationID;
  -- END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    3,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationTinyTextFullText',
    CONCAT('Insert',
           'NEW.Aft_AnnotationID=',
           NEW.Aft_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbu_ec_A_AnnotationTinyTextFullText;
DELIMITER //
CREATE TRIGGER   tbu_ec_A_AnnotationTinyTextFullText
BEFORE UPDATE ON ec_A_AnnotationTinyTextFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.Aft_EntryCreatedTime = OLD.Aft_EntryCreatedTime;
  SET NEW.Aft_EntryUpdatedTime = CURRENT_TIMESTAMP();
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    5,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationTinyTextFullText',
    CONCAT('Update',
           'NEW.Aft_AnnotationID=',
           NEW.Aft_AnnotationID,
           'OLD.Aft_AnnotationID=',
           OLD.Aft_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbd_ec_A_AnnotationTinyTextFullText;
DELIMITER //
CREATE TRIGGER   tbd_ec_A_AnnotationTinyTextFullText
BEFORE DELETE ON ec_A_AnnotationTinyTextFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    7,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationTinyTextFullText',
    CONCAT('Delete',
           'OLD.Aft_AnnotationID=',
           OLD.Aft_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tai_ec_A_AnnotationTinyTextFullText;
DELIMITER //
CREATE TRIGGER   tai_ec_A_AnnotationTinyTextFullText
AFTER INSERT ON  ec_A_AnnotationTinyTextFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    4,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationTinyTextFullText',
    CONCAT('Insert',
           'NEW.Aft_AnnotationID=',
           NEW.Aft_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tau_ec_A_AnnotationTinyTextFullText;
DELIMITER //
CREATE TRIGGER   tau_ec_A_AnnotationTinyTextFullText
AFTER UPDATE ON  ec_A_AnnotationTinyTextFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    6,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationTinyTextFullText',
    CONCAT('Update',
           'NEW.Aft_AnnotationID=',
           NEW.Aft_AnnotationID,
           'OLD.Aft_AnnotationID=',
           OLD.Aft_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tad_ec_A_AnnotationTinyTextFullText;
DELIMITER //
CREATE TRIGGER   tad_ec_A_AnnotationTinyTextFullText
AFTER DELETE ON  ec_A_AnnotationTinyTextFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    8,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationTinyTextFullText',
    CONCAT('Delete',
           'OLD.Aft_AnnotationID=',
           OLD.Aft_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_A_AnnotationTinyTextFullText
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  AUTO_INCREMENT = 100
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_A_AnnotationTinyTextFullText
MODIFY COLUMN
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  Aft_AnnotationID                         BIGINT DEFAULT 0              NOT NULL
                                        AUTO_INCREMENT
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP PROCEDURE IF EXISTS sp_ec_A_AnnotationTinyText;
DELIMITER //
CREATE PROCEDURE sp_ec_A_AnnotationTinyText(
  -- --------------------------------------------------------------------------
  _AnnotationKey       VARCHAR(255),
  _Annotation          VARCHAR(255),
  _AnnotationTypeID    BIGINT,
  -- --------------------------------------------------------------------------
  __TargetID                 BIGINT,
  _TargetEmailAddress        VARCHAR(255),
  -- _TargetName             VARCHAR(255),
  -- _TargetPasswordHash     VARCHAR(255),
  -- _TargetGender           CHAR(1),
  -- _TargetFromInformation  VARCHAR(255),
  -- _TargetBirthInformation VARCHAR(255),
  -- _TargetTypeID           BIGINT,
  -- _TargetPhone            VARCHAR(255),
  -- _TargetAddress          VARCHAR(255),
  -- _TargetStatusID         BIGINT,
  -- _Description            VARCHAR(1024),
  -- --------------------------------------------------------------------------
  __ProductID            BIGINT,
  __OrganizationID       BIGINT,
  _ProductTitle          VARCHAR(255),
  -- _ProductTypeID      BIGINT,
  _OrganizationName      VARCHAR(255),
  _ProductEdition        SMALLINT,
  _ProductStandardCode   VARCHAR(255),
  -- _ProductPublishDate VARCHAR(255),
  -- _ProductBasePricing NUMERIC(16,2),
  -- _ProductStatusID    BIGINT,
  -- _ProductReference   VARCHAR(1024),
  -- _Description        VARCHAR(1024)
  -- _Order              BIGINT,
  -- _Description        VARCHAR(1024)
  -- --------------------------------------------------------------------------
  _AnnotationStatusID    BIGINT,
  _Description           VARCHAR(1024)
  -- --------------------------------------------------------------------------
)
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _TargetID BIGINT;
  -- --------------------------------------------------------------------------
  DECLARE _OrganizationID BIGINT;
  -- --------------------------------------------------------------------------
  DECLARE _ProductID BIGINT;
  -- --------------------------------------------------------------------------
  IF (__TargetID IS NOT NULL)
  THEN
    SET _TargetID = __TargetID;
  ELSE
    SET _TargetID =
    sqlGetId(_TargetEmailAddress);
    -- CAST(CONV(SUBSTRING(MD5(_TargetEmailAddress),1,15),16,10)
    --      AS UNSIGNED INTEGER);
  END IF;
  -- --------------------------------------------------------------------------
  IF (__OrganizationID IS NOT NULL)
  THEN
    SET _OrganizationID = __OrganizationID;
  ELSE
    SET _OrganizationID =
    sqlGetId(_OrganizationName);
    -- CAST(CONV(SUBSTRING(MD5(_OrganizationName),1,15),16,10)
    --      AS UNSIGNED INTEGER);
  END IF;
  -- --------------------------------------------------------------------------
  IF (__ProductID IS NOT NULL)
  THEN
    SET _ProductID = __ProductID;
  ELSE
    SET _ProductID =
    sqlGetId4(_OrganizationID,
              _ProductTitle,
              _ProductEdition,
              _ProductStandardCode
              );
    -- CAST(CONV(SUBSTRING(MD5(CONCAT(_OrganizationID,
    --                                _ProductTitle,
    --                                _ProductEdition,
    --                                _ProductStandardCode
    --                                )
    --                         ),
    --                     1,15
    --                     ),
    --           16,10
    --           )
    --      AS UNSIGNED INTEGER
    --      );
  END IF;
  -- --------------------------------------------------------------------------
  INSERT INTO ec_A_AnnotationTinyText(
    A_AnnotationKey,
    A_Annotation,
    A_AnnotationTypeID,
    A_TargetID,
    A_ContentID,
    A_AnnotationStatusID,
    A_Description
  ) VALUES (
    _AnnotationKey,
    _Annotation,
    _AnnotationTypeID,
    _TargetID,
    _ProductID,
    _AnnotationStatusID,
    _Description
  );
  -- --------------------------------------------------------------------------
  INSERT INTO ec_A_AnnotationTinyTextFullText(
    Aft_AnnotationKey,
    Aft_Annotation,
    Aft_AnnotationTypeID,
    Aft_TargetID,
    Aft_ContentID,
    Aft_Description
  ) VALUES (
    _AnnotationKey,
    _Annotation,
    _AnnotationTypeID,
    _TargetID,
    _ProductID,
    _Description
  );
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbi_ec_A_AnnotationMediumText;
DELIMITER //
CREATE TRIGGER   tbi_ec_A_AnnotationMediumText
BEFORE INSERT ON ec_A_AnnotationMediumText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _AnnotationID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.A_EntryCreatedTime = CURRENT_TIMESTAMP();
  SET NEW.A_EntryUpdatedTime = '0000-00-00 00:00:00';
  -- --------------------------------------------------------------------------
  IF ((NEW.A_AnnotationID IS NULL
       )
      OR
      (NEW.A_AnnotationID != 0
       )
      )
  THEN
    SET _AnnotationID =
    sqlGetId5(NEW.A_TargetID,
              NEW.A_AnnotationTypeID,
              NEW.A_ContentID,
              NEW.A_AnnotationKey,
              NEW.A_Annotation
              );
    -- CAST(CONV(SUBSTRING(MD5(CONCAT(NEW.A_TargetID,
    --                                NEW.A_AnnotationTypeID,
    --                                NEW.A_ContentID,
    --                                NEW.A_AnnotationKey,
    --                                NEW.A_Annotation
    --                                )
    --                         ),
    --                     1,15
    --                     ),
    --           16,10
    --           )
    --      AS UNSIGNED INTEGER
    --      );
    IF (_AnnotationID IS NULL)
    THEN
      SET _AnnotationID = 0;
    END IF;
    SET NEW.A_AnnotationID = _AnnotationID;
  END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.A_AnnotationID IS NULL
  --      )
  --     -- OR
  --     -- (NEW.A_AnnotationID = 0
  --     --  )
  --     )
  -- THEN
  --   SELECT
  --     MAX(ec_A_Annotation.A_AnnotationID)+1
  --   INTO
  --     _AnnotationID
  --   FROM
  --     ec_A_AnnotationMediumText;
  --   IF (_AnnotationID IS NULL)
  --   THEN
  --     SET _AnnotationID = 0;
  --   END IF;
  --   SET NEW.A_AnnotationID = _AnnotationID;
  -- END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.A_AnnotationTypeID IS NULL
  --      )
  --     OR
  --     (NEW.A_AnnotationTypeID < 1
  --      )
  --     )
  -- THEN
  --   SET NEW.A_AnnotationTypeID = 1;
  -- END IF;
  -- --------------------------------------------------------------------------
  IF ((NEW.A_AnnotationStatusID IS NULL
       )
      OR
      (NEW.A_AnnotationStatusID < 1
       )
      )
  THEN
    SET NEW.A_AnnotationStatusID = 1;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    3,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationMediumText',
    CONCAT('Insert',
           'NEW.A_AnnotationID=',
           NEW.A_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbu_ec_A_AnnotationMediumText;
DELIMITER //
CREATE TRIGGER   tbu_ec_A_AnnotationMediumText
BEFORE UPDATE ON ec_A_AnnotationMediumText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.A_EntryCreatedTime = OLD.A_EntryCreatedTime;
  SET NEW.A_EntryUpdatedTime = CURRENT_TIMESTAMP();
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    5,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationMediumText',
    CONCAT('Update',
           'NEW.A_AnnotationID=',
           NEW.A_AnnotationID,
           'OLD.A_AnnotationID=',
           OLD.A_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbd_ec_A_AnnotationMediumText;
DELIMITER //
CREATE TRIGGER   tbd_ec_A_AnnotationMediumText
BEFORE DELETE ON ec_A_AnnotationMediumText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    7,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationMediumText',
    CONCAT('Delete',
           'OLD.A_AnnotationID=',
           OLD.A_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tai_ec_A_AnnotationMediumText;
DELIMITER //
CREATE TRIGGER   tai_ec_A_AnnotationMediumText
AFTER INSERT ON  ec_A_AnnotationMediumText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    4,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationMediumText',
    CONCAT('Insert',
           'NEW.A_AnnotationID=',
           NEW.A_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tau_ec_A_AnnotationMediumText;
DELIMITER //
CREATE TRIGGER   tau_ec_A_AnnotationMediumText
AFTER UPDATE ON  ec_A_AnnotationMediumText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    6,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationMediumText',
    CONCAT('Update',
           'NEW.A_AnnotationID=',
           NEW.A_AnnotationID,
           'OLD.A_AnnotationID=',
           OLD.A_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tad_ec_A_AnnotationMediumText;
DELIMITER //
CREATE TRIGGER   tad_ec_A_AnnotationMediumText
AFTER DELETE ON  ec_A_AnnotationMediumText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    8,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationMediumText',
    CONCAT('Delete',
           'OLD.A_AnnotationID=',
           OLD.A_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_A_AnnotationMediumText
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  AUTO_INCREMENT = 100
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_A_AnnotationMediumText
MODIFY COLUMN
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  A_AnnotationID                           BIGINT DEFAULT 0              NOT NULL
                                        AUTO_INCREMENT
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbi_ec_A_AnnotationMediumTextFullText;
DELIMITER //
CREATE TRIGGER   tbi_ec_A_AnnotationMediumTextFullText
BEFORE INSERT ON ec_A_AnnotationMediumTextFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _AnnotationID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.Aft_EntryCreatedTime = CURRENT_TIMESTAMP();
  SET NEW.Aft_EntryUpdatedTime = '0000-00-00 00:00:00';
  -- --------------------------------------------------------------------------
  IF ((NEW.Aft_AnnotationID IS NULL
       )
      OR
      (NEW.Aft_AnnotationID != 0
       )
      )
  THEN
    SET _AnnotationID =
    sqlGetId5(NEW.Aft_TargetID,
              NEW.Aft_AnnotationTypeID,
              NEW.Aft_ContentID,
              NEW.Aft_AnnotationKey,
              NEW.Aft_Annotation
              );
    -- CAST(CONV(SUBSTRING(MD5(CONCAT(NEW.Aft_TargetID,
    --                                NEW.Aft_AnnotationTypeID,
    --                                NEW.Aft_ContentID,
    --                                NEW.Aft_AnnotationKey,
    --                                NEW.Aft_Annotation
    --                                )
    --                         ),
    --                     1,15
    --                     ),
    --           16,10
    --           )
    --      AS UNSIGNED INTEGER
    --      );
    IF (_AnnotationID IS NULL)
    THEN
      SET _AnnotationID = 0;
    END IF;
    SET NEW.Aft_AnnotationID = _AnnotationID;
  END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.Aft_AnnotationID IS NULL
  --      )
  --     -- OR
  --     -- (NEW.Aft_AnnotationID = 0
  --     --  )
  --     )
  -- THEN
  --   SELECT
  --     MAX(ec_A_AnnotationMediumTextFullText.Aft_AnnotationID)+1
  --   INTO
  --     _AnnotationID
  --   FROM
  --     ec_A_AnnotationMediumTextFullText;
  --   IF (_AnnotationID IS NULL)
  --   THEN
  --     SET _AnnotationID = 0;
  --   END IF;
  --   SET NEW.Aft_AnnotationID = _AnnotationID;
  -- END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    3,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationMediumTextFullText',
    CONCAT('Insert',
           'NEW.Aft_AnnotationID=',
           NEW.Aft_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbu_ec_A_AnnotationMediumTextFullText;
DELIMITER //
CREATE TRIGGER   tbu_ec_A_AnnotationMediumTextFullText
BEFORE UPDATE ON ec_A_AnnotationMediumTextFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.Aft_EntryCreatedTime = OLD.Aft_EntryCreatedTime;
  SET NEW.Aft_EntryUpdatedTime = CURRENT_TIMESTAMP();
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    5,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationMediumTextFullText',
    CONCAT('Update',
           'NEW.Aft_AnnotationID=',
           NEW.Aft_AnnotationID,
           'OLD.Aft_AnnotationID=',
           OLD.Aft_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbd_ec_A_AnnotationMediumTextFullText;
DELIMITER //
CREATE TRIGGER   tbd_ec_A_AnnotationMediumTextFullText
BEFORE DELETE ON ec_A_AnnotationMediumTextFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    7,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationMediumTextFullText',
    CONCAT('Delete',
           'OLD.Aft_AnnotationID=',
           OLD.Aft_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tai_ec_A_AnnotationMediumTextFullText;
DELIMITER //
CREATE TRIGGER   tai_ec_A_AnnotationMediumTextFullText
AFTER INSERT ON  ec_A_AnnotationMediumTextFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    4,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationMediumTextFullText',
    CONCAT('Insert',
           'NEW.Aft_AnnotationID=',
           NEW.Aft_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tau_ec_A_AnnotationMediumTextFullText;
DELIMITER //
CREATE TRIGGER   tau_ec_A_AnnotationMediumTextFullText
AFTER UPDATE ON  ec_A_AnnotationMediumTextFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    6,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationMediumTextFullText',
    CONCAT('Update',
           'NEW.Aft_AnnotationID=',
           NEW.Aft_AnnotationID,
           'OLD.Aft_AnnotationID=',
           OLD.Aft_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tad_ec_A_AnnotationMediumTextFullText;
DELIMITER //
CREATE TRIGGER   tad_ec_A_AnnotationMediumTextFullText
AFTER DELETE ON  ec_A_AnnotationMediumTextFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    8,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationMediumTextFullText',
    CONCAT('Delete',
           'OLD.Aft_AnnotationID=',
           OLD.Aft_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_A_AnnotationMediumTextFullText
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  AUTO_INCREMENT = 100
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_A_AnnotationMediumTextFullText
MODIFY COLUMN
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  Aft_AnnotationID                         BIGINT DEFAULT 0              NOT NULL
                                        AUTO_INCREMENT
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP PROCEDURE IF EXISTS sp_ec_A_AnnotationMediumText;
DELIMITER //
CREATE PROCEDURE sp_ec_A_AnnotationMediumText(
  -- --------------------------------------------------------------------------
  _AnnotationKey       VARCHAR(255),
  _Annotation          VARCHAR(255),
  _AnnotationTypeID    BIGINT,
  -- --------------------------------------------------------------------------
  __TargetID                 BIGINT,
  _TargetEmailAddress        VARCHAR(255),
  -- _TargetName             VARCHAR(255),
  -- _TargetPasswordHash     VARCHAR(255),
  -- _TargetGender           CHAR(1),
  -- _TargetFromInformation  VARCHAR(255),
  -- _TargetBirthInformation VARCHAR(255),
  -- _TargetTypeID           BIGINT,
  -- _TargetPhone            VARCHAR(255),
  -- _TargetAddress          VARCHAR(255),
  -- _TargetStatusID         BIGINT,
  -- _Description            VARCHAR(1024),
  -- --------------------------------------------------------------------------
  __ProductID            BIGINT,
  __OrganizationID       BIGINT,
  _ProductTitle          VARCHAR(255),
  -- _ProductTypeID      BIGINT,
  _OrganizationName      VARCHAR(255),
  _ProductEdition        SMALLINT,
  _ProductStandardCode   VARCHAR(255),
  -- _ProductPublishDate VARCHAR(255),
  -- _ProductBasePricing NUMERIC(16,2),
  -- _ProductStatusID    BIGINT,
  -- _ProductReference   VARCHAR(1024),
  -- _Description        VARCHAR(1024)
  -- _Order              BIGINT,
  -- _Description        VARCHAR(1024)
  -- --------------------------------------------------------------------------
  _AnnotationStatusID    BIGINT,
  _Description           VARCHAR(1024)
  -- --------------------------------------------------------------------------
)
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _TargetID BIGINT;
  -- --------------------------------------------------------------------------
  DECLARE _OrganizationID BIGINT;
  -- --------------------------------------------------------------------------
  DECLARE _ProductID BIGINT;
  -- --------------------------------------------------------------------------
  IF (__TargetID IS NOT NULL)
  THEN
    SET _TargetID = __TargetID;
  ELSE
    SET _TargetID =
    sqlGetId(_TargetEmailAddress);
    -- CAST(CONV(SUBSTRING(MD5(_TargetEmailAddress),1,15),16,10)
    --      AS UNSIGNED INTEGER);
  END IF;
  -- --------------------------------------------------------------------------
  IF (__OrganizationID IS NOT NULL)
  THEN
    SET _OrganizationID = __OrganizationID;
  ELSE
    SET _OrganizationID =
    sqlGetId(_OrganizationName);
    -- CAST(CONV(SUBSTRING(MD5(_OrganizationName),1,15),16,10)
    --      AS UNSIGNED INTEGER);
  END IF;
  -- --------------------------------------------------------------------------
  IF (__ProductID IS NOT NULL)
  THEN
    SET _ProductID = __ProductID;
  ELSE
    SET _ProductID =
    sqlGetId4(_OrganizationID,
              _ProductTitle,
              _ProductEdition,
              _ProductStandardCode
              );
    -- CAST(CONV(SUBSTRING(MD5(CONCAT(_OrganizationID,
    --                                _ProductTitle,
    --                                _ProductEdition,
    --                                _ProductStandardCode
    --                                )
    --                         ),
    --                     1,15
    --                     ),
    --           16,10
    --           )
    --      AS UNSIGNED INTEGER
    --      );
  END IF;
  -- --------------------------------------------------------------------------
  INSERT INTO ec_A_AnnotationMediumText(
    A_AnnotationKey,
    A_Annotation,
    A_AnnotationTypeID,
    A_TargetID,
    A_ContentID,
    A_AnnotationStatusID,
    A_Description
  ) VALUES (
    _AnnotationKey,
    _Annotation,
    _AnnotationTypeID,
    _TargetID,
    _ProductID,
    _AnnotationStatusID,
    _Description
  );
  -- --------------------------------------------------------------------------
  INSERT INTO ec_A_AnnotationMediumTextFullText(
    Aft_AnnotationKey,
    Aft_Annotation,
    Aft_AnnotationTypeID,
    Aft_TargetID,
    Aft_ContentID,
    Aft_Description
  ) VALUES (
    _AnnotationKey,
    _Annotation,
    _AnnotationTypeID,
    _TargetID,
    _ProductID,
    _Description
  );
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbi_ec_A_AnnotationLongText;
DELIMITER //
CREATE TRIGGER   tbi_ec_A_AnnotationLongText
BEFORE INSERT ON ec_A_AnnotationLongText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _AnnotationID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.A_EntryCreatedTime = CURRENT_TIMESTAMP();
  SET NEW.A_EntryUpdatedTime = '0000-00-00 00:00:00';
  -- --------------------------------------------------------------------------
  IF ((NEW.A_AnnotationID IS NULL
       )
      OR
      (NEW.A_AnnotationID != 0
       )
      )
  THEN
    SET _AnnotationID =
    sqlGetId5(NEW.A_TargetID,
              NEW.A_AnnotationTypeID,
              NEW.A_ContentID,
              NEW.A_AnnotationKey,
              NEW.A_Annotation
              );
    -- CAST(CONV(SUBSTRING(MD5(CONCAT(NEW.A_TargetID,
    --                                NEW.A_AnnotationTypeID,
    --                                NEW.A_ContentID,
    --                                NEW.A_AnnotationKey,
    --                                NEW.A_Annotation
    --                                )
    --                         ),
    --                     1,15
    --                     ),
    --           16,10
    --           )
    --      AS UNSIGNED INTEGER
    --      );
    IF (_AnnotationID IS NULL)
    THEN
      SET _AnnotationID = 0;
    END IF;
    SET NEW.A_AnnotationID = _AnnotationID;
  END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.A_AnnotationID IS NULL
  --      )
  --     -- OR
  --     -- (NEW.A_AnnotationID = 0
  --     --  )
  --     )
  -- THEN
  --   SELECT
  --     MAX(ec_A_Annotation.A_AnnotationID)+1
  --   INTO
  --     _AnnotationID
  --   FROM
  --     ec_A_AnnotationLongText;
  --   IF (_AnnotationID IS NULL)
  --   THEN
  --     SET _AnnotationID = 0;
  --   END IF;
  --   SET NEW.A_AnnotationID = _AnnotationID;
  -- END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.A_AnnotationTypeID IS NULL
  --      )
  --     OR
  --     (NEW.A_AnnotationTypeID < 1
  --      )
  --     )
  -- THEN
  --   SET NEW.A_AnnotationTypeID = 1;
  -- END IF;
  -- --------------------------------------------------------------------------
  IF ((NEW.A_AnnotationStatusID IS NULL
       )
      OR
      (NEW.A_AnnotationStatusID < 1
       )
      )
  THEN
    SET NEW.A_AnnotationStatusID = 1;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    3,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationLongText',
    CONCAT('Insert',
           'NEW.A_AnnotationID=',
           NEW.A_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbu_ec_A_AnnotationLongText;
DELIMITER //
CREATE TRIGGER   tbu_ec_A_AnnotationLongText
BEFORE UPDATE ON ec_A_AnnotationLongText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.A_EntryCreatedTime = OLD.A_EntryCreatedTime;
  SET NEW.A_EntryUpdatedTime = CURRENT_TIMESTAMP();
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    5,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationLongText',
    CONCAT('Update',
           'NEW.A_AnnotationID=',
           NEW.A_AnnotationID,
           'OLD.A_AnnotationID=',
           OLD.A_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbd_ec_A_AnnotationLongText;
DELIMITER //
CREATE TRIGGER   tbd_ec_A_AnnotationLongText
BEFORE DELETE ON ec_A_AnnotationLongText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    7,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationLongText',
    CONCAT('Delete',
           'OLD.A_AnnotationID=',
           OLD.A_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tai_ec_A_AnnotationLongText;
DELIMITER //
CREATE TRIGGER   tai_ec_A_AnnotationLongText
AFTER INSERT ON  ec_A_AnnotationLongText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    4,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationLongText',
    CONCAT('Insert',
           'NEW.A_AnnotationID=',
           NEW.A_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tau_ec_A_AnnotationLongText;
DELIMITER //
CREATE TRIGGER   tau_ec_A_AnnotationLongText
AFTER UPDATE ON  ec_A_AnnotationLongText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    6,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationLongText',
    CONCAT('Update',
           'NEW.A_AnnotationID=',
           NEW.A_AnnotationID,
           'OLD.A_AnnotationID=',
           OLD.A_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tad_ec_A_AnnotationLongText;
DELIMITER //
CREATE TRIGGER   tad_ec_A_AnnotationLongText
AFTER DELETE ON  ec_A_AnnotationLongText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    8,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationLongText',
    CONCAT('Delete',
           'OLD.A_AnnotationID=',
           OLD.A_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_A_AnnotationLongText
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  AUTO_INCREMENT = 100
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_A_AnnotationLongText
MODIFY COLUMN
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  A_AnnotationID                           BIGINT DEFAULT 0              NOT NULL
                                        AUTO_INCREMENT
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbi_ec_A_AnnotationLongTextFullText;
DELIMITER //
CREATE TRIGGER   tbi_ec_A_AnnotationLongTextFullText
BEFORE INSERT ON ec_A_AnnotationLongTextFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _AnnotationID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.Aft_EntryCreatedTime = CURRENT_TIMESTAMP();
  SET NEW.Aft_EntryUpdatedTime = '0000-00-00 00:00:00';
  -- --------------------------------------------------------------------------
  IF ((NEW.Aft_AnnotationID IS NULL
       )
      OR
      (NEW.Aft_AnnotationID != 0
       )
      )
  THEN
    SET _AnnotationID =
    sqlGetId5(NEW.Aft_TargetID,
              NEW.Aft_AnnotationTypeID,
              NEW.Aft_ContentID,
              NEW.Aft_AnnotationKey,
              NEW.Aft_Annotation
              );
    -- CAST(CONV(SUBSTRING(MD5(CONCAT(NEW.Aft_TargetID,
    --                                NEW.Aft_AnnotationTypeID,
    --                                NEW.Aft_ContentID,
    --                                NEW.Aft_AnnotationKey,
    --                                NEW.Aft_Annotation
    --                                )
    --                         ),
    --                     1,15
    --                     ),
    --           16,10
    --           )
    --      AS UNSIGNED INTEGER
    --      );
    IF (_AnnotationID IS NULL)
    THEN
      SET _AnnotationID = 0;
    END IF;
    SET NEW.Aft_AnnotationID = _AnnotationID;
  END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.Aft_AnnotationID IS NULL
  --      )
  --     -- OR
  --     -- (NEW.Aft_AnnotationID = 0
  --     --  )
  --     )
  -- THEN
  --   SELECT
  --     MAX(ec_A_AnnotationLongTextFullText.Aft_AnnotationID)+1
  --   INTO
  --     _AnnotationID
  --   FROM
  --     ec_A_AnnotationLongTextFullText;
  --   IF (_AnnotationID IS NULL)
  --   THEN
  --     SET _AnnotationID = 0;
  --   END IF;
  --   SET NEW.Aft_AnnotationID = _AnnotationID;
  -- END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    3,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationLongTextFullText',
    CONCAT('Insert',
           'NEW.Aft_AnnotationID=',
           NEW.Aft_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbu_ec_A_AnnotationLongTextFullText;
DELIMITER //
CREATE TRIGGER   tbu_ec_A_AnnotationLongTextFullText
BEFORE UPDATE ON ec_A_AnnotationLongTextFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.Aft_EntryCreatedTime = OLD.Aft_EntryCreatedTime;
  SET NEW.Aft_EntryUpdatedTime = CURRENT_TIMESTAMP();
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    5,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationLongTextFullText',
    CONCAT('Update',
           'NEW.Aft_AnnotationID=',
           NEW.Aft_AnnotationID,
           'OLD.Aft_AnnotationID=',
           OLD.Aft_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbd_ec_A_AnnotationLongTextFullText;
DELIMITER //
CREATE TRIGGER   tbd_ec_A_AnnotationLongTextFullText
BEFORE DELETE ON ec_A_AnnotationLongTextFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    7,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationLongTextFullText',
    CONCAT('Delete',
           'OLD.Aft_AnnotationID=',
           OLD.Aft_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tai_ec_A_AnnotationLongTextFullText;
DELIMITER //
CREATE TRIGGER   tai_ec_A_AnnotationLongTextFullText
AFTER INSERT ON  ec_A_AnnotationLongTextFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    4,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationLongTextFullText',
    CONCAT('Insert',
           'NEW.Aft_AnnotationID=',
           NEW.Aft_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tau_ec_A_AnnotationLongTextFullText;
DELIMITER //
CREATE TRIGGER   tau_ec_A_AnnotationLongTextFullText
AFTER UPDATE ON  ec_A_AnnotationLongTextFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    6,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationLongTextFullText',
    CONCAT('Update',
           'NEW.Aft_AnnotationID=',
           NEW.Aft_AnnotationID,
           'OLD.Aft_AnnotationID=',
           OLD.Aft_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tad_ec_A_AnnotationLongTextFullText;
DELIMITER //
CREATE TRIGGER   tad_ec_A_AnnotationLongTextFullText
AFTER DELETE ON  ec_A_AnnotationLongTextFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    8,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationLongTextFullText',
    CONCAT('Delete',
           'OLD.Aft_AnnotationID=',
           OLD.Aft_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_A_AnnotationLongTextFullText
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  AUTO_INCREMENT = 100
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_A_AnnotationLongTextFullText
MODIFY COLUMN
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  Aft_AnnotationID                         BIGINT DEFAULT 0              NOT NULL
                                        AUTO_INCREMENT
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP PROCEDURE IF EXISTS sp_ec_A_AnnotationLongText;
DELIMITER //
CREATE PROCEDURE sp_ec_A_AnnotationLongText(
  -- --------------------------------------------------------------------------
  _AnnotationKey       VARCHAR(255),
  _Annotation          VARCHAR(255),
  _AnnotationTypeID    BIGINT,
  -- --------------------------------------------------------------------------
  __TargetID                 BIGINT,
  _TargetEmailAddress        VARCHAR(255),
  -- _TargetName             VARCHAR(255),
  -- _TargetPasswordHash     VARCHAR(255),
  -- _TargetGender           CHAR(1),
  -- _TargetFromInformation  VARCHAR(255),
  -- _TargetBirthInformation VARCHAR(255),
  -- _TargetTypeID           BIGINT,
  -- _TargetPhone            VARCHAR(255),
  -- _TargetAddress          VARCHAR(255),
  -- _TargetStatusID         BIGINT,
  -- _Description            VARCHAR(1024),
  -- --------------------------------------------------------------------------
  __ProductID            BIGINT,
  __OrganizationID       BIGINT,
  _ProductTitle          VARCHAR(255),
  -- _ProductTypeID      BIGINT,
  _OrganizationName      VARCHAR(255),
  _ProductEdition        SMALLINT,
  _ProductStandardCode   VARCHAR(255),
  -- _ProductPublishDate VARCHAR(255),
  -- _ProductBasePricing NUMERIC(16,2),
  -- _ProductStatusID    BIGINT,
  -- _ProductReference   VARCHAR(1024),
  -- _Description        VARCHAR(1024)
  -- _Order              BIGINT,
  -- _Description        VARCHAR(1024)
  -- --------------------------------------------------------------------------
  _AnnotationStatusID    BIGINT,
  _Description           VARCHAR(1024)
  -- --------------------------------------------------------------------------
)
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _TargetID BIGINT;
  -- --------------------------------------------------------------------------
  DECLARE _OrganizationID BIGINT;
  -- --------------------------------------------------------------------------
  DECLARE _ProductID BIGINT;
  -- --------------------------------------------------------------------------
  IF (__TargetID IS NOT NULL)
  THEN
    SET _TargetID = __TargetID;
  ELSE
    SET _TargetID =
    sqlGetId(_TargetEmailAddress);
    -- CAST(CONV(SUBSTRING(MD5(_TargetEmailAddress),1,15),16,10)
    --      AS UNSIGNED INTEGER);
  END IF;
  -- --------------------------------------------------------------------------
  IF (__OrganizationID IS NOT NULL)
  THEN
    SET _OrganizationID = __OrganizationID;
  ELSE
    SET _OrganizationID =
    sqlGetId(_OrganizationName);
    -- CAST(CONV(SUBSTRING(MD5(_OrganizationName),1,15),16,10)
    --      AS UNSIGNED INTEGER);
  END IF;
  -- --------------------------------------------------------------------------
  IF (__ProductID IS NOT NULL)
  THEN
    SET _ProductID = __ProductID;
  ELSE
    SET _ProductID =
    sqlGetId4(_OrganizationID,
              _ProductTitle,
              _ProductEdition,
              _ProductStandardCode
              );
    -- CAST(CONV(SUBSTRING(MD5(CONCAT(_OrganizationID,
    --                                _ProductTitle,
    --                                _ProductEdition,
    --                                _ProductStandardCode
    --                                )
    --                         ),
    --                     1,15
    --                     ),
    --           16,10
    --           )
    --      AS UNSIGNED INTEGER
    --      );
  END IF;
  -- --------------------------------------------------------------------------
  INSERT INTO ec_A_AnnotationLongText(
    A_AnnotationKey,
    A_Annotation,
    A_AnnotationTypeID,
    A_TargetID,
    A_ContentID,
    A_AnnotationStatusID,
    A_Description
  ) VALUES (
    _AnnotationKey,
    _Annotation,
    _AnnotationTypeID,
    _TargetID,
    _ProductID,
    _AnnotationStatusID,
    _Description
  );
  -- --------------------------------------------------------------------------
  INSERT INTO ec_A_AnnotationLongTextFullText(
    Aft_AnnotationKey,
    Aft_Annotation,
    Aft_AnnotationTypeID,
    Aft_TargetID,
    Aft_ContentID,
    Aft_Description
  ) VALUES (
    _AnnotationKey,
    _Annotation,
    _AnnotationTypeID,
    _TargetID,
    _ProductID,
    _Description
  );
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbi_ec_A_AnnotationBlob;
DELIMITER //
CREATE TRIGGER   tbi_ec_A_AnnotationBlob
BEFORE INSERT ON ec_A_AnnotationBlob
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _AnnotationID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.A_EntryCreatedTime = CURRENT_TIMESTAMP();
  SET NEW.A_EntryUpdatedTime = '0000-00-00 00:00:00';
  -- --------------------------------------------------------------------------
  IF ((NEW.A_AnnotationID IS NULL
       )
      OR
      (NEW.A_AnnotationID != 0
       )
      )
  THEN
    SET _AnnotationID =
    sqlGetId5(NEW.A_TargetID,
              NEW.A_AnnotationTypeID,
              NEW.A_ContentID,
              NEW.A_AnnotationKey,
              NEW.A_Annotation
              );
    -- CAST(CONV(SUBSTRING(MD5(CONCAT(NEW.A_TargetID,
    --                                NEW.A_AnnotationTypeID,
    --                                NEW.A_ContentID,
    --                                NEW.A_AnnotationKey,
    --                                NEW.A_Annotation
    --                                )
    --                         ),
    --                     1,15
    --                     ),
    --           16,10
    --           )
    --      AS UNSIGNED INTEGER
    --      );
    IF (_AnnotationID IS NULL)
    THEN
      SET _AnnotationID = 0;
    END IF;
    SET NEW.A_AnnotationID = _AnnotationID;
  END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.A_AnnotationID IS NULL
  --      )
  --     -- OR
  --     -- (NEW.A_AnnotationID = 0
  --     --  )
  --     )
  -- THEN
  --   SELECT
  --     MAX(ec_A_Annotation.A_AnnotationID)+1
  --   INTO
  --     _AnnotationID
  --   FROM
  --     ec_A_AnnotationBlob;
  --   IF (_AnnotationID IS NULL)
  --   THEN
  --     SET _AnnotationID = 0;
  --   END IF;
  --   SET NEW.A_AnnotationID = _AnnotationID;
  -- END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.A_AnnotationTypeID IS NULL
  --      )
  --     OR
  --     (NEW.A_AnnotationTypeID < 1
  --      )
  --     )
  -- THEN
  --   SET NEW.A_AnnotationTypeID = 1;
  -- END IF;
  -- --------------------------------------------------------------------------
  IF ((NEW.A_AnnotationStatusID IS NULL
       )
      OR
      (NEW.A_AnnotationStatusID < 1
       )
      )
  THEN
    SET NEW.A_AnnotationStatusID = 1;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    3,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationBlob',
    CONCAT('Insert',
           'NEW.A_AnnotationID=',
           NEW.A_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbu_ec_A_AnnotationBlob;
DELIMITER //
CREATE TRIGGER   tbu_ec_A_AnnotationBlob
BEFORE UPDATE ON ec_A_AnnotationBlob
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.A_EntryCreatedTime = OLD.A_EntryCreatedTime;
  SET NEW.A_EntryUpdatedTime = CURRENT_TIMESTAMP();
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    5,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationBlob',
    CONCAT('Update',
           'NEW.A_AnnotationID=',
           NEW.A_AnnotationID,
           'OLD.A_AnnotationID=',
           OLD.A_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbd_ec_A_AnnotationBlob;
DELIMITER //
CREATE TRIGGER   tbd_ec_A_AnnotationBlob
BEFORE DELETE ON ec_A_AnnotationBlob
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    7,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationBlob',
    CONCAT('Delete',
           'OLD.A_AnnotationID=',
           OLD.A_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tai_ec_A_AnnotationBlob;
DELIMITER //
CREATE TRIGGER   tai_ec_A_AnnotationBlob
AFTER INSERT ON  ec_A_AnnotationBlob
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    4,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationBlob',
    CONCAT('Insert',
           'NEW.A_AnnotationID=',
           NEW.A_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tau_ec_A_AnnotationBlob;
DELIMITER //
CREATE TRIGGER   tau_ec_A_AnnotationBlob
AFTER UPDATE ON  ec_A_AnnotationBlob
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    6,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationBlob',
    CONCAT('Update',
           'NEW.A_AnnotationID=',
           NEW.A_AnnotationID,
           'OLD.A_AnnotationID=',
           OLD.A_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tad_ec_A_AnnotationBlob;
DELIMITER //
CREATE TRIGGER   tad_ec_A_AnnotationBlob
AFTER DELETE ON  ec_A_AnnotationBlob
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    8,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationBlob',
    CONCAT('Delete',
           'OLD.A_AnnotationID=',
           OLD.A_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_A_AnnotationBlob
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  AUTO_INCREMENT = 100
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_A_AnnotationBlob
MODIFY COLUMN
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  A_AnnotationID                           BIGINT DEFAULT 0              NOT NULL
                                        AUTO_INCREMENT
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbi_ec_A_AnnotationBlobFullText;
DELIMITER //
CREATE TRIGGER   tbi_ec_A_AnnotationBlobFullText
BEFORE INSERT ON ec_A_AnnotationBlobFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _AnnotationID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.Aft_EntryCreatedTime = CURRENT_TIMESTAMP();
  SET NEW.Aft_EntryUpdatedTime = '0000-00-00 00:00:00';
  -- --------------------------------------------------------------------------
  IF ((NEW.Aft_AnnotationID IS NULL
       )
      OR
      (NEW.Aft_AnnotationID != 0
       )
      )
  THEN
    SET _AnnotationID =
    sqlGetId5(NEW.Aft_TargetID,
              NEW.Aft_AnnotationTypeID,
              NEW.Aft_ContentID,
              NEW.Aft_AnnotationKey,
              NEW.Aft_Annotation
              );
    -- CAST(CONV(SUBSTRING(MD5(CONCAT(NEW.Aft_TargetID,
    --                                NEW.Aft_AnnotationTypeID,
    --                                NEW.Aft_ContentID,
    --                                NEW.Aft_AnnotationKey,
    --                                NEW.Aft_Annotation
    --                                )
    --                         ),
    --                     1,15
    --                     ),
    --           16,10
    --           )
    --      AS UNSIGNED INTEGER
    --      );
    IF (_AnnotationID IS NULL)
    THEN
      SET _AnnotationID = 0;
    END IF;
    SET NEW.Aft_AnnotationID = _AnnotationID;
  END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.Aft_AnnotationID IS NULL
  --      )
  --     -- OR
  --     -- (NEW.Aft_AnnotationID = 0
  --     --  )
  --     )
  -- THEN
  --   SELECT
  --     MAX(ec_A_AnnotationBlobFullText.Aft_AnnotationID)+1
  --   INTO
  --     _AnnotationID
  --   FROM
  --     ec_A_AnnotationBlobFullText;
  --   IF (_AnnotationID IS NULL)
  --   THEN
  --     SET _AnnotationID = 0;
  --   END IF;
  --   SET NEW.Aft_AnnotationID = _AnnotationID;
  -- END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    3,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationBlobFullText',
    CONCAT('Insert',
           'NEW.Aft_AnnotationID=',
           NEW.Aft_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbu_ec_A_AnnotationBlobFullText;
DELIMITER //
CREATE TRIGGER   tbu_ec_A_AnnotationBlobFullText
BEFORE UPDATE ON ec_A_AnnotationBlobFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.Aft_EntryCreatedTime = OLD.Aft_EntryCreatedTime;
  SET NEW.Aft_EntryUpdatedTime = CURRENT_TIMESTAMP();
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    5,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationBlobFullText',
    CONCAT('Update',
           'NEW.Aft_AnnotationID=',
           NEW.Aft_AnnotationID,
           'OLD.Aft_AnnotationID=',
           OLD.Aft_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbd_ec_A_AnnotationBlobFullText;
DELIMITER //
CREATE TRIGGER   tbd_ec_A_AnnotationBlobFullText
BEFORE DELETE ON ec_A_AnnotationBlobFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    7,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationBlobFullText',
    CONCAT('Delete',
           'OLD.Aft_AnnotationID=',
           OLD.Aft_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tai_ec_A_AnnotationBlobFullText;
DELIMITER //
CREATE TRIGGER   tai_ec_A_AnnotationBlobFullText
AFTER INSERT ON  ec_A_AnnotationBlobFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    4,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationBlobFullText',
    CONCAT('Insert',
           'NEW.Aft_AnnotationID=',
           NEW.Aft_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tau_ec_A_AnnotationBlobFullText;
DELIMITER //
CREATE TRIGGER   tau_ec_A_AnnotationBlobFullText
AFTER UPDATE ON  ec_A_AnnotationBlobFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    6,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationBlobFullText',
    CONCAT('Update',
           'NEW.Aft_AnnotationID=',
           NEW.Aft_AnnotationID,
           'OLD.Aft_AnnotationID=',
           OLD.Aft_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tad_ec_A_AnnotationBlobFullText;
DELIMITER //
CREATE TRIGGER   tad_ec_A_AnnotationBlobFullText
AFTER DELETE ON  ec_A_AnnotationBlobFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    8,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationBlobFullText',
    CONCAT('Delete',
           'OLD.Aft_AnnotationID=',
           OLD.Aft_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_A_AnnotationBlobFullText
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  AUTO_INCREMENT = 100
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_A_AnnotationBlobFullText
MODIFY COLUMN
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  Aft_AnnotationID                         BIGINT DEFAULT 0              NOT NULL
                                        AUTO_INCREMENT
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP PROCEDURE IF EXISTS sp_ec_A_AnnotationBlob;
DELIMITER //
CREATE PROCEDURE sp_ec_A_AnnotationBlob(
  -- --------------------------------------------------------------------------
  _AnnotationKey       VARCHAR(255),
  _Annotation          VARCHAR(255),
  _AnnotationTypeID    BIGINT,
  -- --------------------------------------------------------------------------
  __TargetID                 BIGINT,
  _TargetEmailAddress        VARCHAR(255),
  -- _TargetName             VARCHAR(255),
  -- _TargetPasswordHash     VARCHAR(255),
  -- _TargetGender           CHAR(1),
  -- _TargetFromInformation  VARCHAR(255),
  -- _TargetBirthInformation VARCHAR(255),
  -- _TargetTypeID           BIGINT,
  -- _TargetPhone            VARCHAR(255),
  -- _TargetAddress          VARCHAR(255),
  -- _TargetStatusID         BIGINT,
  -- _Description            VARCHAR(1024),
  -- --------------------------------------------------------------------------
  __ProductID            BIGINT,
  __OrganizationID       BIGINT,
  _ProductTitle          VARCHAR(255),
  -- _ProductTypeID      BIGINT,
  _OrganizationName      VARCHAR(255),
  _ProductEdition        SMALLINT,
  _ProductStandardCode   VARCHAR(255),
  -- _ProductPublishDate VARCHAR(255),
  -- _ProductBasePricing NUMERIC(16,2),
  -- _ProductStatusID    BIGINT,
  -- _ProductReference   VARCHAR(1024),
  -- _Description        VARCHAR(1024)
  -- _Order              BIGINT,
  -- _Description        VARCHAR(1024)
  -- --------------------------------------------------------------------------
  _AnnotationStatusID    BIGINT,
  _Description           VARCHAR(1024)
  -- --------------------------------------------------------------------------
)
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _TargetID BIGINT;
  -- --------------------------------------------------------------------------
  DECLARE _OrganizationID BIGINT;
  -- --------------------------------------------------------------------------
  DECLARE _ProductID BIGINT;
  -- --------------------------------------------------------------------------
  IF (__TargetID IS NOT NULL)
  THEN
    SET _TargetID = __TargetID;
  ELSE
    SET _TargetID =
    sqlGetId(_TargetEmailAddress);
    -- CAST(CONV(SUBSTRING(MD5(_TargetEmailAddress),1,15),16,10)
    --      AS UNSIGNED INTEGER);
  END IF;
  -- --------------------------------------------------------------------------
  IF (__OrganizationID IS NOT NULL)
  THEN
    SET _OrganizationID = __OrganizationID;
  ELSE
    SET _OrganizationID =
    sqlGetId(_OrganizationName);
    -- CAST(CONV(SUBSTRING(MD5(_OrganizationName),1,15),16,10)
    --      AS UNSIGNED INTEGER);
  END IF;
  -- --------------------------------------------------------------------------
  IF (__ProductID IS NOT NULL)
  THEN
    SET _ProductID = __ProductID;
  ELSE
    SET _ProductID =
    sqlGetId4(_OrganizationID,
              _ProductTitle,
              _ProductEdition,
              _ProductStandardCode
              );
    -- CAST(CONV(SUBSTRING(MD5(CONCAT(_OrganizationID,
    --                                _ProductTitle,
    --                                _ProductEdition,
    --                                _ProductStandardCode
    --                                )
    --                         ),
    --                     1,15
    --                     ),
    --           16,10
    --           )
    --      AS UNSIGNED INTEGER
    --      );
  END IF;
  -- --------------------------------------------------------------------------
  INSERT INTO ec_A_AnnotationBlob(
    A_AnnotationKey,
    A_Annotation,
    A_AnnotationTypeID,
    A_TargetID,
    A_ContentID,
    A_AnnotationStatusID,
    A_Description
  ) VALUES (
    _AnnotationKey,
    _Annotation,
    _AnnotationTypeID,
    _TargetID,
    _ProductID,
    _AnnotationStatusID,
    _Description
  );
  -- --------------------------------------------------------------------------
  INSERT INTO ec_A_AnnotationBlobFullText(
    Aft_AnnotationKey,
    Aft_Annotation,
    Aft_AnnotationTypeID,
    Aft_TargetID,
    Aft_ContentID,
    Aft_Description
  ) VALUES (
    _AnnotationKey,
    _Annotation,
    _AnnotationTypeID,
    _TargetID,
    _ProductID,
    _Description
  );
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbi_ec_A_AnnotationTinyBlob;
DELIMITER //
CREATE TRIGGER   tbi_ec_A_AnnotationTinyBlob
BEFORE INSERT ON ec_A_AnnotationTinyBlob
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _AnnotationID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.A_EntryCreatedTime = CURRENT_TIMESTAMP();
  SET NEW.A_EntryUpdatedTime = '0000-00-00 00:00:00';
  -- --------------------------------------------------------------------------
  IF ((NEW.A_AnnotationID IS NULL
       )
      OR
      (NEW.A_AnnotationID != 0
       )
      )
  THEN
    SET _AnnotationID =
    sqlGetId5(NEW.A_TargetID,
              NEW.A_AnnotationTypeID,
              NEW.A_ContentID,
              NEW.A_AnnotationKey,
              NEW.A_Annotation
              );
    -- CAST(CONV(SUBSTRING(MD5(CONCAT(NEW.A_TargetID,
    --                                NEW.A_AnnotationTypeID,
    --                                NEW.A_ContentID,
    --                                NEW.A_AnnotationKey,
    --                                NEW.A_Annotation
    --                                )
    --                         ),
    --                     1,15
    --                     ),
    --           16,10
    --           )
    --      AS UNSIGNED INTEGER
    --      );
    IF (_AnnotationID IS NULL)
    THEN
      SET _AnnotationID = 0;
    END IF;
    SET NEW.A_AnnotationID = _AnnotationID;
  END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.A_AnnotationID IS NULL
  --      )
  --     -- OR
  --     -- (NEW.A_AnnotationID = 0
  --     --  )
  --     )
  -- THEN
  --   SELECT
  --     MAX(ec_A_Annotation.A_AnnotationID)+1
  --   INTO
  --     _AnnotationID
  --   FROM
  --     ec_A_AnnotationTinyBlob;
  --   IF (_AnnotationID IS NULL)
  --   THEN
  --     SET _AnnotationID = 0;
  --   END IF;
  --   SET NEW.A_AnnotationID = _AnnotationID;
  -- END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.A_AnnotationTypeID IS NULL
  --      )
  --     OR
  --     (NEW.A_AnnotationTypeID < 1
  --      )
  --     )
  -- THEN
  --   SET NEW.A_AnnotationTypeID = 1;
  -- END IF;
  -- --------------------------------------------------------------------------
  IF ((NEW.A_AnnotationStatusID IS NULL
       )
      OR
      (NEW.A_AnnotationStatusID < 1
       )
      )
  THEN
    SET NEW.A_AnnotationStatusID = 1;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    3,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationTinyBlob',
    CONCAT('Insert',
           'NEW.A_AnnotationID=',
           NEW.A_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbu_ec_A_AnnotationTinyBlob;
DELIMITER //
CREATE TRIGGER   tbu_ec_A_AnnotationTinyBlob
BEFORE UPDATE ON ec_A_AnnotationTinyBlob
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.A_EntryCreatedTime = OLD.A_EntryCreatedTime;
  SET NEW.A_EntryUpdatedTime = CURRENT_TIMESTAMP();
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    5,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationTinyBlob',
    CONCAT('Update',
           'NEW.A_AnnotationID=',
           NEW.A_AnnotationID,
           'OLD.A_AnnotationID=',
           OLD.A_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbd_ec_A_AnnotationTinyBlob;
DELIMITER //
CREATE TRIGGER   tbd_ec_A_AnnotationTinyBlob
BEFORE DELETE ON ec_A_AnnotationTinyBlob
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    7,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationTinyBlob',
    CONCAT('Delete',
           'OLD.A_AnnotationID=',
           OLD.A_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tai_ec_A_AnnotationTinyBlob;
DELIMITER //
CREATE TRIGGER   tai_ec_A_AnnotationTinyBlob
AFTER INSERT ON  ec_A_AnnotationTinyBlob
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    4,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationTinyBlob',
    CONCAT('Insert',
           'NEW.A_AnnotationID=',
           NEW.A_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tau_ec_A_AnnotationTinyBlob;
DELIMITER //
CREATE TRIGGER   tau_ec_A_AnnotationTinyBlob
AFTER UPDATE ON  ec_A_AnnotationTinyBlob
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    6,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationTinyBlob',
    CONCAT('Update',
           'NEW.A_AnnotationID=',
           NEW.A_AnnotationID,
           'OLD.A_AnnotationID=',
           OLD.A_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tad_ec_A_AnnotationTinyBlob;
DELIMITER //
CREATE TRIGGER   tad_ec_A_AnnotationTinyBlob
AFTER DELETE ON  ec_A_AnnotationTinyBlob
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    8,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationTinyBlob',
    CONCAT('Delete',
           'OLD.A_AnnotationID=',
           OLD.A_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_A_AnnotationTinyBlob
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  AUTO_INCREMENT = 100
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_A_AnnotationTinyBlob
MODIFY COLUMN
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  A_AnnotationID                           BIGINT DEFAULT 0              NOT NULL
                                        AUTO_INCREMENT
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbi_ec_A_AnnotationTinyBlobFullText;
DELIMITER //
CREATE TRIGGER   tbi_ec_A_AnnotationTinyBlobFullText
BEFORE INSERT ON ec_A_AnnotationTinyBlobFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _AnnotationID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.Aft_EntryCreatedTime = CURRENT_TIMESTAMP();
  SET NEW.Aft_EntryUpdatedTime = '0000-00-00 00:00:00';
  -- --------------------------------------------------------------------------
  IF ((NEW.Aft_AnnotationID IS NULL
       )
      OR
      (NEW.Aft_AnnotationID != 0
       )
      )
  THEN
    SET _AnnotationID =
    sqlGetId5(NEW.Aft_TargetID,
              NEW.Aft_AnnotationTypeID,
              NEW.Aft_ContentID,
              NEW.Aft_AnnotationKey,
              NEW.Aft_Annotation
              );
    -- CAST(CONV(SUBSTRING(MD5(CONCAT(NEW.Aft_TargetID,
    --                                NEW.Aft_AnnotationTypeID,
    --                                NEW.Aft_ContentID,
    --                                NEW.Aft_AnnotationKey,
    --                                NEW.Aft_Annotation
    --                                )
    --                         ),
    --                     1,15
    --                     ),
    --           16,10
    --           )
    --      AS UNSIGNED INTEGER
    --      );
    IF (_AnnotationID IS NULL)
    THEN
      SET _AnnotationID = 0;
    END IF;
    SET NEW.Aft_AnnotationID = _AnnotationID;
  END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.Aft_AnnotationID IS NULL
  --      )
  --     -- OR
  --     -- (NEW.Aft_AnnotationID = 0
  --     --  )
  --     )
  -- THEN
  --   SELECT
  --     MAX(ec_A_AnnotationTinyBlobFullText.Aft_AnnotationID)+1
  --   INTO
  --     _AnnotationID
  --   FROM
  --     ec_A_AnnotationTinyBlobFullText;
  --   IF (_AnnotationID IS NULL)
  --   THEN
  --     SET _AnnotationID = 0;
  --   END IF;
  --   SET NEW.Aft_AnnotationID = _AnnotationID;
  -- END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    3,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationTinyBlobFullText',
    CONCAT('Insert',
           'NEW.Aft_AnnotationID=',
           NEW.Aft_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbu_ec_A_AnnotationTinyBlobFullText;
DELIMITER //
CREATE TRIGGER   tbu_ec_A_AnnotationTinyBlobFullText
BEFORE UPDATE ON ec_A_AnnotationTinyBlobFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.Aft_EntryCreatedTime = OLD.Aft_EntryCreatedTime;
  SET NEW.Aft_EntryUpdatedTime = CURRENT_TIMESTAMP();
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    5,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationTinyBlobFullText',
    CONCAT('Update',
           'NEW.Aft_AnnotationID=',
           NEW.Aft_AnnotationID,
           'OLD.Aft_AnnotationID=',
           OLD.Aft_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbd_ec_A_AnnotationTinyBlobFullText;
DELIMITER //
CREATE TRIGGER   tbd_ec_A_AnnotationTinyBlobFullText
BEFORE DELETE ON ec_A_AnnotationTinyBlobFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    7,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationTinyBlobFullText',
    CONCAT('Delete',
           'OLD.Aft_AnnotationID=',
           OLD.Aft_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tai_ec_A_AnnotationTinyBlobFullText;
DELIMITER //
CREATE TRIGGER   tai_ec_A_AnnotationTinyBlobFullText
AFTER INSERT ON  ec_A_AnnotationTinyBlobFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    4,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationTinyBlobFullText',
    CONCAT('Insert',
           'NEW.Aft_AnnotationID=',
           NEW.Aft_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tau_ec_A_AnnotationTinyBlobFullText;
DELIMITER //
CREATE TRIGGER   tau_ec_A_AnnotationTinyBlobFullText
AFTER UPDATE ON  ec_A_AnnotationTinyBlobFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    6,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationTinyBlobFullText',
    CONCAT('Update',
           'NEW.Aft_AnnotationID=',
           NEW.Aft_AnnotationID,
           'OLD.Aft_AnnotationID=',
           OLD.Aft_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tad_ec_A_AnnotationTinyBlobFullText;
DELIMITER //
CREATE TRIGGER   tad_ec_A_AnnotationTinyBlobFullText
AFTER DELETE ON  ec_A_AnnotationTinyBlobFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    8,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationTinyBlobFullText',
    CONCAT('Delete',
           'OLD.Aft_AnnotationID=',
           OLD.Aft_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_A_AnnotationTinyBlobFullText
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  AUTO_INCREMENT = 100
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_A_AnnotationTinyBlobFullText
MODIFY COLUMN
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  Aft_AnnotationID                         BIGINT DEFAULT 0              NOT NULL
                                        AUTO_INCREMENT
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP PROCEDURE IF EXISTS sp_ec_A_AnnotationTinyBlob;
DELIMITER //
CREATE PROCEDURE sp_ec_A_AnnotationTinyBlob(
  -- --------------------------------------------------------------------------
  _AnnotationKey       VARCHAR(255),
  _Annotation          VARCHAR(255),
  _AnnotationTypeID    BIGINT,
  -- --------------------------------------------------------------------------
  __TargetID                 BIGINT,
  _TargetEmailAddress        VARCHAR(255),
  -- _TargetName             VARCHAR(255),
  -- _TargetPasswordHash     VARCHAR(255),
  -- _TargetGender           CHAR(1),
  -- _TargetFromInformation  VARCHAR(255),
  -- _TargetBirthInformation VARCHAR(255),
  -- _TargetTypeID           BIGINT,
  -- _TargetPhone            VARCHAR(255),
  -- _TargetAddress          VARCHAR(255),
  -- _TargetStatusID         BIGINT,
  -- _Description            VARCHAR(1024),
  -- --------------------------------------------------------------------------
  __ProductID            BIGINT,
  __OrganizationID       BIGINT,
  _ProductTitle          VARCHAR(255),
  -- _ProductTypeID      BIGINT,
  _OrganizationName      VARCHAR(255),
  _ProductEdition        SMALLINT,
  _ProductStandardCode   VARCHAR(255),
  -- _ProductPublishDate VARCHAR(255),
  -- _ProductBasePricing NUMERIC(16,2),
  -- _ProductStatusID    BIGINT,
  -- _ProductReference   VARCHAR(1024),
  -- _Description        VARCHAR(1024)
  -- _Order              BIGINT,
  -- _Description        VARCHAR(1024)
  -- --------------------------------------------------------------------------
  _AnnotationStatusID    BIGINT,
  _Description           VARCHAR(1024)
  -- --------------------------------------------------------------------------
)
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _TargetID BIGINT;
  -- --------------------------------------------------------------------------
  DECLARE _OrganizationID BIGINT;
  -- --------------------------------------------------------------------------
  DECLARE _ProductID BIGINT;
  -- --------------------------------------------------------------------------
  IF (__TargetID IS NOT NULL)
  THEN
    SET _TargetID = __TargetID;
  ELSE
    SET _TargetID =
    sqlGetId(_TargetEmailAddress);
    -- CAST(CONV(SUBSTRING(MD5(_TargetEmailAddress),1,15),16,10)
    --      AS UNSIGNED INTEGER);
  END IF;
  -- --------------------------------------------------------------------------
  IF (__OrganizationID IS NOT NULL)
  THEN
    SET _OrganizationID = __OrganizationID;
  ELSE
    SET _OrganizationID =
    sqlGetId(_OrganizationName);
    -- CAST(CONV(SUBSTRING(MD5(_OrganizationName),1,15),16,10)
    --      AS UNSIGNED INTEGER);
  END IF;
  -- --------------------------------------------------------------------------
  IF (__ProductID IS NOT NULL)
  THEN
    SET _ProductID = __ProductID;
  ELSE
    SET _ProductID =
    sqlGetId4(_OrganizationID,
              _ProductTitle,
              _ProductEdition,
              _ProductStandardCode
              );
    -- CAST(CONV(SUBSTRING(MD5(CONCAT(_OrganizationID,
    --                                _ProductTitle,
    --                                _ProductEdition,
    --                                _ProductStandardCode
    --                                )
    --                         ),
    --                     1,15
    --                     ),
    --           16,10
    --           )
    --      AS UNSIGNED INTEGER
    --      );
  END IF;
  -- --------------------------------------------------------------------------
  INSERT INTO ec_A_AnnotationTinyBlob(
    A_AnnotationKey,
    A_Annotation,
    A_AnnotationTypeID,
    A_TargetID,
    A_ContentID,
    A_AnnotationStatusID,
    A_Description
  ) VALUES (
    _AnnotationKey,
    _Annotation,
    _AnnotationTypeID,
    _TargetID,
    _ProductID,
    _AnnotationStatusID,
    _Description
  );
  -- --------------------------------------------------------------------------
  INSERT INTO ec_A_AnnotationTinyBlobFullText(
    Aft_AnnotationKey,
    Aft_Annotation,
    Aft_AnnotationTypeID,
    Aft_TargetID,
    Aft_ContentID,
    Aft_Description
  ) VALUES (
    _AnnotationKey,
    _Annotation,
    _AnnotationTypeID,
    _TargetID,
    _ProductID,
    _Description
  );
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbi_ec_A_AnnotationMediumBlob;
DELIMITER //
CREATE TRIGGER   tbi_ec_A_AnnotationMediumBlob
BEFORE INSERT ON ec_A_AnnotationMediumBlob
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _AnnotationID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.A_EntryCreatedTime = CURRENT_TIMESTAMP();
  SET NEW.A_EntryUpdatedTime = '0000-00-00 00:00:00';
  -- --------------------------------------------------------------------------
  IF ((NEW.A_AnnotationID IS NULL
       )
      OR
      (NEW.A_AnnotationID != 0
       )
      )
  THEN
    SET _AnnotationID =
    sqlGetId5(NEW.A_TargetID,
              NEW.A_AnnotationTypeID,
              NEW.A_ContentID,
              NEW.A_AnnotationKey,
              NEW.A_Annotation
              );
    -- CAST(CONV(SUBSTRING(MD5(CONCAT(NEW.A_TargetID,
    --                                NEW.A_AnnotationTypeID,
    --                                NEW.A_ContentID,
    --                                NEW.A_AnnotationKey,
    --                                NEW.A_Annotation
    --                                )
    --                         ),
    --                     1,15
    --                     ),
    --           16,10
    --           )
    --      AS UNSIGNED INTEGER
    --      );
    IF (_AnnotationID IS NULL)
    THEN
      SET _AnnotationID = 0;
    END IF;
    SET NEW.A_AnnotationID = _AnnotationID;
  END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.A_AnnotationID IS NULL
  --      )
  --     -- OR
  --     -- (NEW.A_AnnotationID = 0
  --     --  )
  --     )
  -- THEN
  --   SELECT
  --     MAX(ec_A_Annotation.A_AnnotationID)+1
  --   INTO
  --     _AnnotationID
  --   FROM
  --     ec_A_AnnotationMediumBlob;
  --   IF (_AnnotationID IS NULL)
  --   THEN
  --     SET _AnnotationID = 0;
  --   END IF;
  --   SET NEW.A_AnnotationID = _AnnotationID;
  -- END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.A_AnnotationTypeID IS NULL
  --      )
  --     OR
  --     (NEW.A_AnnotationTypeID < 1
  --      )
  --     )
  -- THEN
  --   SET NEW.A_AnnotationTypeID = 1;
  -- END IF;
  -- --------------------------------------------------------------------------
  IF ((NEW.A_AnnotationStatusID IS NULL
       )
      OR
      (NEW.A_AnnotationStatusID < 1
       )
      )
  THEN
    SET NEW.A_AnnotationStatusID = 1;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    3,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationMediumBlob',
    CONCAT('Insert',
           'NEW.A_AnnotationID=',
           NEW.A_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbu_ec_A_AnnotationMediumBlob;
DELIMITER //
CREATE TRIGGER   tbu_ec_A_AnnotationMediumBlob
BEFORE UPDATE ON ec_A_AnnotationMediumBlob
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.A_EntryCreatedTime = OLD.A_EntryCreatedTime;
  SET NEW.A_EntryUpdatedTime = CURRENT_TIMESTAMP();
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    5,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationMediumBlob',
    CONCAT('Update',
           'NEW.A_AnnotationID=',
           NEW.A_AnnotationID,
           'OLD.A_AnnotationID=',
           OLD.A_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbd_ec_A_AnnotationMediumBlob;
DELIMITER //
CREATE TRIGGER   tbd_ec_A_AnnotationMediumBlob
BEFORE DELETE ON ec_A_AnnotationMediumBlob
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    7,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationMediumBlob',
    CONCAT('Delete',
           'OLD.A_AnnotationID=',
           OLD.A_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tai_ec_A_AnnotationMediumBlob;
DELIMITER //
CREATE TRIGGER   tai_ec_A_AnnotationMediumBlob
AFTER INSERT ON  ec_A_AnnotationMediumBlob
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    4,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationMediumBlob',
    CONCAT('Insert',
           'NEW.A_AnnotationID=',
           NEW.A_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tau_ec_A_AnnotationMediumBlob;
DELIMITER //
CREATE TRIGGER   tau_ec_A_AnnotationMediumBlob
AFTER UPDATE ON  ec_A_AnnotationMediumBlob
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    6,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationMediumBlob',
    CONCAT('Update',
           'NEW.A_AnnotationID=',
           NEW.A_AnnotationID,
           'OLD.A_AnnotationID=',
           OLD.A_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tad_ec_A_AnnotationMediumBlob;
DELIMITER //
CREATE TRIGGER   tad_ec_A_AnnotationMediumBlob
AFTER DELETE ON  ec_A_AnnotationMediumBlob
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    8,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationMediumBlob',
    CONCAT('Delete',
           'OLD.A_AnnotationID=',
           OLD.A_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_A_AnnotationMediumBlob
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  AUTO_INCREMENT = 100
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_A_AnnotationMediumBlob
MODIFY COLUMN
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  A_AnnotationID                           BIGINT DEFAULT 0              NOT NULL
                                        AUTO_INCREMENT
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbi_ec_A_AnnotationMediumBlobFullText;
DELIMITER //
CREATE TRIGGER   tbi_ec_A_AnnotationMediumBlobFullText
BEFORE INSERT ON ec_A_AnnotationMediumBlobFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _AnnotationID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.Aft_EntryCreatedTime = CURRENT_TIMESTAMP();
  SET NEW.Aft_EntryUpdatedTime = '0000-00-00 00:00:00';
  -- --------------------------------------------------------------------------
  IF ((NEW.Aft_AnnotationID IS NULL
       )
      OR
      (NEW.Aft_AnnotationID != 0
       )
      )
  THEN
    SET _AnnotationID =
    sqlGetId5(NEW.Aft_TargetID,
              NEW.Aft_AnnotationTypeID,
              NEW.Aft_ContentID,
              NEW.Aft_AnnotationKey,
              NEW.Aft_Annotation
              );
    -- CAST(CONV(SUBSTRING(MD5(CONCAT(NEW.Aft_TargetID,
    --                                NEW.Aft_AnnotationTypeID,
    --                                NEW.Aft_ContentID,
    --                                NEW.Aft_AnnotationKey,
    --                                NEW.Aft_Annotation
    --                                )
    --                         ),
    --                     1,15
    --                     ),
    --           16,10
    --           )
    --      AS UNSIGNED INTEGER
    --      );
    IF (_AnnotationID IS NULL)
    THEN
      SET _AnnotationID = 0;
    END IF;
    SET NEW.Aft_AnnotationID = _AnnotationID;
  END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.Aft_AnnotationID IS NULL
  --      )
  --     -- OR
  --     -- (NEW.Aft_AnnotationID = 0
  --     --  )
  --     )
  -- THEN
  --   SELECT
  --     MAX(ec_A_AnnotationMediumBlobFullText.Aft_AnnotationID)+1
  --   INTO
  --     _AnnotationID
  --   FROM
  --     ec_A_AnnotationMediumBlobFullText;
  --   IF (_AnnotationID IS NULL)
  --   THEN
  --     SET _AnnotationID = 0;
  --   END IF;
  --   SET NEW.Aft_AnnotationID = _AnnotationID;
  -- END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    3,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationMediumBlobFullText',
    CONCAT('Insert',
           'NEW.Aft_AnnotationID=',
           NEW.Aft_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbu_ec_A_AnnotationMediumBlobFullText;
DELIMITER //
CREATE TRIGGER   tbu_ec_A_AnnotationMediumBlobFullText
BEFORE UPDATE ON ec_A_AnnotationMediumBlobFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.Aft_EntryCreatedTime = OLD.Aft_EntryCreatedTime;
  SET NEW.Aft_EntryUpdatedTime = CURRENT_TIMESTAMP();
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    5,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationMediumBlobFullText',
    CONCAT('Update',
           'NEW.Aft_AnnotationID=',
           NEW.Aft_AnnotationID,
           'OLD.Aft_AnnotationID=',
           OLD.Aft_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbd_ec_A_AnnotationMediumBlobFullText;
DELIMITER //
CREATE TRIGGER   tbd_ec_A_AnnotationMediumBlobFullText
BEFORE DELETE ON ec_A_AnnotationMediumBlobFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    7,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationMediumBlobFullText',
    CONCAT('Delete',
           'OLD.Aft_AnnotationID=',
           OLD.Aft_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tai_ec_A_AnnotationMediumBlobFullText;
DELIMITER //
CREATE TRIGGER   tai_ec_A_AnnotationMediumBlobFullText
AFTER INSERT ON  ec_A_AnnotationMediumBlobFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    4,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationMediumBlobFullText',
    CONCAT('Insert',
           'NEW.Aft_AnnotationID=',
           NEW.Aft_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tau_ec_A_AnnotationMediumBlobFullText;
DELIMITER //
CREATE TRIGGER   tau_ec_A_AnnotationMediumBlobFullText
AFTER UPDATE ON  ec_A_AnnotationMediumBlobFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    6,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationMediumBlobFullText',
    CONCAT('Update',
           'NEW.Aft_AnnotationID=',
           NEW.Aft_AnnotationID,
           'OLD.Aft_AnnotationID=',
           OLD.Aft_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tad_ec_A_AnnotationMediumBlobFullText;
DELIMITER //
CREATE TRIGGER   tad_ec_A_AnnotationMediumBlobFullText
AFTER DELETE ON  ec_A_AnnotationMediumBlobFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    8,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationMediumBlobFullText',
    CONCAT('Delete',
           'OLD.Aft_AnnotationID=',
           OLD.Aft_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_A_AnnotationMediumBlobFullText
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  AUTO_INCREMENT = 100
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_A_AnnotationMediumBlobFullText
MODIFY COLUMN
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  Aft_AnnotationID                         BIGINT DEFAULT 0              NOT NULL
                                        AUTO_INCREMENT
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP PROCEDURE IF EXISTS sp_ec_A_AnnotationMediumBlob;
DELIMITER //
CREATE PROCEDURE sp_ec_A_AnnotationMediumBlob(
  -- --------------------------------------------------------------------------
  _AnnotationKey       VARCHAR(255),
  _Annotation          VARCHAR(255),
  _AnnotationTypeID    BIGINT,
  -- --------------------------------------------------------------------------
  __TargetID                 BIGINT,
  _TargetEmailAddress        VARCHAR(255),
  -- _TargetName             VARCHAR(255),
  -- _TargetPasswordHash     VARCHAR(255),
  -- _TargetGender           CHAR(1),
  -- _TargetFromInformation  VARCHAR(255),
  -- _TargetBirthInformation VARCHAR(255),
  -- _TargetTypeID           BIGINT,
  -- _TargetPhone            VARCHAR(255),
  -- _TargetAddress          VARCHAR(255),
  -- _TargetStatusID         BIGINT,
  -- _Description            VARCHAR(1024),
  -- --------------------------------------------------------------------------
  __ProductID            BIGINT,
  __OrganizationID       BIGINT,
  _ProductTitle          VARCHAR(255),
  -- _ProductTypeID      BIGINT,
  _OrganizationName      VARCHAR(255),
  _ProductEdition        SMALLINT,
  _ProductStandardCode   VARCHAR(255),
  -- _ProductPublishDate VARCHAR(255),
  -- _ProductBasePricing NUMERIC(16,2),
  -- _ProductStatusID    BIGINT,
  -- _ProductReference   VARCHAR(1024),
  -- _Description        VARCHAR(1024)
  -- _Order              BIGINT,
  -- _Description        VARCHAR(1024)
  -- --------------------------------------------------------------------------
  _AnnotationStatusID    BIGINT,
  _Description           VARCHAR(1024)
  -- --------------------------------------------------------------------------
)
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _TargetID BIGINT;
  -- --------------------------------------------------------------------------
  DECLARE _OrganizationID BIGINT;
  -- --------------------------------------------------------------------------
  DECLARE _ProductID BIGINT;
  -- --------------------------------------------------------------------------
  IF (__TargetID IS NOT NULL)
  THEN
    SET _TargetID = __TargetID;
  ELSE
    SET _TargetID =
    sqlGetId(_TargetEmailAddress);
    -- CAST(CONV(SUBSTRING(MD5(_TargetEmailAddress),1,15),16,10)
    --      AS UNSIGNED INTEGER);
  END IF;
  -- --------------------------------------------------------------------------
  IF (__OrganizationID IS NOT NULL)
  THEN
    SET _OrganizationID = __OrganizationID;
  ELSE
    SET _OrganizationID =
    sqlGetId(_OrganizationName);
    -- CAST(CONV(SUBSTRING(MD5(_OrganizationName),1,15),16,10)
    --      AS UNSIGNED INTEGER);
  END IF;
  -- --------------------------------------------------------------------------
  IF (__ProductID IS NOT NULL)
  THEN
    SET _ProductID = __ProductID;
  ELSE
    SET _ProductID =
    sqlGetId4(_OrganizationID,
              _ProductTitle,
              _ProductEdition,
              _ProductStandardCode
              );
    -- CAST(CONV(SUBSTRING(MD5(CONCAT(_OrganizationID,
    --                                _ProductTitle,
    --                                _ProductEdition,
    --                                _ProductStandardCode
    --                                )
    --                         ),
    --                     1,15
    --                     ),
    --           16,10
    --           )
    --      AS UNSIGNED INTEGER
    --      );
  END IF;
  -- --------------------------------------------------------------------------
  INSERT INTO ec_A_AnnotationMediumBlob(
    A_AnnotationKey,
    A_Annotation,
    A_AnnotationTypeID,
    A_TargetID,
    A_ContentID,
    A_AnnotationStatusID,
    A_Description
  ) VALUES (
    _AnnotationKey,
    _Annotation,
    _AnnotationTypeID,
    _TargetID,
    _ProductID,
    _AnnotationStatusID,
    _Description
  );
  -- --------------------------------------------------------------------------
  INSERT INTO ec_A_AnnotationMediumBlobFullText(
    Aft_AnnotationKey,
    Aft_Annotation,
    Aft_AnnotationTypeID,
    Aft_TargetID,
    Aft_ContentID,
    Aft_Description
  ) VALUES (
    _AnnotationKey,
    _Annotation,
    _AnnotationTypeID,
    _TargetID,
    _ProductID,
    _Description
  );
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbi_ec_A_AnnotationLongBlob;
DELIMITER //
CREATE TRIGGER   tbi_ec_A_AnnotationLongBlob
BEFORE INSERT ON ec_A_AnnotationLongBlob
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _AnnotationID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.A_EntryCreatedTime = CURRENT_TIMESTAMP();
  SET NEW.A_EntryUpdatedTime = '0000-00-00 00:00:00';
  -- --------------------------------------------------------------------------
  IF ((NEW.A_AnnotationID IS NULL
       )
      OR
      (NEW.A_AnnotationID != 0
       )
      )
  THEN
    SET _AnnotationID =
    sqlGetId5(NEW.A_TargetID,
              NEW.A_AnnotationTypeID,
              NEW.A_ContentID,
              NEW.A_AnnotationKey,
              NEW.A_Annotation
              );
    -- CAST(CONV(SUBSTRING(MD5(CONCAT(NEW.A_TargetID,
    --                                NEW.A_AnnotationTypeID,
    --                                NEW.A_ContentID,
    --                                NEW.A_AnnotationKey,
    --                                NEW.A_Annotation
    --                                )
    --                         ),
    --                     1,15
    --                     ),
    --           16,10
    --           )
    --      AS UNSIGNED INTEGER
    --      );
    IF (_AnnotationID IS NULL)
    THEN
      SET _AnnotationID = 0;
    END IF;
    SET NEW.A_AnnotationID = _AnnotationID;
  END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.A_AnnotationID IS NULL
  --      )
  --     -- OR
  --     -- (NEW.A_AnnotationID = 0
  --     --  )
  --     )
  -- THEN
  --   SELECT
  --     MAX(ec_A_Annotation.A_AnnotationID)+1
  --   INTO
  --     _AnnotationID
  --   FROM
  --     ec_A_AnnotationLongBlob;
  --   IF (_AnnotationID IS NULL)
  --   THEN
  --     SET _AnnotationID = 0;
  --   END IF;
  --   SET NEW.A_AnnotationID = _AnnotationID;
  -- END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.A_AnnotationTypeID IS NULL
  --      )
  --     OR
  --     (NEW.A_AnnotationTypeID < 1
  --      )
  --     )
  -- THEN
  --   SET NEW.A_AnnotationTypeID = 1;
  -- END IF;
  -- --------------------------------------------------------------------------
  IF ((NEW.A_AnnotationStatusID IS NULL
       )
      OR
      (NEW.A_AnnotationStatusID < 1
       )
      )
  THEN
    SET NEW.A_AnnotationStatusID = 1;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    3,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationLongBlob',
    CONCAT('Insert',
           'NEW.A_AnnotationID=',
           NEW.A_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbu_ec_A_AnnotationLongBlob;
DELIMITER //
CREATE TRIGGER   tbu_ec_A_AnnotationLongBlob
BEFORE UPDATE ON ec_A_AnnotationLongBlob
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.A_EntryCreatedTime = OLD.A_EntryCreatedTime;
  SET NEW.A_EntryUpdatedTime = CURRENT_TIMESTAMP();
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    5,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationLongBlob',
    CONCAT('Update',
           'NEW.A_AnnotationID=',
           NEW.A_AnnotationID,
           'OLD.A_AnnotationID=',
           OLD.A_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbd_ec_A_AnnotationLongBlob;
DELIMITER //
CREATE TRIGGER   tbd_ec_A_AnnotationLongBlob
BEFORE DELETE ON ec_A_AnnotationLongBlob
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    7,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationLongBlob',
    CONCAT('Delete',
           'OLD.A_AnnotationID=',
           OLD.A_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tai_ec_A_AnnotationLongBlob;
DELIMITER //
CREATE TRIGGER   tai_ec_A_AnnotationLongBlob
AFTER INSERT ON  ec_A_AnnotationLongBlob
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    4,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationLongBlob',
    CONCAT('Insert',
           'NEW.A_AnnotationID=',
           NEW.A_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tau_ec_A_AnnotationLongBlob;
DELIMITER //
CREATE TRIGGER   tau_ec_A_AnnotationLongBlob
AFTER UPDATE ON  ec_A_AnnotationLongBlob
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    6,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationLongBlob',
    CONCAT('Update',
           'NEW.A_AnnotationID=',
           NEW.A_AnnotationID,
           'OLD.A_AnnotationID=',
           OLD.A_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tad_ec_A_AnnotationLongBlob;
DELIMITER //
CREATE TRIGGER   tad_ec_A_AnnotationLongBlob
AFTER DELETE ON  ec_A_AnnotationLongBlob
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    8,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationLongBlob',
    CONCAT('Delete',
           'OLD.A_AnnotationID=',
           OLD.A_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_A_AnnotationLongBlob
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  AUTO_INCREMENT = 100
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_A_AnnotationLongBlob
MODIFY COLUMN
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  A_AnnotationID                           BIGINT DEFAULT 0              NOT NULL
                                        AUTO_INCREMENT
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbi_ec_A_AnnotationLongBlobFullText;
DELIMITER //
CREATE TRIGGER   tbi_ec_A_AnnotationLongBlobFullText
BEFORE INSERT ON ec_A_AnnotationLongBlobFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _AnnotationID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.Aft_EntryCreatedTime = CURRENT_TIMESTAMP();
  SET NEW.Aft_EntryUpdatedTime = '0000-00-00 00:00:00';
  -- --------------------------------------------------------------------------
  IF ((NEW.Aft_AnnotationID IS NULL
       )
      OR
      (NEW.Aft_AnnotationID != 0
       )
      )
  THEN
    SET _AnnotationID =
    sqlGetId5(NEW.Aft_TargetID,
              NEW.Aft_AnnotationTypeID,
              NEW.Aft_ContentID,
              NEW.Aft_AnnotationKey,
              NEW.Aft_Annotation
              );
    -- CAST(CONV(SUBSTRING(MD5(CONCAT(NEW.Aft_TargetID,
    --                                NEW.Aft_AnnotationTypeID,
    --                                NEW.Aft_ContentID,
    --                                NEW.Aft_AnnotationKey,
    --                                NEW.Aft_Annotation
    --                                )
    --                         ),
    --                     1,15
    --                     ),
    --           16,10
    --           )
    --      AS UNSIGNED INTEGER
    --      );
    IF (_AnnotationID IS NULL)
    THEN
      SET _AnnotationID = 0;
    END IF;
    SET NEW.Aft_AnnotationID = _AnnotationID;
  END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.Aft_AnnotationID IS NULL
  --      )
  --     -- OR
  --     -- (NEW.Aft_AnnotationID = 0
  --     --  )
  --     )
  -- THEN
  --   SELECT
  --     MAX(ec_A_AnnotationLongBlobFullText.Aft_AnnotationID)+1
  --   INTO
  --     _AnnotationID
  --   FROM
  --     ec_A_AnnotationLongBlobFullText;
  --   IF (_AnnotationID IS NULL)
  --   THEN
  --     SET _AnnotationID = 0;
  --   END IF;
  --   SET NEW.Aft_AnnotationID = _AnnotationID;
  -- END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    3,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationLongBlobFullText',
    CONCAT('Insert',
           'NEW.Aft_AnnotationID=',
           NEW.Aft_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbu_ec_A_AnnotationLongBlobFullText;
DELIMITER //
CREATE TRIGGER   tbu_ec_A_AnnotationLongBlobFullText
BEFORE UPDATE ON ec_A_AnnotationLongBlobFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.Aft_EntryCreatedTime = OLD.Aft_EntryCreatedTime;
  SET NEW.Aft_EntryUpdatedTime = CURRENT_TIMESTAMP();
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    5,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationLongBlobFullText',
    CONCAT('Update',
           'NEW.Aft_AnnotationID=',
           NEW.Aft_AnnotationID,
           'OLD.Aft_AnnotationID=',
           OLD.Aft_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbd_ec_A_AnnotationLongBlobFullText;
DELIMITER //
CREATE TRIGGER   tbd_ec_A_AnnotationLongBlobFullText
BEFORE DELETE ON ec_A_AnnotationLongBlobFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    7,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationLongBlobFullText',
    CONCAT('Delete',
           'OLD.Aft_AnnotationID=',
           OLD.Aft_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tai_ec_A_AnnotationLongBlobFullText;
DELIMITER //
CREATE TRIGGER   tai_ec_A_AnnotationLongBlobFullText
AFTER INSERT ON  ec_A_AnnotationLongBlobFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    4,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationLongBlobFullText',
    CONCAT('Insert',
           'NEW.Aft_AnnotationID=',
           NEW.Aft_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tau_ec_A_AnnotationLongBlobFullText;
DELIMITER //
CREATE TRIGGER   tau_ec_A_AnnotationLongBlobFullText
AFTER UPDATE ON  ec_A_AnnotationLongBlobFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    6,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationLongBlobFullText',
    CONCAT('Update',
           'NEW.Aft_AnnotationID=',
           NEW.Aft_AnnotationID,
           'OLD.Aft_AnnotationID=',
           OLD.Aft_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tad_ec_A_AnnotationLongBlobFullText;
DELIMITER //
CREATE TRIGGER   tad_ec_A_AnnotationLongBlobFullText
AFTER DELETE ON  ec_A_AnnotationLongBlobFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    8,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationLongBlobFullText',
    CONCAT('Delete',
           'OLD.Aft_AnnotationID=',
           OLD.Aft_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_A_AnnotationLongBlobFullText
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  AUTO_INCREMENT = 100
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_A_AnnotationLongBlobFullText
MODIFY COLUMN
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  Aft_AnnotationID                         BIGINT DEFAULT 0              NOT NULL
                                        AUTO_INCREMENT
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP PROCEDURE IF EXISTS sp_ec_A_AnnotationLongBlob;
DELIMITER //
CREATE PROCEDURE sp_ec_A_AnnotationLongBlob(
  -- --------------------------------------------------------------------------
  _AnnotationKey       VARCHAR(255),
  _Annotation          VARCHAR(255),
  _AnnotationTypeID    BIGINT,
  -- --------------------------------------------------------------------------
  __TargetID                 BIGINT,
  _TargetEmailAddress        VARCHAR(255),
  -- _TargetName             VARCHAR(255),
  -- _TargetPasswordHash     VARCHAR(255),
  -- _TargetGender           CHAR(1),
  -- _TargetFromInformation  VARCHAR(255),
  -- _TargetBirthInformation VARCHAR(255),
  -- _TargetTypeID           BIGINT,
  -- _TargetPhone            VARCHAR(255),
  -- _TargetAddress          VARCHAR(255),
  -- _TargetStatusID         BIGINT,
  -- _Description            VARCHAR(1024),
  -- --------------------------------------------------------------------------
  __ProductID            BIGINT,
  __OrganizationID       BIGINT,
  _ProductTitle          VARCHAR(255),
  -- _ProductTypeID      BIGINT,
  _OrganizationName      VARCHAR(255),
  _ProductEdition        SMALLINT,
  _ProductStandardCode   VARCHAR(255),
  -- _ProductPublishDate VARCHAR(255),
  -- _ProductBasePricing NUMERIC(16,2),
  -- _ProductStatusID    BIGINT,
  -- _ProductReference   VARCHAR(1024),
  -- _Description        VARCHAR(1024)
  -- _Order              BIGINT,
  -- _Description        VARCHAR(1024)
  -- --------------------------------------------------------------------------
  _AnnotationStatusID    BIGINT,
  _Description           VARCHAR(1024)
  -- --------------------------------------------------------------------------
)
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _TargetID BIGINT;
  -- --------------------------------------------------------------------------
  DECLARE _OrganizationID BIGINT;
  -- --------------------------------------------------------------------------
  DECLARE _ProductID BIGINT;
  -- --------------------------------------------------------------------------
  IF (__TargetID IS NOT NULL)
  THEN
    SET _TargetID = __TargetID;
  ELSE
    SET _TargetID =
    sqlGetId(_TargetEmailAddress);
    -- CAST(CONV(SUBSTRING(MD5(_TargetEmailAddress),1,15),16,10)
    --      AS UNSIGNED INTEGER);
  END IF;
  -- --------------------------------------------------------------------------
  IF (__OrganizationID IS NOT NULL)
  THEN
    SET _OrganizationID = __OrganizationID;
  ELSE
    SET _OrganizationID =
    sqlGetId(_OrganizationName);
    -- CAST(CONV(SUBSTRING(MD5(_OrganizationName),1,15),16,10)
    --      AS UNSIGNED INTEGER);
  END IF;
  -- --------------------------------------------------------------------------
  IF (__ProductID IS NOT NULL)
  THEN
    SET _ProductID = __ProductID;
  ELSE
    SET _ProductID =
    sqlGetId4(_OrganizationID,
              _ProductTitle,
              _ProductEdition,
              _ProductStandardCode
              );
    -- CAST(CONV(SUBSTRING(MD5(CONCAT(_OrganizationID,
    --                                _ProductTitle,
    --                                _ProductEdition,
    --                                _ProductStandardCode
    --                                )
    --                         ),
    --                     1,15
    --                     ),
    --           16,10
    --           )
    --      AS UNSIGNED INTEGER
    --      );
  END IF;
  -- --------------------------------------------------------------------------
  INSERT INTO ec_A_AnnotationLongBlob(
    A_AnnotationKey,
    A_Annotation,
    A_AnnotationTypeID,
    A_TargetID,
    A_ContentID,
    A_AnnotationStatusID,
    A_Description
  ) VALUES (
    _AnnotationKey,
    _Annotation,
    _AnnotationTypeID,
    _TargetID,
    _ProductID,
    _AnnotationStatusID,
    _Description
  );
  -- --------------------------------------------------------------------------
  INSERT INTO ec_A_AnnotationLongBlobFullText(
    Aft_AnnotationKey,
    Aft_Annotation,
    Aft_AnnotationTypeID,
    Aft_TargetID,
    Aft_ContentID,
    Aft_Description
  ) VALUES (
    _AnnotationKey,
    _Annotation,
    _AnnotationTypeID,
    _TargetID,
    _ProductID,
    _Description
  );
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbi_ec_A_AnnotationExternalFile;
DELIMITER //
CREATE TRIGGER   tbi_ec_A_AnnotationExternalFile
BEFORE INSERT ON ec_A_AnnotationExternalFile
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _AnnotationID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.A_EntryCreatedTime = CURRENT_TIMESTAMP();
  SET NEW.A_EntryUpdatedTime = '0000-00-00 00:00:00';
  -- --------------------------------------------------------------------------
  IF ((NEW.A_AnnotationID IS NULL
       )
      OR
      (NEW.A_AnnotationID != 0
       )
      )
  THEN
    SET _AnnotationID =
    sqlGetId5(NEW.A_TargetID,
              NEW.A_AnnotationTypeID,
              NEW.A_ContentID,
              NEW.A_AnnotationKey,
              NEW.A_Annotation
              );
    -- CAST(CONV(SUBSTRING(MD5(CONCAT(NEW.A_TargetID,
    --                                NEW.A_AnnotationTypeID,
    --                                NEW.A_ContentID,
    --                                NEW.A_AnnotationKey,
    --                                NEW.A_Annotation
    --                                )
    --                         ),
    --                     1,15
    --                     ),
    --           16,10
    --           )
    --      AS UNSIGNED INTEGER
    --      );
    IF (_AnnotationID IS NULL)
    THEN
      SET _AnnotationID = 0;
    END IF;
    SET NEW.A_AnnotationID = _AnnotationID;
  END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.A_AnnotationID IS NULL
  --      )
  --     -- OR
  --     -- (NEW.A_AnnotationID = 0
  --     --  )
  --     )
  -- THEN
  --   SELECT
  --     MAX(ec_A_Annotation.A_AnnotationID)+1
  --   INTO
  --     _AnnotationID
  --   FROM
  --     ec_A_AnnotationExternalFile;
  --   IF (_AnnotationID IS NULL)
  --   THEN
  --     SET _AnnotationID = 0;
  --   END IF;
  --   SET NEW.A_AnnotationID = _AnnotationID;
  -- END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.A_AnnotationTypeID IS NULL
  --      )
  --     OR
  --     (NEW.A_AnnotationTypeID < 1
  --      )
  --     )
  -- THEN
  --   SET NEW.A_AnnotationTypeID = 1;
  -- END IF;
  -- --------------------------------------------------------------------------
  IF ((NEW.A_AnnotationStatusID IS NULL
       )
      OR
      (NEW.A_AnnotationStatusID < 1
       )
      )
  THEN
    SET NEW.A_AnnotationStatusID = 1;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    3,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationExternalFile',
    CONCAT('Insert',
           'NEW.A_AnnotationID=',
           NEW.A_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbu_ec_A_AnnotationExternalFile;
DELIMITER //
CREATE TRIGGER   tbu_ec_A_AnnotationExternalFile
BEFORE UPDATE ON ec_A_AnnotationExternalFile
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.A_EntryCreatedTime = OLD.A_EntryCreatedTime;
  SET NEW.A_EntryUpdatedTime = CURRENT_TIMESTAMP();
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    5,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationExternalFile',
    CONCAT('Update',
           'NEW.A_AnnotationID=',
           NEW.A_AnnotationID,
           'OLD.A_AnnotationID=',
           OLD.A_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbd_ec_A_AnnotationExternalFile;
DELIMITER //
CREATE TRIGGER   tbd_ec_A_AnnotationExternalFile
BEFORE DELETE ON ec_A_AnnotationExternalFile
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    7,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationExternalFile',
    CONCAT('Delete',
           'OLD.A_AnnotationID=',
           OLD.A_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tai_ec_A_AnnotationExternalFile;
DELIMITER //
CREATE TRIGGER   tai_ec_A_AnnotationExternalFile
AFTER INSERT ON  ec_A_AnnotationExternalFile
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    4,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationExternalFile',
    CONCAT('Insert',
           'NEW.A_AnnotationID=',
           NEW.A_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tau_ec_A_AnnotationExternalFile;
DELIMITER //
CREATE TRIGGER   tau_ec_A_AnnotationExternalFile
AFTER UPDATE ON  ec_A_AnnotationExternalFile
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    6,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationExternalFile',
    CONCAT('Update',
           'NEW.A_AnnotationID=',
           NEW.A_AnnotationID,
           'OLD.A_AnnotationID=',
           OLD.A_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tad_ec_A_AnnotationExternalFile;
DELIMITER //
CREATE TRIGGER   tad_ec_A_AnnotationExternalFile
AFTER DELETE ON  ec_A_AnnotationExternalFile
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    8,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationExternalFile',
    CONCAT('Delete',
           'OLD.A_AnnotationID=',
           OLD.A_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_A_AnnotationExternalFile
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  AUTO_INCREMENT = 100
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_A_AnnotationExternalFile
MODIFY COLUMN
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  A_AnnotationID                           BIGINT DEFAULT 0              NOT NULL
                                        AUTO_INCREMENT
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbi_ec_A_AnnotationExternalFileFullText;
DELIMITER //
CREATE TRIGGER   tbi_ec_A_AnnotationExternalFileFullText
BEFORE INSERT ON ec_A_AnnotationExternalFileFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _AnnotationID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.Aft_EntryCreatedTime = CURRENT_TIMESTAMP();
  SET NEW.Aft_EntryUpdatedTime = '0000-00-00 00:00:00';
  -- --------------------------------------------------------------------------
  IF ((NEW.Aft_AnnotationID IS NULL
       )
      OR
      (NEW.Aft_AnnotationID != 0
       )
      )
  THEN
    SET _AnnotationID =
    sqlGetId5(NEW.Aft_TargetID,
              NEW.Aft_AnnotationTypeID,
              NEW.Aft_ContentID,
              NEW.Aft_AnnotationKey,
              NEW.Aft_Annotation
              );
    -- CAST(CONV(SUBSTRING(MD5(CONCAT(NEW.Aft_TargetID,
    --                                NEW.Aft_AnnotationTypeID,
    --                                NEW.Aft_ContentID,
    --                                NEW.Aft_AnnotationKey,
    --                                NEW.Aft_Annotation
    --                                )
    --                         ),
    --                     1,15
    --                     ),
    --           16,10
    --           )
    --      AS UNSIGNED INTEGER
    --      );
    IF (_AnnotationID IS NULL)
    THEN
      SET _AnnotationID = 0;
    END IF;
    SET NEW.Aft_AnnotationID = _AnnotationID;
  END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.Aft_AnnotationID IS NULL
  --      )
  --     -- OR
  --     -- (NEW.Aft_AnnotationID = 0
  --     --  )
  --     )
  -- THEN
  --   SELECT
  --     MAX(ec_A_AnnotationExternalFileFullText.Aft_AnnotationID)+1
  --   INTO
  --     _AnnotationID
  --   FROM
  --     ec_A_AnnotationExternalFileFullText;
  --   IF (_AnnotationID IS NULL)
  --   THEN
  --     SET _AnnotationID = 0;
  --   END IF;
  --   SET NEW.Aft_AnnotationID = _AnnotationID;
  -- END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    3,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationExternalFileFullText',
    CONCAT('Insert',
           'NEW.Aft_AnnotationID=',
           NEW.Aft_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbu_ec_A_AnnotationExternalFileFullText;
DELIMITER //
CREATE TRIGGER   tbu_ec_A_AnnotationExternalFileFullText
BEFORE UPDATE ON ec_A_AnnotationExternalFileFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.Aft_EntryCreatedTime = OLD.Aft_EntryCreatedTime;
  SET NEW.Aft_EntryUpdatedTime = CURRENT_TIMESTAMP();
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    5,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationExternalFileFullText',
    CONCAT('Update',
           'NEW.Aft_AnnotationID=',
           NEW.Aft_AnnotationID,
           'OLD.Aft_AnnotationID=',
           OLD.Aft_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbd_ec_A_AnnotationExternalFileFullText;
DELIMITER //
CREATE TRIGGER   tbd_ec_A_AnnotationExternalFileFullText
BEFORE DELETE ON ec_A_AnnotationExternalFileFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    7,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationExternalFileFullText',
    CONCAT('Delete',
           'OLD.Aft_AnnotationID=',
           OLD.Aft_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tai_ec_A_AnnotationExternalFileFullText;
DELIMITER //
CREATE TRIGGER   tai_ec_A_AnnotationExternalFileFullText
AFTER INSERT ON  ec_A_AnnotationExternalFileFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    4,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationExternalFileFullText',
    CONCAT('Insert',
           'NEW.Aft_AnnotationID=',
           NEW.Aft_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tau_ec_A_AnnotationExternalFileFullText;
DELIMITER //
CREATE TRIGGER   tau_ec_A_AnnotationExternalFileFullText
AFTER UPDATE ON  ec_A_AnnotationExternalFileFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    6,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationExternalFileFullText',
    CONCAT('Update',
           'NEW.Aft_AnnotationID=',
           NEW.Aft_AnnotationID,
           'OLD.Aft_AnnotationID=',
           OLD.Aft_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tad_ec_A_AnnotationExternalFileFullText;
DELIMITER //
CREATE TRIGGER   tad_ec_A_AnnotationExternalFileFullText
AFTER DELETE ON  ec_A_AnnotationExternalFileFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    8,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'AnnotationExternalFileFullText',
    CONCAT('Delete',
           'OLD.Aft_AnnotationID=',
           OLD.Aft_AnnotationID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_A_AnnotationExternalFileFullText
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  AUTO_INCREMENT = 100
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_A_AnnotationExternalFileFullText
MODIFY COLUMN
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  Aft_AnnotationID                         BIGINT DEFAULT 0              NOT NULL
                                        AUTO_INCREMENT
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP PROCEDURE IF EXISTS sp_ec_A_AnnotationExternalFile;
DELIMITER //
CREATE PROCEDURE sp_ec_A_AnnotationExternalFile(
  -- --------------------------------------------------------------------------
  _AnnotationKey       VARCHAR(255),
  _Annotation          VARCHAR(255),
  _AnnotationTypeID    BIGINT,
  -- --------------------------------------------------------------------------
  __TargetID                 BIGINT,
  _TargetEmailAddress        VARCHAR(255),
  -- _TargetName             VARCHAR(255),
  -- _TargetPasswordHash     VARCHAR(255),
  -- _TargetGender           CHAR(1),
  -- _TargetFromInformation  VARCHAR(255),
  -- _TargetBirthInformation VARCHAR(255),
  -- _TargetTypeID           BIGINT,
  -- _TargetPhone            VARCHAR(255),
  -- _TargetAddress          VARCHAR(255),
  -- _TargetStatusID         BIGINT,
  -- _Description            VARCHAR(1024),
  -- --------------------------------------------------------------------------
  __ProductID            BIGINT,
  __OrganizationID       BIGINT,
  _ProductTitle          VARCHAR(255),
  -- _ProductTypeID      BIGINT,
  _OrganizationName      VARCHAR(255),
  _ProductEdition        SMALLINT,
  _ProductStandardCode   VARCHAR(255),
  -- _ProductPublishDate VARCHAR(255),
  -- _ProductBasePricing NUMERIC(16,2),
  -- _ProductStatusID    BIGINT,
  -- _ProductReference   VARCHAR(1024),
  -- _Description        VARCHAR(1024)
  -- _Order              BIGINT,
  -- _Description        VARCHAR(1024)
  -- --------------------------------------------------------------------------
  _AnnotationStatusID    BIGINT,
  _Description           VARCHAR(1024)
  -- --------------------------------------------------------------------------
)
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _TargetID BIGINT;
  -- --------------------------------------------------------------------------
  DECLARE _OrganizationID BIGINT;
  -- --------------------------------------------------------------------------
  DECLARE _ProductID BIGINT;
  -- --------------------------------------------------------------------------
  IF (__TargetID IS NOT NULL)
  THEN
    SET _TargetID = __TargetID;
  ELSE
    SET _TargetID =
    sqlGetId(_TargetEmailAddress);
    -- CAST(CONV(SUBSTRING(MD5(_TargetEmailAddress),1,15),16,10)
    --      AS UNSIGNED INTEGER);
  END IF;
  -- --------------------------------------------------------------------------
  IF (__OrganizationID IS NOT NULL)
  THEN
    SET _OrganizationID = __OrganizationID;
  ELSE
    SET _OrganizationID =
    sqlGetId(_OrganizationName);
    -- CAST(CONV(SUBSTRING(MD5(_OrganizationName),1,15),16,10)
    --      AS UNSIGNED INTEGER);
  END IF;
  -- --------------------------------------------------------------------------
  IF (__ProductID IS NOT NULL)
  THEN
    SET _ProductID = __ProductID;
  ELSE
    SET _ProductID =
    sqlGetId4(_OrganizationID,
              _ProductTitle,
              _ProductEdition,
              _ProductStandardCode
              );
    -- CAST(CONV(SUBSTRING(MD5(CONCAT(_OrganizationID,
    --                                _ProductTitle,
    --                                _ProductEdition,
    --                                _ProductStandardCode
    --                                )
    --                         ),
    --                     1,15
    --                     ),
    --           16,10
    --           )
    --      AS UNSIGNED INTEGER
    --      );
  END IF;
  -- --------------------------------------------------------------------------
  INSERT INTO ec_A_AnnotationExternalFile(
    A_AnnotationKey,
    A_Annotation,
    A_AnnotationTypeID,
    A_TargetID,
    A_ContentID,
    A_AnnotationStatusID,
    A_Description
  ) VALUES (
    _AnnotationKey,
    _Annotation,
    _AnnotationTypeID,
    _TargetID,
    _ProductID,
    _AnnotationStatusID,
    _Description
  );
  -- --------------------------------------------------------------------------
  INSERT INTO ec_A_AnnotationExternalFileFullText(
    Aft_AnnotationKey,
    Aft_Annotation,
    Aft_AnnotationTypeID,
    Aft_TargetID,
    Aft_ContentID,
    Aft_Description
  ) VALUES (
    _AnnotationKey,
    _Annotation,
    _AnnotationTypeID,
    _TargetID,
    _ProductID,
    _Description
  );
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
===============================================================================
== Subschema: User
===============================================================================
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbi_ec_U_UserType;
DELIMITER //
CREATE TRIGGER   tbi_ec_U_UserType
BEFORE INSERT ON ec_U_UserType
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _UserTypeID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.UT_EntryCreatedTime = CURRENT_TIMESTAMP();
  SET NEW.UT_EntryUpdatedTime = '0000-00-00 00:00:00';
  -- --------------------------------------------------------------------------
  IF ((NEW.UT_UserTypeID IS NULL
       )
      OR
      (NEW.UT_UserTypeID != 0
       )
      )
  THEN
    SET _UserTypeID =
    sqlGetId(NEW.UT_UserTypeName);
    -- CAST(CONV(SUBSTRING(MD5(NEW.UT_UserTypeName),1,15),16,10)
    --      AS UNSIGNED INTEGER);
    IF (_UserTypeID IS NULL)
    THEN
      SET _UserTypeID = 0;
    END IF;
    SET NEW.UT_UserTypeID = _UserTypeID;
  END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.UT_UserTypeID IS NULL
  --      )
  --     -- OR
  --     -- (NEW.UT_UserTypeID = 0
  --     --  )
  --     )
  -- THEN
  --   SELECT
  --     MAX(ec_U_UserType.UT_UserTypeID)+1
  --   INTO
  --     _UserTypeID
  --   FROM
  --     ec_U_UserType;
  --   IF (_UserTypeID IS NULL)
  --   THEN
  --     SET _UserTypeID = 0;
  --   END IF;
  --   SET NEW.UT_UserTypeID = _UserTypeID;
  -- END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    3,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'UserType',
    CONCAT('Insert',
           'NEW.UT_UserTypeID=',
           NEW.UT_UserTypeID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbu_ec_U_UserType;
DELIMITER //
CREATE TRIGGER   tbu_ec_U_UserType
BEFORE UPDATE ON ec_U_UserType
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.UT_EntryCreatedTime = OLD.UT_EntryCreatedTime;
  SET NEW.UT_EntryUpdatedTime = CURRENT_TIMESTAMP();
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    5,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'UserType',
    CONCAT('Update',
           'NEW.UT_UserTypeID=',
           NEW.UT_UserTypeID,
           'OLD.UT_UserTypeID=',
           OLD.UT_UserTypeID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbd_ec_U_UserType;
DELIMITER //
CREATE TRIGGER   tbd_ec_U_UserType
BEFORE DELETE ON ec_U_UserType
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    7,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'UserType',
    CONCAT('Delete',
           'OLD.UT_UserTypeID=',
           OLD.UT_UserTypeID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tai_ec_U_UserType;
DELIMITER //
CREATE TRIGGER   tai_ec_U_UserType
AFTER INSERT ON  ec_U_UserType
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    4,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'UserType',
    CONCAT('Insert',
           'NEW.UT_UserTypeID=',
           NEW.UT_UserTypeID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tau_ec_U_UserType;
DELIMITER //
CREATE TRIGGER   tau_ec_U_UserType
AFTER UPDATE ON  ec_U_UserType
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    6,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'UserType',
    CONCAT('Update',
           'NEW.UT_UserTypeID=',
           NEW.UT_UserTypeID,
           'OLD.UT_UserTypeID=',
           OLD.UT_UserTypeID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tad_ec_U_UserType;
DELIMITER //
CREATE TRIGGER   tad_ec_U_UserType
AFTER DELETE ON  ec_U_UserType
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    8,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'UserType',
    CONCAT('Delete',
           'OLD.UT_UserTypeID=',
           OLD.UT_UserTypeID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_U_UserType
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  AUTO_INCREMENT = 100
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_U_UserType
MODIFY COLUMN
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  UT_UserTypeID                         BIGINT DEFAULT 0              NOT NULL
                                        AUTO_INCREMENT
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbi_ec_U_UserStatus;
DELIMITER //
CREATE TRIGGER   tbi_ec_U_UserStatus
BEFORE INSERT ON ec_U_UserStatus
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _UserStatusID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.Us_EntryCreatedTime = CURRENT_TIMESTAMP();
  SET NEW.Us_EntryUpdatedTime = '0000-00-00 00:00:00';
  -- --------------------------------------------------------------------------
  IF ((NEW.Us_UserStatusID IS NULL
       )
      OR
      (NEW.Us_UserStatusID != 0
       )
      )
  THEN
    SET _UserStatusID =
    sqlGetId(NEW.Us_UserStatusName);
    -- CAST(CONV(SUBSTRING(MD5(NEW.Us_UserStatusName),1,15),16,10)
    --      AS UNSIGNED INTEGER);
    IF (_UserStatusID IS NULL)
    THEN
      SET _UserStatusID = 0;
    END IF;
    SET NEW.Us_UserStatusID = _UserStatusID;
  END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.Us_UserStatusID IS NULL
  --      )
  --     -- OR
  --     -- (NEW.Us_UserStatusID = 0
  --     --  )
  --     )
  -- THEN
  --   SELECT
  --     MAX(ec_U_UserStatus.Us_UserStatusID)+1
  --   INTO
  --     _UserStatusID
  --   FROM
  --     ec_U_UserStatus;
  --   IF (_UserStatusID IS NULL)
  --   THEN
  --     SET _UserStatusID = 0;
  --   END IF;
  --   SET NEW.Us_UserStatusID = _UserStatusID;
  -- END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    3,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'UserStatus',
    CONCAT('Insert',
           'NEW.Us_UserStatusID=',
           NEW.Us_UserStatusID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbu_ec_U_UserStatus;
DELIMITER //
CREATE TRIGGER   tbu_ec_U_UserStatus
BEFORE UPDATE ON ec_U_UserStatus
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.Us_EntryCreatedTime = OLD.Us_EntryCreatedTime;
  SET NEW.Us_EntryUpdatedTime = CURRENT_TIMESTAMP();
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    5,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'UserStatus',
    CONCAT('Update',
           'NEW.Us_UserStatusID=',
           NEW.Us_UserStatusID,
           'OLD.Us_UserStatusID=',
           OLD.Us_UserStatusID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbd_ec_U_UserStatus;
DELIMITER //
CREATE TRIGGER   tbd_ec_U_UserStatus
BEFORE DELETE ON ec_U_UserStatus
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    7,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'UserStatus',
    CONCAT('Delete',
           'OLD.Us_UserStatusID=',
           OLD.Us_UserStatusID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tai_ec_U_UserStatus;
DELIMITER //
CREATE TRIGGER   tai_ec_U_UserStatus
AFTER INSERT ON  ec_U_UserStatus
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    4,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'UserStatus',
    CONCAT('Insert',
           'NEW.Us_UserStatusID=',
           NEW.Us_UserStatusID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tau_ec_U_UserStatus;
DELIMITER //
CREATE TRIGGER   tau_ec_U_UserStatus
AFTER UPDATE ON  ec_U_UserStatus
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    6,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'UserStatus',
    CONCAT('Update',
           'NEW.Us_UserStatusID=',
           NEW.Us_UserStatusID,
           'OLD.Us_UserStatusID=',
           OLD.Us_UserStatusID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tad_ec_U_UserStatus;
DELIMITER //
CREATE TRIGGER   tad_ec_U_UserStatus
AFTER DELETE ON  ec_U_UserStatus
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    8,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'UserStatus',
    CONCAT('Delete',
           'OLD.Us_UserStatusID=',
           OLD.Us_UserStatusID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_U_UserStatus
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  AUTO_INCREMENT = 100
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_U_UserStatus
MODIFY COLUMN
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  Us_UserStatusID                       BIGINT DEFAULT 0              NOT NULL
                                        AUTO_INCREMENT
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbi_ec_U_User;
DELIMITER //
CREATE TRIGGER   tbi_ec_U_User
BEFORE INSERT ON ec_U_User
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _UserID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.U_EntryCreatedTime = CURRENT_TIMESTAMP();
  SET NEW.U_EntryUpdatedTime = '0000-00-00 00:00:00';
  -- --------------------------------------------------------------------------
  IF ((NEW.U_UserID IS NULL
       )
      OR
      (NEW.U_UserID != 0
       )
      )
  THEN
    SET _UserID =
    sqlGetId3(NEW.U_OrganizationID,
              NEW.U_UserName,
              NEW.U_UserEmailAddress
              );
    -- CAST(CONV(SUBSTRING(MD5(CONCAT(NEW.U_OrganizationID,
    --                                NEW.U_UserName,
    --                                NEW.U_UserEmailAddress
    --                                )
    --                         ),
    --                     1,15
    --                     ),
    --           16,10
    --           )
    --      AS UNSIGNED INTEGER
    --      );
    IF (_UserID IS NULL)
    THEN
      SET _UserID = 0;
    END IF;
    SET NEW.U_UserID = _UserID;
  END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.U_UserID IS NULL
  --      )
  --     -- OR
  --     -- (NEW.U_UserID = 0
  --     --  )
  --     )
  -- THEN
  --   SELECT
  --     MAX(ec_U_User.U_UserID)+1
  --   INTO
  --     _UserID
  --   FROM
  --     ec_U_User;
  --   IF (_UserID IS NULL)
  --   THEN
  --     SET _UserID = 0;
  --   END IF;
  --   SET NEW.U_UserID = _UserID;
  -- END IF;
  -- --------------------------------------------------------------------------
  IF ((NEW.U_UserTypeID IS NULL
       )
      OR
      (NEW.U_UserTypeID < 1
       )
      )
  THEN
    SET NEW.U_UserTypeID = 1;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((NEW.U_UserStatusID IS NULL
       )
      OR
      (NEW.U_UserStatusID < 1
       )
      )
  THEN
    SET NEW.U_UserStatusID = 1;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    3,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'User',
    CONCAT('Insert',
           'NEW.U_UserID=',
           NEW.U_UserID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbu_ec_U_User;
DELIMITER //
CREATE TRIGGER   tbu_ec_U_User
BEFORE UPDATE ON ec_U_User
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.U_EntryCreatedTime = OLD.U_EntryCreatedTime;
  SET NEW.U_EntryUpdatedTime = CURRENT_TIMESTAMP();
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    5,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'User',
    CONCAT('Update',
           'NEW.U_UserID=',
           NEW.U_UserID,
           'OLD.U_UserID=',
           OLD.U_UserID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbd_ec_U_User;
DELIMITER //
CREATE TRIGGER   tbd_ec_U_User
BEFORE DELETE ON ec_U_User
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    7,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'User',
    CONCAT('Delete',
           'OLD.U_UserID=',
           OLD.U_UserID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tai_ec_U_User;
DELIMITER //
CREATE TRIGGER   tai_ec_U_User
AFTER INSERT ON  ec_U_User
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    4,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'User',
    CONCAT('Insert',
           'NEW.U_UserID=',
           NEW.U_UserID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tau_ec_U_User;
DELIMITER //
CREATE TRIGGER   tau_ec_U_User
AFTER UPDATE ON  ec_U_User
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    6,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'User',
    CONCAT('Update',
           'NEW.U_UserID=',
           NEW.U_UserID,
           'OLD.U_UserID=',
           OLD.U_UserID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tad_ec_U_User;
DELIMITER //
CREATE TRIGGER   tad_ec_U_User
AFTER DELETE ON  ec_U_User
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    8,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'User',
    CONCAT('Delete',
           'OLD.U_UserID=',
           OLD.U_UserID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_U_User
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  AUTO_INCREMENT = 100
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_U_User
MODIFY COLUMN
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  U_UserID                              BIGINT DEFAULT 0              NOT NULL
                                        AUTO_INCREMENT
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbi_ec_U_UserFullText;
DELIMITER //
CREATE TRIGGER   tbi_ec_U_UserFullText
BEFORE INSERT ON ec_U_UserFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _UserID BIGINT;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.Uft_EntryCreatedTime = CURRENT_TIMESTAMP();
  SET NEW.Uft_EntryUpdatedTime = '0000-00-00 00:00:00';
  -- --------------------------------------------------------------------------
  IF ((NEW.Uft_UserID IS NULL
       )
      OR
      (NEW.Uft_UserID != 0
       )
      )
  THEN
    SET _UserID =
    sqlGetId3(NEW.Uft_OrganizationID,
              NEW.Uft_UserName,
              NEW.Uft_UserEmailAddress
              );
    -- CAST(CONV(SUBSTRING(MD5(CONCAT(NEW.Uft_OrganizationID,
    --                                NEW.Uft_UserName,
    --                                NEW.Uft_UserEmailAddress
    --                                )
    --                         ),
    --                     1,15
    --                     ),
    --           16,10
    --           )
    --      AS UNSIGNED INTEGER
    --      );
    IF (_UserID IS NULL)
    THEN
      SET _UserID = 0;
    END IF;
    SET NEW.Uft_UserID = _UserID;
  END IF;
  -- --------------------------------------------------------------------------
  -- IF ((NEW.Uft_UserID IS NULL
  --      )
  --     -- OR
  --     -- (NEW.Uft_UserID = 0
  --     --  )
  --     )
  -- THEN
  --   SELECT
  --     MAX(ec_U_UserFullText.Uft_UserID)+1
  --   INTO
  --     _UserID
  --   FROM
  --     ec_U_UserFullText;
  --   IF (_UserID IS NULL)
  --   THEN
  --     SET _UserID = 0;
  --   END IF;
  --   SET NEW.Uft_UserID = _UserID;
  -- END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    3,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'User',
    CONCAT('Insert',
           'NEW.Uft_UserID=',
           NEW.Uft_UserID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbu_ec_U_UserFullText;
DELIMITER //
CREATE TRIGGER   tbu_ec_U_UserFullText
BEFORE UPDATE ON ec_U_UserFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  SET NEW.Uft_EntryCreatedTime = OLD.Uft_EntryCreatedTime;
  SET NEW.Uft_EntryUpdatedTime = CURRENT_TIMESTAMP();
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    5,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'User',
    CONCAT('Update',
           'NEW.Uft_UserID=',
           NEW.Uft_UserID,
           'OLD.Uft_UserID=',
           OLD.Uft_UserID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tbd_ec_U_UserFullText;
DELIMITER //
CREATE TRIGGER   tbd_ec_U_UserFullText
BEFORE DELETE ON ec_U_UserFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    7,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'User',
    CONCAT('Delete',
           'OLD.Uft_UserID=',
           OLD.Uft_UserID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tai_ec_U_UserFullText;
DELIMITER //
CREATE TRIGGER   tai_ec_U_UserFullText
AFTER INSERT ON  ec_U_UserFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    4,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'User',
    CONCAT('Insert',
           'NEW.Uft_UserID=',
           NEW.Uft_UserID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tau_ec_U_UserFullText;
DELIMITER //
CREATE TRIGGER   tau_ec_U_UserFullText
AFTER UPDATE ON  ec_U_UserFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    6,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'User',
    CONCAT('Update',
           'NEW.Uft_UserID=',
           NEW.Uft_UserID,
           'OLD.Uft_UserID=',
           OLD.Uft_UserID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP TRIGGER IF EXISTS tad_ec_U_UserFullText;
DELIMITER //
CREATE TRIGGER   tad_ec_U_UserFullText
AFTER DELETE ON  ec_U_UserFullText
FOR EACH ROW
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT IS NOT NULL
       )
      AND
      (@ECMAIN__DISABLE_TRIGGER_FOR_IMPORT = 1
       )
      )
  THEN
    LEAVE ECMAIN_LeaveLabel;
  END IF;
  -- --------------------------------------------------------------------------
  IF ((@ECMAIN__DISABLE_LOGGING_IN_TRIGGER IS NULL
       )
      OR
      (@ECMAIN__DISABLE_LOGGING_IN_TRIGGER != 1
       )
      )
  THEN
  INSERT INTO ec_L_Log(
    L_LogTypeID,
    L_LogSeriousnessID,
    L_LogUser,
    L_LogDatabase,
    L_LogConnectionID,
    L_LogCatalog,
    L_LogMessage,
    L_LogSqlStatement,
    L_LogSqlCode,
    L_LogSqlErrorMessage,
    L_LogContext,
    L_Description
  ) VALUES (
    8,
    1,
    USER(),
    DATABASE(),
    CONNECTION_ID(),
    'User',
    CONCAT('Delete',
           'OLD.Uft_UserID=',
           OLD.Uft_UserID),
    '',
    0,
    '',
    '',
    ''
  );
  END IF;
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_U_UserFullText
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  AUTO_INCREMENT = 100
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
-------------------------------------------------------------------------------
--          012345678901234567890123456789
-------------------------------------------------------------------------------
*/
/*
ALTER TABLE ec_U_UserFullText
MODIFY COLUMN
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
  Uft_UserID                            BIGINT DEFAULT 0              NOT NULL
                                        AUTO_INCREMENT
  -- --------------------------------------------------------------------------
  -- 345678901234567890123456789
  -- --------------------------------------------------------------------------
;
*/

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
-------------------------------------------------------------------------------
--               012345678901234567890123456789
-------------------------------------------------------------------------------
*/
DROP PROCEDURE IF EXISTS sp_ec_U_User;
DELIMITER //
CREATE PROCEDURE sp_ec_U_User(
  _UserName           VARCHAR(255),
  _UserTypeID         BIGINT,
  __OrganizationID    BIGINT,
  _OrganizationName   VARCHAR(255),
  _UserStatusID       BIGINT,
  _UserTitle          VARCHAR(255),
  _UserEmailAddress   VARCHAR(255),
  _UserPasswordHash   VARCHAR(255),
  _UserOfficePhone    VARCHAR(255),
  _UserCellPhone      VARCHAR(255),
  _UserSurrogatePhone VARCHAR(255),
  _Description        VARCHAR(1024)
)
ECMAIN_LeaveLabel: BEGIN
  -- --------------------------------------------------------------------------
  DECLARE _OrganizationID BIGINT;
  DECLARE _UserPasswordHashTemp VARCHAR(255);
  -- --------------------------------------------------------------------------
  IF (__OrganizationID IS NOT NULL)
  THEN
    SET _OrganizationID = __OrganizationID;
  ELSE
    SET _OrganizationID =
    sqlGetId(_OrganizationName);
    -- CAST(CONV(SUBSTRING(MD5(_OrganizationName),1,15),16,10)
    --      AS UNSIGNED INTEGER);
  END IF;
  IF (_UserPasswordHash IS NOT NULL)
  THEN
    SET _UserPasswordHashTemp = _UserPasswordHash;
  ELSE
    SET _UserPasswordHashTemp = sqlGetVarchar255StrongHash4(
      _UserName,
      _UserTitle,
      _OrganizationName,
      _UserEmailAddress);
  END IF;
  -- --------------------------------------------------------------------------
  INSERT INTO ec_U_User(
    U_UserTypeID,
    U_OrganizationID,
    U_UserStatusID,
    U_UserName,
    U_UserTitle,
    U_UserEmailAddress,
    U_UserPasswordHash,
    U_UserOfficePhone,
    U_UserCellPhone,
    U_UserSurrogatePhone,
    U_Description
  ) VALUES (
    _UserTypeID,
    _OrganizationID,
    _UserStatusID,
    _UserName,
    _UserTitle,
    _UserEmailAddress,
    _UserPasswordHashTemp,
    _UserOfficePhone,
    _UserCellPhone,
    _UserSurrogatePhone,
    _Description
  );
  -- --------------------------------------------------------------------------
  INSERT INTO ec_U_UserFullText(
    Uft_OrganizationID,
    Uft_UserName,
    Uft_UserTitle,
    Uft_UserEmailAddress,
    Uft_UserOfficePhone,
    Uft_UserCellPhone,
    Uft_UserSurrogatePhone,
    Uft_Description
  ) VALUES (
    _OrganizationID,
    _UserName,
    _UserTitle,
    _UserEmailAddress,
    _UserOfficePhone,
    _UserCellPhone,
    _UserSurrogatePhone,
    _Description
  );
  -- --------------------------------------------------------------------------
END;
//
DELIMITER ;

-- print

/*
----------------------------------------|-----------------------------|--------
-------------------------------------------------------------------------------
--23456789012345678901234567890123456789012345678901234567890123456789012345678
-------------------------------------------------------------------------------
----------------------------------------|-----------------------------|--------
*/

/*
===============================================================================
===============================================================================
===============================================================================
===============================================================================
*/
